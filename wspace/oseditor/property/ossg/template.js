define(["handlebars"],function(e){var t,n={};return t=function(e,t,n,r,i){function l(e,t){var r;return r=n.unless.call(e,e&&e.defaultSG,{hash:{},inverse:u.noop,fn:u.program(2,c,t),data:t}),r||r===0?r:""}function c(e,t){return'<div class="os-sg-remove icon-delete bubble-popup tooltip" data-tooltip="Delete Security Group"></div>'}function h(e,t){var r="";return r+='\n    <section class="group">\n        <dl class="dl-vertical">\n            <dt>ID</dt><dd>'+a(n.emptyStr.call(e,e&&e.id,{hash:{},data:t}))+"</dd>\n            <dt>Name</dt><dd>"+a(n.emptyStr.call(e,e&&e.name,{hash:{},data:t}))+"</dd>\n            <dt>Description</dt><dd>"+a(n.emptyStr.call(e,e&&e.description,{hash:{},data:t}))+"</dd>\n        </dl>\n    </section>\n    ",r}function p(e,t){var r="",i;r+='\n    <section class="group required">\n        <label class="name">Name</label>\n        <input data-target="name" class="selection string" value="'+a((i=e&&e.name,typeof i===f?i.apply(e):i))+'" ',i=n["if"].call(e,e&&e.defaultSG,{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(i||i===0)r+=i;r+='/>\n    </section>\n    <section class="group required">\n        <label class="name">Description</label>\n        <input data-target="description" class="selection string" ',i=n["if"].call(e,e&&e.modeIsAppEdit,{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(i||i===0)r+=i;return r+=' value="'+a((i=e&&e.description,typeof i===f?i.apply(e):i))+'"/>\n    </section>\n    ',r}function d(e,t){return"disabled"}function v(e,t,r){var i="",s;i+='\n                <div class="rule-item" data-id="'+a((s=e&&e.id,typeof s===f?s.apply(e):s))+'">\n                    <select data-target="protocol" class="selection option" value="'+a((s=e&&e.protocol,typeof s===f?s.apply(e):s))+'" ',s=n["if"].call(e,r&&r.modeIsApp,{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(s||s===0)i+=s;i+='>\n                        <option value="tcp">TCP</option>\n                        <option value="udp">UDP</option>\n                        <option value="icmp">ICMP</option>\n                        <option value="all">All</option>\n                    </select>\n                    <input class="selection" data-target="port" value="'+a((s=e&&e.port,typeof s===f?s.apply(e):s))+'" ',s=n.ifCond.call(e,e&&e.protocol,"all",{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(s||s===0)i+=s;i+=' data-tip="Input single port, port range or port range." ',s=n["if"].call(e,r&&r.modeIsApp,{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(s||s===0)i+=s;i+='/>\n                    <select data-target="ip" data-button-tpl="ipTipTpl" class="selection option" value="',s=n["if"].call(e,e&&e.sgId,{hash:{},inverse:u.program(12,g,t),fn:u.program(10,m,t),data:t});if(s||s===0)i+=s;i+='" data-valid-handle="ipValid" ',s=n["if"].call(e,r&&r.modeIsApp,{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(s||s===0)i+=s;i+='>\n                        <option value="',s=n["if"].call(e,e&&e.sgId,{hash:{},inverse:u.program(12,g,t),fn:u.program(10,m,t),data:t});if(s||s===0)i+=s;i+='">'+a((s=e&&e.ip,typeof s===f?s.apply(e):s))+"</option>\n                    </select>\n                    ",s=n.unless.call(e,r&&r.modeIsApp,{hash:{},inverse:u.noop,fn:u.program(14,y,t),data:t});if(s||s===0)i+=s;return i+="\n                </div>\n                ",i}function m(e,t){var n;return a((n=e&&e.sgId,typeof n===f?n.apply(e):n))}function g(e,t){var n;return a((n=e&&e.ip,typeof n===f?n.apply(e):n))}function y(e,t){return'<div class="rule-item-remove icon-delete tooltip" data-tooltip="Delete Rule"></div>'}function b(e,t,r){var i="",s;i+='\n                <div class="rule-item" data-id="'+a((s=e&&e.id,typeof s===f?s.apply(e):s))+'">\n                    <select data-target="protocol" class="selection option" value="'+a((s=e&&e.protocol,typeof s===f?s.apply(e):s))+'" ',s=n["if"].call(e,r&&r.modeIsApp,{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(s||s===0)i+=s;i+='>\n                        <option value="tcp">TCP</option>\n                        <option value="udp">UDP</option>\n                        <option value="icmp">ICMP</option>\n                        <option value="all">All</option>\n                    </select>\n                    <input class="selection" data-target="port" value="'+a((s=e&&e.port,typeof s===f?s.apply(e):s))+'" ',s=n.ifCond.call(e,e&&e.protocol,"all",{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(s||s===0)i+=s;i+=' data-tip="Input single port, port range or a common protocol" ',s=n["if"].call(e,r&&r.modeIsApp,{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(s||s===0)i+=s;i+='/>\n                    <select data-target="ip" data-button-tpl="ipTipTpl" class="selection option" value="',s=n["if"].call(e,e&&e.sgId,{hash:{},inverse:u.program(12,g,t),fn:u.program(10,m,t),data:t});if(s||s===0)i+=s;i+='" data-valid-handle="ipValid" ',s=n["if"].call(e,r&&r.modeIsApp,{hash:{},inverse:u.noop,fn:u.program(7,d,t),data:t});if(s||s===0)i+=s;i+='>\n                        <option value="',s=n["if"].call(e,e&&e.sgId,{hash:{},inverse:u.program(12,g,t),fn:u.program(10,m,t),data:t});if(s||s===0)i+=s;i+='">'+a((s=e&&e.ip,typeof s===f?s.apply(e):s))+"</option>\n                    </select>\n                    ",s=n.unless.call(e,r&&r.modeIsApp,{hash:{},inverse:u.noop,fn:u.program(14,y,t),data:t});if(s||s===0)i+=s;return i+="\n                </div>\n                ",i}function w(e,t){var n="",r;return n+='\n        <li class="member-item">'+a((r=e&&e.name,typeof r===f?r.apply(e):r))+"</li>\n        ",n}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,e.helpers),i=i||{};var s="",o,u=this,a=this.escapeExpression,f="function";s+='<h1 class="title">'+a((o=t&&t.name,typeof o===f?o.apply(t):o))+"</h1>\n",o=n.unless.call(t,t&&t.modeIsApp,{hash:{},inverse:u.noop,fn:u.program(1,l,i),data:i});if(o||o===0)s+=o;s+='\n\n<div class="option-group-head expand">\n    Security Group\n</div>\n<div class="option-group">\n    ',o=n["if"].call(t,t&&t.modeIsApp,{hash:{},inverse:u.program(6,p,i),fn:u.program(4,h,i),data:i});if(o||o===0)s+=o;s+='\n</div>\n<div class="option-group-head expand">Rule (<span class="sg-rule-count"></span>)</div>\n<div class="direction-switch btn-group">\n    <button class="icon-unknown t-m-btn ingress active">Ingress (<span class="sg-ingress-count"></span>)</button>\n    <button class="icon-unknown t-m-btn egress">Egress (<span class="sg-egress-count"></span>)</button>\n\n    <div class="os-sg-rule-list-container">\n        <div class="rule-container ingress">\n            <ul class="head-list clearfix">\n                <li class="head">Protocol</li>\n                <li class="head">Port/Code</li>\n                <li class="head">Source</li>\n            </ul>\n            <div class="rule-list ingress clearfix">\n                ',o=n.each.call(t,t&&t.ingressRules,{hash:{},inverse:u.noop,fn:u.programWithDepth(9,v,i,t),data:i});if(o||o===0)s+=o;s+='\n            </div>\n        </div>\n        <div class="rule-container egress hide">\n            <ul class="head-list clearfix">\n                <li class="head">Protocol</li>\n                <li class="head">Port/Code</li>\n                <li class="head">Target</li>\n            </ul>\n            <div class="rule-list egress clearfix">\n                ',o=n.each.call(t,t&&t.egressRules,{hash:{},inverse:u.noop,fn:u.programWithDepth(16,b,i,t),data:i});if(o||o===0)s+=o;s+='\n            </div>\n        </div>\n    </div>\n</div>\n<div class="option-group-head expand">\n    Member (<span class="sg-member-count"></span>)\n</div>\n<div class="option-group">\n    <ul class="os-sg-member-list">\n        ',o=n.each.call(t,t&&t.memberList,{hash:{},inverse:u.noop,fn:u.program(18,w,i),data:i});if(o||o===0)s+=o;return s+="\n    </ul>\n</div>",s},n.stack=e.template(t),t=function(e,t,n,r,i){return this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,e.helpers),i=i||{},'<div class="rule-item">\n    <select data-target="protocol" class="selection option" value="" >\n        <option value="tcp">TCP</option>\n        <option value="udp">UDP</option>\n        <option value="icmp">ICMP</option>\n        <option value="all">All</option>\n    </select>\n    <input class="selection" data-target="port" value="" data-tip="Input single port, port range or a common protocol" />\n    <select data-target="ip" class="selection option" data-button-tpl="ipTipTpl" value="" data-valid-handle="ipValid" ></select>\n    <div class="rule-item-remove icon-delete tooltip" data-tooltip="Delete Rule"></div>\n</div>'},n.newItem=e.template(t),t=function(e,t,n,r,i){return this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,e.helpers),i=i||{},'<div class="info">Confirm to delete this security group?</div>\n<div class="operate">\n    <button class="confirm btn btn-red">Delete</li>\n    <button class="cancel btn btn-silver">Cancel</li>\n</div>'},n.sgRemovePopup=e.template(t),t=function(e,t,n,r,i){return this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,e.helpers),i=i||{},'<input class="input os-sg-new-input" placeholder="Add new rule..." />'},n.sgNewInput=e.template(t),t=function(e,t,n,r,i){return this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,e.helpers),i=i||{},'<div class="os-sg-rule-ip-tip"><i class="icon-info"></i>Input CIDR / Security Group</div>'},n.sgIPInputTip=e.template(t),n});
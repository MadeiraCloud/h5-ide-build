define('workspaces/awseditor/template/TplRightPanel',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<button class=\"HideOEPanelRight tooltip sidebar-hider icon-caret-right\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_TOGGLE_RESOURCE_PANEL", {hash:{},data:data}))
    + "'></button>\n<nav class=\"sidebar-title\">\n  <button class=\"property-tab\" id=\"btn-switch-property\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_PROPERTY", {hash:{},data:data}))
    + "</button>\n  <button class=\"property-tab\" id=\"btn-switch-state\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_STATE", {hash:{},data:data}))
    + " <b class=\"count\"></b></button>\n\n</nav>\n\n<div class=\"sub-property\">\n  <section class=\"property-panel-wrapper property-first-panel\">\n    <header class=\"property-sidebar-title truncate property-title\"></header>\n    <div class=\"scroll-wrap scrollbar-auto-hide\">\n      <div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n      <div class=\"scroll-content property-content property-details\"></div>\n    </div>\n  </section>\n\n  <section class=\"property-panel-wrapper property-second-panel\">\n    <div class=\"property-sidebar-title\">\n      <button class=\"back icon-btn-back HideSecondPanel tooltip\"></button><span class=\"truncate property-second-title\"></span>\n    </div>\n    <div class=\"scroll-wrap scrollbar-auto-hide\">\n      <div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n      <div class=\"scroll-content property-content\"></div>\n    </div>\n  </section>\n</div>\n<div class=\"sub-stateeditor\"></div>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/base/main',['event'], function(ide_event) {
    var PropertyModule, activeModule, activeModuleType, activeSubModule, activeSubModuleType, propertySubTypeMap, propertyTypeMap, propertyTypeRegExpArr, slice, __getProperty, __loadProperty, __resetSelectedinGroup;
    activeModule = null;
    activeModuleType = null;
    activeSubModule = null;
    activeSubModuleType = null;
    slice = [].slice;
    ide_event.onLongListen("all", function(eventName) {
      var args, handler;
      if ((!activeModule || !activeModule.ideEvents) && (!activeSubModule || !activeSubModule.ideEvents)) {
        return;
      }
      if (activeModule && activeModule.ideEvents && activeModule.ideEvents.hasOwnProperty(eventName)) {
        args = slice.call(arguments, 1);
        handler = activeModule.ideEvents[eventName];
        if (_.isString(handler)) {
          handler = activeModule[handler];
        }
        handler.apply(activeModule, args);
      }
      if (activeSubModule && activeSubModule.ideEvents && activeSubModule.ideEvents.hasOwnProperty(eventName)) {
        if (!args) {
          args = slice.call(arguments, 1);
        }
        handler = activeSubModule.ideEvents[eventName];
        if (_.isString(handler)) {
          handler = activeSubModule[handler];
        }
        handler.apply(activeSubModule, args);
      }
      return null;
    });
    propertyTypeMap = {};
    propertyTypeRegExpArr = [];
    propertyTypeMap.DEFAULT_TYPE = "default";
    propertySubTypeMap = {};

    /*
     * Above is internal implementation. User doesn't have to care about its detail.
     */

    /*
    
    -------------------------------
     PropertyModule is a base class that every property controller ( a.k.a property main )
     should inherit.
    -------------------------------
    
    ++ Class attributes ++
    
     * ideEvents : Map
                  ( Defined by user )
        example : this.ideEvents = {
                    ABC : "functionNameOfModule"
                    DEF : () -> null
                  }
        description : This attributes specify what kind of ide_event this property cares. The event will dispatch to the property when the property is active.
    
     * subPanelID : String
                  ( Defined by user )
        description : If it is not falsy, this Module is meaned to be used as sub panel, or part of another module. For example, sglist / acl / sgrule should set this to something
    
     * uid        : String
                  ( Defined by library when property is loaded )
        description : This uid is the uid of current component. It is set before `init#{type}` is called.
    
    
     * type      : PropertyModule.TYPE.STACK || PropertyModule.TYPE.APP
                  ( Defined by library when property is loaded)
        description : User can use this attribute to determine what mode ( stack or app ) it is right now.
    
     * handle    : String | Regex
                  ( Defined by library when property is loaded)
        description : User can use this attribute to determine what type of the component ( This will be one of the value in this.handleTypes )
    
     * handleTypes : String | Array(of string, regex)
                  ( Defined by user )
        description : This attribute is used to determine which Property should be shown. The String can be one of constant.RESTYPE.
        Examples :
            "AWS.EC2.Instance",
            "App:AWS.EC2.Instance"   ( `App:` means it only open when it's app mode )
            "Stack:AWS.EC2.Instance" ( `Stack:` means it only open when it's design mode )
            "vgw-vpn>cgw-vpn"        ( line between `vgw-vpn` and `cgw-vpn` )
            "subnet-assoc-in>"       ( line between `subnet-assoc-in` and anything )
    
    
     * model     : PropertyModel
                  ( Assigned by user when `init#{type}` is called )
        description : This points to current model for the property.
    
     * view      : PropertyView
                  ( Assigned by user when `init#{type}` is called )
        description : This points to current view for the property.
    
    
    
    ++ Class Protocol ( Should be implemented by user ) ++
     * init#{type} :
         example     : initApp, initStack
         description : These methods are called when the property is loaded. In these method, user has to assign `this.model` and `this.view`. If this method returns false, it means the property is unable to load. And default property panel ( Stack Panel ) will be used.
    
     * setup#{type} :
         example     : setupApp, setupStack
         description : These methods are called after the first time the property is inited. User should use these methods to do proper setup. These methods are called only once, since the `controller`, the `model` and the `view` are all singleton.
    
     * afterLoad#{type} :
         example     : afterLoadApp, afterLoadStack
         description : These methods are called when the property finished loading. The view is guaranteed to be loaded.
    
     * onUnloadSubPanel(id) :
        description : This method is called when sub panel is closed. id is the sub panel's `subPanelID`.
    
    
    
    ++ Class Method ++
    
     * loadSubPanel( subPanelID, componentUid ) :
        description : calling this method will show the property. It does nothing if the property module is main module, not sub module.
    
     * activeModule :
        description : Returns the currently showing property.
    
     * activeSubModule :
        description : Returns the currently showing sub property. Maybe null.
    
    
    
    ++ Static Method ++
    
     * extend :
         description : User must use this method to inherit from PropertyModule. The usage is the same as Backbone's extend.
     */
    PropertyModule = function() {
      this.type = PropertyModule.TYPE.Stack;
      return null;
    };
    PropertyModule.TYPE = PropertyModule.prototype.TYPE = {
      Stack: "Stack",
      App: "App",
      AppEdit: "AppEdit"
    };
    PropertyModule.prototype.loadSubPanel = function(subPanelID, componentUid) {
      return __loadProperty(propertySubTypeMap[subPanelID], subPanelID, componentUid, activeModule.type);
    };
    PropertyModule.extend = function(protoProps, staticProps) {

      /* env:dev                                                                                                                                                                                                                                            env:dev:end */
      var handleTypes, newProperty, newPropertyClass, type, types, _i, _len;
      newPropertyClass = Backbone.Model.extend.call(PropertyModule, protoProps, staticProps);
      newProperty = new newPropertyClass();
      if (newProperty.subPanelID) {
        propertySubTypeMap[newProperty.subPanelID] = newProperty;
        return newPropertyClass;
      }
      if (protoProps.handleTypes === "") {
        handleTypes = [propertyTypeMap.DEFAULT_TYPE];
      } else if (_.isString(protoProps.handleTypes) || !protoProps.handleTypes.hasOwnProperty("length")) {
        handleTypes = [protoProps.handleTypes];
      } else {
        handleTypes = protoProps.handleTypes;
      }
      for (_i = 0, _len = handleTypes.length; _i < _len; _i++) {
        type = handleTypes[_i];

        /* env:dev                                                                                                                                 env:dev:end */
        if (!type.hasOwnProperty("length")) {
          propertyTypeRegExpArr.push({
            regexp: type,
            prop: newProperty
          });
          continue;
        }
        if (type.indexOf(">")) {
          types = type.split(">");
          if (types.length === 2 && types[1].length > 0) {
            propertyTypeMap[types[1] + ">" + types[0]] = newProperty;
          }
        }
        propertyTypeMap[type] = newProperty;
      }
      return newPropertyClass;
    };
    PropertyModule.prototype.activeModule = function() {
      return activeModule;
    };
    PropertyModule.prototype.activeSubModule = function() {
      return activeSubModule;
    };
    PropertyModule.activeModule = PropertyModule.prototype.activeModule;
    PropertyModule.activeSubModule = PropertyModule.prototype.activeSubModule;
    PropertyModule.loadSubPanel = PropertyModule.prototype.loadSubPanel;
    PropertyModule.load = function(componentType, componentUid, tab_type, restore) {
      var loadResult, property;
      property = __getProperty(componentType, componentUid, tab_type);
      loadResult = __loadProperty(property, componentType, componentUid, tab_type, restore);
      if (loadResult !== true) {
        if (loadResult === false) {
          componentType = 'Missing_Resource';
        } else {
          componentType = "";
          console.warn("Cannot open component for type: " + componentType + ", data : " + componentUid);
        }
        property = __getProperty(componentType, componentUid, tab_type);
        return __loadProperty(property, componentType, componentUid, tab_type, restore);
      }
      return true;
    };
    __getProperty = function(componentType, componentUid, tab_type) {
      var handle, property, r, _i, _len;
      if (!componentType) {
        componentType = propertyTypeMap.DEFAULT_TYPE;
      }
      handle = componentType;
      property = propertyTypeMap[componentType];
      if (!property) {
        handle = tab_type + ":" + componentType;
        property = propertyTypeMap[handle];
      }
      if (!property && componentType.indexOf(">" > -1)) {
        for (_i = 0, _len = propertyTypeRegExpArr.length; _i < _len; _i++) {
          r = propertyTypeRegExpArr[_i];
          if (componentType.match(r.regexp)) {
            handle = r.regexp;
            property = r.prop;
            break;
          }
        }
      }
      if (!property) {
        return;
      }
      property.handle = handle;
      return property;
    };
    __loadProperty = function(property, componentType, componentUid, tab_type, restore) {
      var procName, result;
      if (!property) {
        return false;
      }
      property.type = tab_type;
      procName = "init" + property.type;
      if (property[procName]) {
        property.uid = componentUid;
        result = property[procName].call(property, componentUid);
        if (result === false) {
          return;
        }
      } else {
        return;
      }
      procName = "setup" + property.type;
      if (property[procName]) {
        property[procName].call(property);
        property[procName] = null;
      }
      if (property.subPanelID) {
        activeSubModule = property;
        activeSubModuleType = componentType;
      } else {
        activeSubModule = null;
        activeSubModuleType = null;
        activeModule = property;
        activeModuleType = componentType;
      }
      if (property.model.init) {
        property.model.clear({
          silent: true
        });
        if (property.model.init(componentUid) === false) {
          return false;
        }
      }
      __resetSelectedinGroup(restore, property.model);
      property.view.model = property.model;
      property.view._isSub = !!property.subPanelID;
      property.view.__restore = PropertyModule.__restore;
      PropertyModule.__restore = false;
      if (property.subPanelID) {
        property.view._loadAsSub(property.subPanelID);
      } else {
        property.view._load();
      }
      procName = "afterLoad" + property.type;
      if (property[procName]) {
        property[procName].call(property);
      }
      return true;
    };
    __resetSelectedinGroup = function(restore, model) {};
    PropertyModule.onUnloadSubPanel = function() {
      if (activeModule.onUnloadSubPanel) {
        activeModule.onUnloadSubPanel(activeSubModule.subPanelID);
      }
      activeSubModule = null;
      activeSubModuleType = null;
      return null;
    };
    PropertyModule.snapshot = function() {
      return {
        activeModuleId: activeModule.uid,
        activeModuleType: activeModuleType,
        activeSubModuleId: activeSubModule ? activeSubModule.uid : null,
        activeSubModuleType: activeSubModuleType,
        tab_type: activeModule.type
      };
    };
    PropertyModule.restore = function(ss, propertyView) {
      PropertyModule.load(ss.activeModuleType, ss.activeModuleId, ss.tab_type, true);
      if (ss.activeSubModuleType) {
        PropertyModule.__restore = true;
        PropertyModule.loadSubPanel(ss.activeSubModuleType, ss.activeSubModuleId, true);
        PropertyModule.__restore = false;
      }
      return null;
    };
    return PropertyModule;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/base/model',['backbone', 'Design', "constant"], function(Backbone, Design, constant) {

    /*
    
    -------------------------------
     PropertyModel is a base class that every property view should inherit.
    -------------------------------
     */
    var PropertyModel;
    PropertyModel = Backbone.Model.extend({
      init: function() {
        return null;
      },
      setName: function(name) {
        var id;
        id = this.get("uid");
        console.assert(id, "This property model doesn't have an id");
        Design.instance().component(id).setName(name);
        this.set("name", name);
        return null;
      },
      setDesc: function(description) {
        var id;
        id = this.get("uid");
        console.assert(id, "This property model doesn't have an id");
        return Design.instance().component(id).setDesc(description);
      }
    });
    return PropertyModel;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/stack/model',['../base/model', 'constant', "Design"], function(PropertyModel, constant, Design) {
    var StackModel;
    StackModel = PropertyModel.extend({
      init: function() {
        var agentData, design, vpc;
        design = Design.instance();
        if (!design.get("name")) {
          return null;
        }
        agentData = design.get('agent');
        this.set({
          name: design.get("name").replace(/\s+/g, ''),
          id: design.get("id"),
          usage: design.get("usage"),
          description: design.get('description'),
          type: "EC2 VPC",
          region: constant.REGION_SHORT_LABEL[design.region()],
          isApp: this.isApp,
          isAppEdit: this.isAppEdit,
          isStack: this.isStack,
          isImport: design.modeIsAppView(),
          isResDiff: design.get('resource_diff'),
          opsEnable: agentData.enabled
        });
        vpc = Design.modelClassForType(constant.RESTYPE.VPC).theVPC();
        if (vpc) {
          this.set("vpcid", vpc.get("appId"));
        }
        this.getNetworkACL();
        if (this.isStack) {
          this.set('isStack', true);
        }
        this.set(Design.instance().getCost());
        return null;
      },
      createAcl: function() {
        var ACLModel;
        ACLModel = Design.modelClassForType(constant.RESTYPE.ACL);
        return (new ACLModel()).id;
      },
      getNetworkACL: function() {
        var ACLModel, defaultACL, networkAcls;
        ACLModel = Design.modelClassForType(constant.RESTYPE.ACL);
        networkAcls = [];
        defaultACL = null;
        _.each(ACLModel.allObjects(), (function(_this) {
          return function(acl) {
            var aclObj, deletable;
            deletable = true;
            if (_this.isApp) {
              deletable = false;
            } else if (acl.isDefault()) {
              deletable = false;
            } else if (_this.isAppEdit) {
              deletable = !acl.get("appId");
            }
            aclObj = {
              uid: acl.id,
              name: acl.get("name"),
              rule: acl.getRuleCount(),
              association: acl.getAssoCount(),
              deletable: deletable
            };
            if (acl.isDefault()) {
              defaultACL = aclObj;
            } else {
              networkAcls.splice(_.sortedIndex(networkAcls, aclObj, "name"), 0, aclObj);
            }
            return null;
          };
        })(this));
        if (defaultACL) {
          networkAcls.splice(0, 0, defaultACL);
        }
        this.set("networkAcls", networkAcls);
        return null;
      },
      removeAcl: function(acl_uid) {
        Design.instance().component(acl_uid).remove();
        this.getNetworkACL();
        return null;
      },
      updateStackName: function(name) {
        this.set("name", name);
        Design.instance().set("name", name);
      },
      updateDescription: function(description) {
        this.set("description", description);
        Design.instance().set('description', description);
      }
    });
    return new StackModel();
  });

}).call(this);

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/property/base/view',['constant', 'i18n!/nls/lang.js', 'backbone', 'jquery', 'handlebars', 'UI.selectbox', 'UI.notification', 'UI.multiinputbox', 'UI.modal', 'UI.selectbox', 'MC.validate', 'UI.parsley', 'UI.tooltip', 'UI.sortable', 'UI.tablist'], function(constant, lang) {

    /*
    
    -------------------------------
     PropertyView is a base class that every property view should inherit.
    -------------------------------
    
    ++ Class attributes ( Extra attributes from Backbone.View ) ++
    
     * model : PropertyModel
        description : This attributes points to the model that is associated with the view.
    
    
    
    ++ Class Protocol ( Should be implemented by user ) ++
    
     * render :
        description : In this method, user should render its content to `this.$el`. If this method returns a string, it is consider as the title of the property, thus you don't have to call `setTile`.
    
    
    
    ++ Class Method ++
     * forceShow :
        description : Call this method before focusing a input of property panel. This method ensure the property panel is not hidden.
     */
    var PropertyView, subViews, trash;
    trash = [];
    subViews = [];
    PropertyView = Backbone.View.extend({
      __addToTrash: function(garbage) {
        if (__indexOf.call(trash, garbage) < 0) {
          return trash.push(garbage);
        }
      },
      __clearTrash: function() {
        var t, _i, _len;
        for (_i = 0, _len = trash.length; _i < _len; _i++) {
          t = trash[_i];
          if (_.isObject(t) && t.remove) {
            t.__removeSubView();
          }
        }
        trash = [];
        return this;
      },
      __removeSubView: function() {
        var subView, _i, _len;
        for (_i = 0, _len = subViews.length; _i < _len; _i++) {
          subView = subViews[_i];
          if (_.isObject(subView) && _.isFunction(subView.remove)) {
            subView.remove();
          }
        }
        return subViews = [];
      },
      addSubView: function(view) {
        if (__indexOf.call(subViews, view) < 0) {
          return subViews.push(view);
        }
      },
      setTitle: function(title) {
        $("#OEPanelRight").find(this._isSub ? ".property-second-title" : ".property-title").text(title);
      },
      prependTitle: function(additionalTitle) {
        $("#OEPanelRight").find(this._isSub ? ".property-second-title" : ".property-title").prepend(additionalTitle);
      },
      forceShow: function() {
        $("#OEPanelRight").trigger("FORCE_SHOW");
        return null;
      },
      disabledAllOperabilityArea: function(disabled) {
        var divTmpl;
        if (disabled) {
          if ($("#OpsEditor").children(".disabled-event-layout").length) {
            return;
          }
          divTmpl = '<div class="disabled-event-layout"></div>';
          $('#OpsEditor').append(divTmpl);
          return $('#tabbar-wrapper').append(divTmpl);
        } else {
          return $('.disabled-event-layout').remove();
        }
      },
      _load: function() {
        var $new_panel, $panel;
        this.__clearTrash();
        this.__addToTrash(this);
        $panel = $("#OEPanelRight").find(".property-first-panel").find(".property-details");
        $new_panel = $("<div class='scroll-content property-content property-details'></div>").insertAfter($panel);
        $panel.empty().remove();
        this._resetImmediatelySection();
        this.setElement($new_panel);
        this.render();
        this.focusImportantInput();
        return null;
      },
      _resetImmediatelySection: function() {
        $('.apply-immediately-section').remove();
        return $('.property-panel-wrapper').removeClass('immediately');
      },
      _loadAsSub: function(subPanelID) {
        var that;
        if (this.__restore) {
          $("#OEPanelRight").trigger("OPEN_SUBPANEL_IMM");
        } else {
          $("#OEPanelRight").trigger("OPEN_SUBPANEL");
        }
        this.setElement($("#OEPanelRight").find(".property-second-panel .property-content"));
        this.render();
        that = this;
        setTimeout((function() {
          return that.focusImportantInput();
        }), 200);
        return null;
      },
      _render: function() {
        var resComp, resUID, result;
        result = this._originalRender();
        selectbox.init();
        if (_.isString(result)) {
          resUID = this.model.get('uid');
          if (resUID) {
            resComp = Design.instance().component(resUID);
            if (resComp && (resComp.type === constant.RESTYPE.SG || resComp.type === constant.RESTYPE.DBINSTANCE)) {
              return null;
            }
          }
          this.setTitle(result);
        } else {
          return result;
        }
        return null;
      },
      focusImportantInput: function() {
        var $emptyInput, that;
        that = this;
        $emptyInput = that.$el.find("input[data-empty-remove]").filter(function() {
          return !this.value.length;
        });
        if ($emptyInput.length) {
          setTimeout(function() {
            that.forceShow();
            $emptyInput.focus();
            return that.disabledAllOperabilityArea(true);
          }, 0);
        }
        return null;
      }
    });
    PropertyView.extend = function(protoProps, staticProps) {
      if (protoProps.render) {
        protoProps._originalRender = protoProps.render;
        protoProps.render = PropertyView.prototype._render;
      }
      return Backbone.View.extend.call(this, protoProps, staticProps);
    };
    return PropertyView;
  });

}).call(this);

define('workspaces/awseditor/property/stack/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <dl class=\"dl-horizontal dl-region-type property-control-group\">\n      <dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_LBL_REGION", {hash:{},data:data}))
    + "</label></dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.region)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_LBL_TYPE", {hash:{},data:data}))
    + "</label></dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.type)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.APP_LBL_ID", {hash:{},data:data}))
    + "</label></dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.usage), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      <dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label></dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isApp), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  ";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group\" data-bind=\"true\">\n        <label class=\"left\" for=\"property-app-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.APP_LBL_NAME", {hash:{},data:data}))
    + "</label>\n        <input class=\"input\" type=\"text\" data-ignore=\"true\" data-required-rollback=\"true\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-app-name\">\n    </section>\n    ";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_LBL_USAGE", {hash:{},data:data}))
    + "</label></dt>\n      <dd style=\"text-transform: capitalize\">"
    + escapeExpression(((stack1 = (depth0 && depth0.usage)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      ";
  return buffer;
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dl class=\"dl-vertical\">\n      <dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.APP_LBL_INSTANCE_STATE", {hash:{},data:data}))
    + "</label></dt>\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.opsEnable), {hash:{},inverse:self.program(9, program9, data),fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      <dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.APP_LBL_RESDIFF_VIEW", {hash:{},data:data}))
    + "</label></dt>\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isResDiff), {hash:{},inverse:self.program(9, program9, data),fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </dl>\n\n    ";
  return buffer;
  }
function program7(depth0,data) {
  
  var buffer = "";
  buffer += "\n      <dd>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_ENABLED", {hash:{},data:data}))
    + "</dd>\n      ";
  return buffer;
  }

function program9(depth0,data) {
  
  var buffer = "";
  buffer += "\n      <dd>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_DISABLED", {hash:{},data:data}))
    + "</dd>\n      ";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group resdiff-switch\">\n      <div class=\"checkbox\">\n        <input id=\"property-app-resdiff\" type=\"checkbox\" name=\"resdiff\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isResDiff), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " >\n        <label for=\"property-app-resdiff\"></label>\n      </div>\n      <label for=\"property-app-resdiff\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.APP_LBL_RESDIFF", {hash:{},data:data}))
    + "</label><i class=\"icon-info tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.APP_TIP_RESDIFF", {hash:{},data:data}))
    + "\"></i>\n    </section>\n    ";
  return buffer;
  }
function program12(depth0,data) {
  
  
  return "checked";
  }

function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<section class=\"property-control-group\" data-bind=\"true\">\n		<label class=\"left\" for=\"property-stack-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_LBL_NAME", {hash:{},data:data}))
    + "</label>\n		<input class=\"input\" type=\"text\" data-ignore=\"true\" data-required-rollback=\"true\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-stack-name\">\n	</section>\n    <section class=\"property-control-group\" data-bind=\"true\">\n        <label for=\"property-stack-description\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_LBL_DESCRIPTION", {hash:{},data:data}))
    + "</label>\n        <textarea name=\"\" id=\"property-stack-description\" cols=\"30\" rows=\"7\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n	<dl class=\"dl-horizontal dl-region-type property-control-group\">\n		<dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_LBL_REGION", {hash:{},data:data}))
    + "</label></dt><dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.region)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n		<dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_LBL_TYPE", {hash:{},data:data}))
    + "</label></dt><dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.type)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt><label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_LBL_ID", {hash:{},data:data}))
    + "</label></dt><dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n	</dl>\n  ";
  return buffer;
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"option-group-head pos-r\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_TIT_ACL", {hash:{},data:data}))
    + "<span class=\"acl-info-list-num property-head-num-wrap\">("
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.networkAcls)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span>\n	</div>\n	<div class=\"option-group\">\n    <ul class=\"acl-sg-info-list acl-info-list property-list\" id=\"stack-property-acl-list\"></ul>\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isApp), {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n	";
  return buffer;
  }
function program17(depth0,data) {
  
  var buffer = "";
  buffer += "<a href=\"#\" class=\"add-to-list action-link\" id=\"stack-property-new-acl\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_BTN_CREATE_NEW_ACL", {hash:{},data:data}))
    + "</a>";
  return buffer;
  }

function program19(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "$"
    + escapeExpression(((stack1 = (depth0 && depth0.totalFee)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "/";
  stack1 = helpers.i18n.call(depth0, "PROP.STACK_LBL_COST_CYCLE", {hash:{},data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  return buffer;
  }

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <tr> <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.resource)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td> <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.type)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td> <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.formatedFee)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td> </tr>\n      ";
  return buffer;
  }

  buffer += "<article>\n\n  ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isStack), {hash:{},inverse:self.program(14, program14, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n	<!-- SG, ACL, COST -->\n	<div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_TIT_SG", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n  <div class=\"option-group sg-group\"></div>\n\n\n	";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.networkAcls), {hash:{},inverse:self.noop,fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n\n	<div class=\"option-group-head\">\n		"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_TIT_COST_ESTIMATION", {hash:{},data:data}))
    + "\n		<span class=\"cost-counter right\">";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.totalFee), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</span>\n	</div>\n	<div class=\"option-group\">\n		<table class=\"table cost-estimation-table\">\n			<thead> <tr>\n					<th>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_COST_COL_RESOURCE", {hash:{},data:data}))
    + "</th>\n          <th style=\"min-width:70px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_COST_COL_SIZE_TYPE", {hash:{},data:data}))
    + "</th>\n          <th style=\"min-width:60px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_COST_COL_FEE", {hash:{},data:data}))
    + "</th>\n			</tr> </thead>\n			<tbody> ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.costList), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " </tbody>\n\n		</table>\n		<div class=\"property-control-group tac\">\n			<a target=\"_blank\" href=\"http://aws.amazon.com/ec2/pricing/\" class=\"goto-outsite tac\" target=\"_blank\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_LBL_AWS_EC2_PRICING", {hash:{},data:data}))
    + "</a>\n		</div>\n	</div>\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/stack/template/acl',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<li data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.uid)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n<div class=\"col3 edit icon-btn-details tooltip\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_ACL_TIP_DETAIL", {hash:{},data:data}))
    + "' ></div>\n<div class=\"col2\">\n	<div class=\"col2-1 truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n	<div class=\"col2-2 truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.rule)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_ACL_LBL_RULE", {hash:{},data:data}))
    + ", "
    + escapeExpression(((stack1 = (depth0 && depth0.association)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_ACL_LBL_ASSOC", {hash:{},data:data}))
    + " ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.deletable), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " </div>\n</div>\n</li>";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " | <a class=\"sg-list-delete-btn\" data-name=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-count=\""
    + escapeExpression(((stack1 = (depth0 && depth0.association)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_ACL_BTN_DELETE", {hash:{},data:data}))
    + "</a>";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, (depth0 && depth0.networkAcls), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/stack/template/sub',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div style=\"width:420px\">\n   <div class=\"modal-header\">\n      <h3>"
    + escapeExpression(((stack1 = (depth0 && depth0.title)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_SNS_SUBSCRIPTION", {hash:{},data:data}))
    + "</h3>\n      <i class=\"modal-close\">&times;</i>\n   </div>\n   <div class=\"modal-body\" id=\"property-asg-sns-modal\" data-uid="
    + escapeExpression(((stack1 = (depth0 && depth0.uid)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ">\n      <div class=\"modal-control-group modal-sns-protocol\">\n        <label class=\"label-short\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_SNS_PROTOCOL", {hash:{},data:data}))
    + "</label>\n        <div class=\"selectbox\">\n          <div class=\"selection\">"
    + escapeExpression(((stack1 = (depth0 && depth0.protocol)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n          <ul class=\"dropdown\" tabindex=\"-1\">\n            <li class=\"item\" data-id=\"https\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_SNS_PROTOCOL_HTTPS", {hash:{},data:data}))
    + "</li>\n            <li class=\"item\" data-id=\"http\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_SNS_PROTOCOL_HTTP", {hash:{},data:data}))
    + "</li>\n            <li class=\"item\" data-id=\"email\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_SNS_PROTOCOL_EMAIL", {hash:{},data:data}))
    + "</li>\n            <li class=\"item\" data-id=\"email-json\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_SNS_PROTOCOL_EMAIL_JSON", {hash:{},data:data}))
    + "</li>\n            <li class=\"item\" data-id=\"sms\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_SNS_PROTOCOL_SMS", {hash:{},data:data}))
    + "</li>\n            <li class=\"item\" data-id=\"arn\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_SNS_PROTOCOL_APPLICATION", {hash:{},data:data}))
    + "</li>\n            <li class=\"item\" data-id=\"sqs\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_SNS_PROTOCOL_AMAZON_SQS", {hash:{},data:data}))
    + "</li>\n          </ul>\n        </div>\n      </div>\n      <div class=\"modal-control-group\">\n        <label class=\"label-short\" for=\"property-asg-endpoint\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENDPOINT", {hash:{},data:data}))
    + "</label>\n        <div class=\"property-asg-ep\" data-bind=\"true\">\n          <input type=\"text\" class=\"input\" id=\"property-asg-endpoint\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.endpoint)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" max-length=\"255\" data-required=\"true\" data-trigger=\"change\">\n        </div>\n      </div>\n\n    </section>\n\n   </div>\n   <div class=\"modal-footer\">\n      <button id=\"property-asg-sns-done\" class=\"btn btn-blue\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_DONE", {hash:{},data:data}))
    + "</button>\n      <button class=\"btn modal-close btn-silver\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_CANCEL", {hash:{},data:data}))
    + "</button>\n   </div>\n</div>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/stack/view',['../base/view', './template/stack', './template/acl', './template/sub', 'event', 'i18n!/nls/lang.js'], function(PropertyView, template, acl_template, sub_template, ide_event, lang) {
    var StackView;
    StackView = PropertyView.extend({
      events: {
        'change #property-stack-name': 'stackNameChanged',
        'change #property-stack-description': 'stackDescriptionChanged',
        'change #property-app-name': 'changeAppName',
        'click #stack-property-new-acl': 'createAcl',
        'click #stack-property-acl-list .edit': 'openAcl',
        'click .acl-info-list .sg-list-delete-btn': 'deleteAcl',
        'click #property-app-resdiff': 'toggleResDiff'
      },
      render: function() {
        var title;
        if (this.model.isApp || this.model.isAppEdit) {
          title = "App - " + (this.model.get('name'));
        } else {
          title = "Stack - " + (this.model.get('name'));
        }
        this.$el.html(template(this.model.attributes));
        if (title) {
          this.setTitle(title);
        }
        this.refreshACLList();
        if (this.model.isAppEdit) {
          this.$('#property-app-name').parsley('custom', this.checkAppName);
        }
        return null;
      },
      checkAppName: function(val) {
        var repeatApp;
        repeatApp = App.model.appList().findWhere({
          name: val
        });
        if (repeatApp && repeatApp.id !== Design.instance().get('id')) {
          return lang.PROP.MSG_WARN_REPEATED_APP_NAME;
        }
        return null;
      },
      changeAppName: function(e) {
        var $target;
        $target = $(e.currentTarget);
        if ($target.parsley('validate')) {
          return Design.instance().set('name', $target.val());
        }
      },
      toggleResDiff: function(e) {
        return Design.instance().set('resource_diff', e.currentTarget.checked);
      },
      stackDescriptionChanged: function() {
        var description, stackDescTextarea, stackId;
        stackDescTextarea = $("#property-stack-description");
        stackId = this.model.get('id');
        description = stackDescTextarea.val();
        if (stackDescTextarea.parsley('validate')) {
          return this.model.updateDescription(description);
        }
      },
      stackNameChanged: function() {
        var name, stackId, stackNameInput;
        stackNameInput = $('#property-stack-name');
        stackId = this.model.get('id');
        name = stackNameInput.val();
        if (name === this.model.get("name")) {
          return;
        }
        stackNameInput.parsley('custom', function(val) {
          if (!MC.validate('awsName', val)) {
            return lang.PARSLEY.SHOULD_BE_A_VALID_STACK_NAME;
          }
          if (val === Design.instance().__opsModel.get("name")) {
            return;
          }
          if (!App.model.stackList().isNameAvailable(val)) {
            return sprintf(lang.PARSLEY.TYPE_NAME_CONFLICT, 'Stack', name);
          }
        });
        if (stackNameInput.parsley('validate')) {
          this.setTitle("Stack - " + name);
          this.model.updateStackName(name);
        }
        return null;
      },
      refreshACLList: function() {
        $(this.el).find('.acl-info-list-num').text("(" + (this.model.get('networkAcls').length) + ")");
        return $('#stack-property-acl-list').html(acl_template(this.model.attributes));
      },
      createAcl: function() {
        return this.trigger("OPEN_ACL", this.model.createAcl());
      },
      openAcl: function(event) {
        this.trigger("OPEN_ACL", $(event.currentTarget).closest("li").attr("data-uid"));
        return null;
      },
      deleteAcl: function(event) {
        var $target, aclName, aclUID, assoCont, dialog_template, that;
        $target = $(event.currentTarget);
        assoCont = parseInt($target.attr('data-count'), 10);
        aclUID = $target.closest("li").attr('data-uid');
        if (assoCont) {
          that = this;
          aclName = $target.attr('data-name');
          dialog_template = MC.template.modalDeleteSGOrACL({
            title: lang.PROP.STACK_DELETE_NETWORK_ACL_TITLE,
            main_content: sprintf(lang.PROP.STACK_DELETE_NETWORK_ACL_CONTENT, aclName),
            desc_content: sprintf(lang.PROP.STACK_DELETE_NETWORK_ACL_DESC, aclName)
          });
          return modal(dialog_template, false, function() {
            return $('#modal-confirm-delete').click(function() {
              that.model.removeAcl(aclUID);
              that.model.getNetworkACL();
              that.refreshACLList();
              return modal.close();
            });
          });
        } else {
          this.model.removeAcl(aclUID);
          this.model.getNetworkACL();
          return this.refreshACLList();
        }
      }
    });
    return new StackView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/sglist/model',["Design", "constant"], function(Design, constant) {
    var SGListModel;
    SGListModel = Backbone.Model.extend({
      getSGInfoList: function() {
        var SgAssoModel, SgRuleSetModel, asso, assos, deletable, design, enabledSG, enabledSGArr, isELBParent, isStackParent, needShow, parent_model, readonly, resource, resource_id, ruleSets, ruleset, sg, sgChecked, sgRuleAry, sg_list, usedSG, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref;
        design = Design.instance();
        parent_model = this.parent_model;
        readonly = false;
        if (design.modeIsApp() || design.modeIsAppView()) {
          readonly = true;
        } else if (design.modeIsAppEdit()) {
          if (parent_model.isSGListReadOnly) {
            readonly = parent_model.isSGListReadOnly();
          }
        }
        resource_id = this.resId;
        resource = design.component(resource_id);
        if (resource) {
          isELBParent = resource.type === constant.RESTYPE.ELB;
          isStackParent = false;
          resource_id = resource.id;
        } else {
          isELBParent = false;
          isStackParent = true;
          resource_id = "";
        }
        sg_list = [];
        enabledSG = {};
        enabledSGArr = [];
        SgAssoModel = Design.modelClassForType("SgAsso");
        _ref = Design.modelClassForType(constant.RESTYPE.SG).allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sg = _ref[_i];
          if (sg.isElbSg() && !(isELBParent || isStackParent)) {
            continue;
          }
          sgChecked = !!SgAssoModel.findExisting(sg, resource);
          needShow = isStackParent || (!readonly) || sgChecked;
          if (!needShow) {
            continue;
          }
          if (sg.isDefault() || readonly) {
            deletable = false;
          } else {
            deletable = true;
          }
          assos = sg.connections("SgAsso");
          for (_j = 0, _len1 = assos.length; _j < _len1; _j++) {
            asso = assos[_j];
            if (asso.connectsTo(resource_id)) {
              enabledSG[sg.id] = true;
              enabledSGArr.push(sg);
              break;
            }
          }
          sg_list.push({
            uid: sg.id,
            color: sg.color,
            name: sg.get("name"),
            desc: sg.get("description"),
            ruleCount: sg.ruleCount(),
            memberCount: sg.getMemberList().length,
            hideCheck: readonly || isStackParent,
            deletable: deletable,
            used: enabledSG[sg.id]
          });
        }
        sgRuleAry = [];
        for (_k = 0, _len2 = enabledSGArr.length; _k < _len2; _k++) {
          usedSG = enabledSGArr[_k];
          ruleSets = usedSG.connections("SgRuleSet");
          for (_l = 0, _len3 = ruleSets.length; _l < _len3; _l++) {
            ruleset = ruleSets[_l];
            sgRuleAry = sgRuleAry.concat(ruleset.toPlainObjects(usedSG.id));
          }
        }
        SgRuleSetModel = Design.modelClassForType("SgRuleSet");
        this.set({
          is_stack_sg: isStackParent,
          only_one_sg: enabledSGArr.length === 1,
          sg_list: sg_list,
          sg_length: isStackParent ? sg_list.length : enabledSGArr.length,
          readonly: readonly,
          sg_rule_list: SgRuleSetModel.getPlainObjFromRuleSets(sgRuleAry)
        });
        this.sortSGList();
        this.sortSGRule();
        return null;
      },
      sortSGList: function() {
        this.attributes.sg_list = this.attributes.sg_list.sort(function(a_sg, b_sg) {
          if (a_sg.name === "DefaultSG") {
            return -1;
          }
          if (b_sg.name === "DefaultSG") {
            return 1;
          }
          if (a_sg.name < b_sg.name) {
            return -1;
          }
          if (a_sg.name === b_sg.name) {
            return 0;
          }
          if (a_sg.name > b_sg.name) {
            return 1;
          }
        });
        return this.attributes.sg_list;
      },
      sortSGRule: function(key) {
        var sgRuleList;
        sgRuleList = _.sortBy(this.attributes.sg_rule_list, key || "direction");
        this.set("sg_rule_list", sgRuleList);
        return null;
      },
      assignSG: function(sgUID, sgChecked) {
        var SgAsso, asso, design;
        SgAsso = Design.modelClassForType("SgAsso");
        design = Design.instance();
        console.assert(this.resId, "Resource not found when assigning SG");
        asso = new SgAsso(design.component(this.resId), design.component(sgUID));
        if (sgChecked === false) {
          asso.remove();
        }
        return null;
      },
      deleteSG: function(sgUID) {
        Design.instance().component(sgUID).remove();
        return null;
      },
      isElbSg: function(sgUID) {
        return Design.instance().component(sgUID).isElbSg();
      },
      getElbNameBySgId: function(sgUID) {
        var elb, sg, _i, _len, _ref;
        sg = Design.instance().component(sgUID);
        if (sg.isElbSg()) {
          _ref = Design.modelClassForType(constant.RESTYPE.ELB).allObjects();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            elb = _ref[_i];
            if (elb.getElbSg() === sg) {
              return elb.get("name");
            }
          }
        }
        return "";
      },
      createNewSG: function() {
        var SgAsso, SgModel, component, model;
        SgModel = Design.modelClassForType(constant.RESTYPE.SG);
        model = new SgModel();
        component = Design.instance().component(this.resId);
        if (component) {
          SgAsso = Design.modelClassForType("SgAsso");
          new SgAsso(model, component);
        }
        return model.id;
      }
    });
    return new SGListModel();
  });

}).call(this);

define('workspaces/awseditor/property/sglist/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n<ul class=\"tab sg-info-list-tab\">\n	<li data-tab-target=\"#item-group\" class=\"active\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SGLIST_TAB_GROUP", {hash:{},data:data}))
    + "</li>\n	<li data-tab-target=\"#item-rule\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SGLIST_TAB_RULE", {hash:{},data:data}))
    + "</li>\n</ul>\n";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<li class=\"clearfix\" data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.uid)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n				";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.hideCheck), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				<div class=\"col3 sg-edit-icon tooltip icon-btn-details\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SGLIST_TIP_VIEW_DETAIL", {hash:{},data:data}))
    + "'></div>\n\n				<div class=\"col2\">\n					<div class=\"col2-1 truncate\"><div class=\"sg-color\" style=\"background-color:"
    + escapeExpression(((stack1 = (depth0 && depth0.color)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" ></div><span class=\"sg-name\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n					<div class=\"col2-2 truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.desc)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n					<div class=\"col2-3 truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.ruleCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SGLIST_LBL_RULE", {hash:{},data:data}))
    + ", "
    + escapeExpression(((stack1 = (depth0 && depth0.memberCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SGLIST_LBL_MEMBER", {hash:{},data:data}));
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.deletable), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n				</div>\n			</li>\n			";
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n					<div class=\"checkbox-wrap col1\">\n						<div class=\"checkbox\">\n							<input class=\"sg-list-association-check\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.used), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " id=\"sg-list-"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"/>\n							<label for=\"sg-list-"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></label>\n						</div>\n					</div>\n				";
  return buffer;
  }
function program5(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " | <a class=\"sg-list-delete-btn\" data-name=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-count=\""
    + escapeExpression(((stack1 = (depth0 && depth0.memberCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SGLIST_LNK_DELETE", {hash:{},data:data}))
    + "</a>";
  return buffer;
  }

function program9(depth0,data) {
  
  var buffer = "";
  buffer += "<a href=\"javascript:void(0)\" class=\"add-to-list action-link\" id=\"add-sg-btn\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SGLIST_BTN_CREATE_NEW_SG", {hash:{},data:data}))
    + "</a>";
  return buffer;
  }

  stack1 = helpers.unless.call(depth0, (depth0 && depth0.is_stack_sg), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n<div class=\"tab-content\">\n	<div id=\"item-group\" class=\"active tab-item pos-r\">\n		<ul class=\"acl-sg-info-list property-list\" id=\"sg-info-list\">\n			";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.sg_list), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</ul>\n		";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.readonly), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</div>\n\n	<div id=\"item-rule\" class=\"tab-item\">\n		<div class=\"rule-list-sort property-control-group\">\n			<h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY", {hash:{},data:data}))
    + "</h5>\n			<div class=\"selectbox\" id=\"sg-rule-filter-select\">\n				<div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_DIRECTION", {hash:{},data:data}))
    + "</div>\n				<ul class=\"dropdown\" tabindex=\"-1\">\n					<li class=\"item selected\" data-id=\"direction\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_DIRECTION", {hash:{},data:data}))
    + "</li>\n					<li class=\"item\" data-id=\"relation\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_SRC_DEST", {hash:{},data:data}))
    + "</li>\n					<li class=\"item\" data-id=\"protocol\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_PROTOCOL", {hash:{},data:data}))
    + "</li>\n				</ul>\n			</div>\n		</div>\n		<ul class=\"sg-rule-list property-list\" id=\"sglist-rule-list\"> </ul>\n	</div>\n</div>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/sglist/view',['./template/stack', 'i18n!/nls/lang.js'], function(template, lang) {
    var SGListView;
    SGListView = Backbone.View.extend({
      events: {
        'click #sg-info-list .sg-edit-icon': 'openSgPanel',
        'click #add-sg-btn': 'openSgPanel',
        'click .sg-list-association-check': 'assignSGToComp',
        'click .sg-list-delete-btn': 'deleteSGFromComp',
        'OPTION_CHANGE #sg-rule-filter-select': 'sortSgRule'
      },
      render: function() {
        this.model.getSGInfoList();
        this.setElement($('.sg-group'));
        this.$el.html(template(this.model.attributes));
        $("#sglist-rule-list").html(MC.template.sgRuleList(this.model.attributes.sg_rule_list));
        return $('#property-head-sg-num').text(this.model.attributes.sg_length);
      },
      openSgPanel: function(event) {
        var sgUID;
        if (event.currentTarget.id === "add-sg-btn") {
          sgUID = this.model.createNewSG();
        } else {
          sgUID = $(event.currentTarget).closest("li").attr("data-uid");
        }
        return this.trigger('OPEN_SG', sgUID);
      },
      refreshSGList: function() {
        return this.render();
      },
      assignSGToComp: function(event) {
        var $checked, $target, sgChecked, sgUID;
        $target = $(event.currentTarget);
        $checked = $target.closest("#sg-info-list").find(":checked");
        if ($checked.length === 0) {
          return false;
        }
        sgUID = $target.closest("li").attr('data-uid');
        sgChecked = $target.prop('checked');
        this.model.assignSG(sgUID, sgChecked);
        this.render();
        return null;
      },
      deleteSGFromComp: function(event) {
        var $target, descContent, mainContent, memberNum, sgName, sgUID, that, tpl;
        that = this;
        $target = $(event.currentTarget);
        sgUID = $target.closest('li').attr('data-uid');
        memberNum = Number($target.attr('data-count'));
        sgName = $target.attr('data-name');
        if (memberNum) {
          mainContent = sprintf(lang.PROP.SGLIST_DELETE_SG_CONFIRM_TITLE, sgName);
          descContent = sprintf(lang.PROP.SGLIST_DELETE_SG_CONFIRM_DESC, sgName);
        }
        if (mainContent) {
          tpl = MC.template.modalDeleteSGOrACL({
            title: lang.PROP.SGLIST_DELETE_SG_TITLE,
            main_content: mainContent,
            desc_content: descContent
          });
          return modal(tpl, false, function() {
            return $('#modal-confirm-delete').click(function() {
              that.model.deleteSG(sgUID);
              that.render();
              return modal.close();
            });
          });
        } else {
          this.model.deleteSG(sgUID);
          return this.render();
        }
      },
      sortSgRule: function(event) {
        var sg_rule_list, sortType;
        sg_rule_list = $('#sglist-rule-list');
        sortType = $(event.target).find('.selected').attr('data-id');
        this.model.sortSGRule(sortType);
        return $("#sglist-rule-list").html(MC.template.sgRuleList(this.model.attributes.sg_rule_list));
      }
    });
    return new SGListView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/sglist/main',['../base/main', './model', './view'], function(PropertyModel, model, view) {
    var loadModule, onUnloadSubPanel, refresh;
    view.on('OPEN_SG', function(sgUID) {
      PropertyModel.loadSubPanel("SG", sgUID);
      return null;
    });
    view.model = model;
    refresh = function() {
      view.render();
      return null;
    };
    loadModule = function(parent_model) {
      model.parent_model = parent_model;
      model.resId = parent_model.get('uid') || parent_model.id;
      view.render();
      return null;
    };
    onUnloadSubPanel = function(id) {
      if (id === "SG") {
        return view.render();
      }
    };
    return {
      loadModule: loadModule,
      refresh: refresh,
      onUnloadSubPanel: onUnloadSubPanel
    };
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/stack/main',['../base/main', './model', './view', '../sglist/main', 'event', "Design"], function(PropertyModule, model, view, sglist_main, ide_event, Design) {
    var StackModule;
    view.on('OPEN_ACL', function(uid) {
      PropertyModule.loadSubPanel("ACL", uid);
      return null;
    });
    StackModule = PropertyModule.extend({
      handleTypes: ["Stack", "default"],
      onUnloadSubPanel: function(id) {
        sglist_main.onUnloadSubPanel(id);
        if (id === "ACL") {
          this.model.getNetworkACL();
          return this.view.refreshACLList();
        }
      },

      /*  * # # # # # # # # # # #
       * For stack mode
       */
      initStack: function(uid) {
        this.model = model;
        this.model.isApp = false;
        this.model.isAppEdit = false;
        this.model.isStack = true;
        this.view = view;
        return null;
      },
      afterLoadStack: function() {
        sglist_main.loadModule(this.model);
        return null;
      },

      /*  * # # # # # # # # # # #
       * For app mode
       */
      initApp: function(uid) {
        this.model = model;
        this.model.isApp = true;
        this.model.isAppEdit = false;
        this.model.isStack = false;
        this.view = view;
        return null;
      },
      afterLoadApp: function() {
        sglist_main.loadModule(this.model);
        return null;
      },

      /*  * # # # # # # # # #
       */
      initAppEdit: function() {
        this.model = model;
        this.model.isApp = false;
        this.model.isAppEdit = true;
        this.model.isStack = false;
        this.view = view;
        return null;
      },
      afterLoadAppEdit: function() {
        sglist_main.loadModule(this.model);
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/instance/model',['../base/model', 'constant', 'event', 'i18n!/nls/lang.js'], function(PropertyModel, constant, ide_event, lang) {
    var InstanceModel;
    InstanceModel = PropertyModel.extend({
      init: function(uid) {
        var agentData, attr, component, design, eni, vpc;
        component = Design.instance().component(uid);
        attr = component != null ? component.toJSON() : void 0;
        attr.uid = uid;
        attr.classic_stack = false;
        attr.can_set_ebs = component.isEbsOptimizedEnabled();
        attr.instance_type = component.getInstanceTypeList();
        attr.tenancy = component.isDefaultTenancy();
        attr.displayCount = attr.count - 1;
        attr.description = component.get("description");
        eni = component.getEmbedEni();
        attr.number_disable = eni && eni.connections('RTB_Route').length > 0;
        vpc = Design.modelClassForType(constant.RESTYPE.VPC).allObjects()[0];
        attr.force_tenacy = vpc && !vpc.isDefaultTenancy();
        design = Design.instance();
        agentData = design.get('agent');
        attr.stackAgentEnable = agentData.enabled;
        this.set(attr);
        this.getAmi();
        this.getKeyPair();
        this.getEni();
        return null;
      },
      getKeyPair: function() {
        var selectedKP;
        selectedKP = Design.instance().component(this.get("uid")).connectionTargets("KeypairUsage")[0];
        if (selectedKP) {
          this.set("keypair", selectedKP.getKPList());
        }
        return null;
      },
      addKP: function(kp_name) {
        var KpModel, kp, _i, _len, _ref;
        KpModel = Design.modelClassForType(constant.RESTYPE.KP);
        _ref = KpModel.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          kp = _ref[_i];
          if (kp.get("name") === kp_name) {
            return false;
          }
        }
        kp = new KpModel({
          name: kp_name
        });
        return kp.id;
      },
      deleteKP: function(kp_uid) {
        Design.instance().component(kp_uid).remove();
        return null;
      },
      setKP: function(kp_uid) {
        var design, instance;
        design = Design.instance();
        instance = design.component(this.get("uid"));
        design.component(kp_uid).assignTo(instance);
        return null;
      },
      setCount: function(val) {
        return Design.instance().component(this.get("uid")).setCount(val);
      },
      setEbsOptimized: function(value) {
        return Design.instance().component(this.get("uid")).set("ebsOptimized", value);
      },
      setTenancy: function(value) {
        return Design.instance().component(this.get("uid")).setTenancy(value);
      },
      setMonitoring: function(value) {
        return Design.instance().component(this.get("uid")).set("monitoring", value);
      },
      setUserData: function(value) {
        return Design.instance().component(this.get("uid")).set("userData", value);
      },
      setEniDescription: function(value) {
        return Design.instance().component(this.get("uid")).getEmbedEni().set("description", value);
      },
      setSourceCheck: function(value) {
        return Design.instance().component(this.get("uid")).getEmbedEni().set("sourceDestCheck", value);
      },
      setPublicIp: function(value) {
        Design.instance().component(this.get("uid")).getEmbedEni().set("assoPublicIp", value);
        if (value) {
          return Design.modelClassForType(constant.RESTYPE.IGW).tryCreateIgw();
        }
      },
      getAmi: function() {
        var ami, ami_id, comp, data, deviceType, rdEbs, rdName, rootDevice;
        ami_id = this.get("imageId");
        comp = Design.instance().component(this.get("uid"));
        ami = comp.getAmi();
        if (!ami) {
          data = {
            name: ami_id + " is not available.",
            icon: "ami-not-available.png",
            unavailable: true
          };
        } else {
          data = {
            name: ami.name || ami.description || ami.id,
            icon: ami.osType + "." + ami.architecture + "." + ami.rootDeviceType + ".png"
          };
        }
        this.set('instance_ami', data);
        if (ami && ami.blockDeviceMapping && !$.isEmptyObject(ami.blockDeviceMapping)) {
          rdName = ami.rootDeviceName;
          rdEbs = ami.blockDeviceMapping[rdName];
          if (rdName && !rdEbs) {
            _.each(ami.blockDeviceMapping, function(value, key) {
              if (rdName.indexOf(key) !== -1 && !rdEbs) {
                rdEbs = value;
                rdName = key;
              }
              return null;
            });
          }
          deviceType = comp.get("rdType");
          rootDevice = {
            name: rdName,
            size: parseInt(comp.get("rdSize"), 10),
            iops: comp.get("rdIops"),
            encrypted: rdEbs.encrypted,
            isStandard: deviceType === 'standard',
            isIo1: deviceType === 'io1',
            isGp2: deviceType === 'gp2'
          };
          if (rootDevice.size < 10) {
            rootDevice.iops = "";
            rootDevice.iopsDisabled = true;
          }
          this.set("rootDevice", rootDevice);
        }
        this.set("min_volume_size", comp.getAmiRootDeviceVolumeSize());
        return null;
      },
      canSetInstanceType: function(value) {
        var config, eni_number, instance, max_eni_num;
        instance = Design.instance().component(this.get("uid"));
        eni_number = instance.connectionTargets("EniAttachment").length + 1;
        config = instance.getInstanceTypeConfig(value);
        max_eni_num = config ? config.max_eni : 2;
        if (eni_number <= 2 || eni_number <= max_eni_num) {
          return true;
        }
        return sprintf(lang.PROP.WARN_EXCEED_ENI_LIMIT, value, max_eni_num);
      },
      setInstanceType: function(value) {
        var instance;
        instance = Design.instance().component(this.get("uid"));
        instance.setInstanceType(value);
        this.getEni();
        return instance.isEbsOptimizedEnabled();
      },
      getEni: function() {
        var eni, eni_obj, instance;
        instance = Design.instance().component(this.get("uid"));
        eni = instance.getEmbedEni();
        if (!eni) {
          return;
        }
        eni_obj = eni.toJSON();
        eni_obj.ips = eni.getIpArray();
        eni_obj.ips[0].unDeletable = true;
        this.set("eni", eni_obj);
        this.set("multi_enis", instance.connections("EniAttachment").length > 0);
        return null;
      },
      attachEip: function(eip_index, attach) {
        Design.instance().component(this.get("uid")).getEmbedEni().setIp(eip_index, null, null, attach);
        this.attributes.eni.ips[eip_index].hasEip = attach;
        if (attach) {
          Design.modelClassForType(constant.RESTYPE.IGW).tryCreateIgw();
        }
        return null;
      },
      removeIp: function(index) {
        Design.instance().component(this.get("uid")).getEmbedEni().removeIp(index);
        return null;
      },
      addIp: function() {
        var comp, ips;
        comp = Design.instance().component(this.get("uid")).getEmbedEni();
        comp.addIp();
        ips = comp.getIpArray();
        ips[0].unDeletable = true;
        this.get("eni").ips = ips;
        return null;
      },
      isValidIp: function(ip) {
        return Design.instance().component(this.get("uid")).getEmbedEni().isValidIp(ip);
      },
      canAddIP: function() {
        return Design.instance().component(this.get("uid")).getEmbedEni().canAddIp();
      },
      setIp: function(idx, ip, autoAssign) {
        Design.instance().component(this.get("uid")).getEmbedEni().setIp(idx, ip, autoAssign);
        return null;
      },
      getStateData: function() {
        return Design.instance().component(this.get("uid")).getStateData();
      },
      setIops: function(iops) {
        Design.instance().component(this.get("uid")).set("rdIops", iops);
        return null;
      },
      setVolumeType: function(type) {
        Design.instance().component(this.get("uid")).set("rdType", type);
        return null;
      },
      setVolumeSize: function(size) {
        Design.instance().component(this.get("uid")).set("rdSize", size);
        return null;
      }
    });
    return new InstanceModel();
  });

}).call(this);

define('workspaces/awseditor/property/instance/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {
  
  
  return "single";
  }

function program3(depth0,data) {
  
  var buffer = "";
  buffer += "disabled=\"disabled\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TIP_YOU_CANNOT_SPECIFY_INSTANCE_NUMBER", {hash:{},data:data}))
    + "\"";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "";
  buffer += "data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TIP_IF_THE_QUANTITY_IS_MORE_THAN_1", {hash:{},data:data}))
    + "\"";
  return buffer;
  }

function program7(depth0,data) {
  
  
  return "style=\"color:red;\"";
  }

function program9(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<section class=\"property-control-group\">\n			<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TYPE", {hash:{},data:data}))
    + "</label>\n			<div class=\"selectbox selectbox-mega\" id=\"instance-type-select\">\n				<div class=\"selection\"></div>\n				<ul class=\"dropdown\"> ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.instance_type), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " </ul>\n			</div>\n		</section>\n		";
  return buffer;
  }
function program10(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n					<li class=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "tooltip item\" tabindex=\"-1\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.main)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hide), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n						<div class=\"main truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.main)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n						<div class=\"sub\"><span>"
    + escapeExpression(((stack1 = (depth0 && depth0.ecu)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span><span>"
    + escapeExpression(((stack1 = (depth0 && depth0.core)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span><span>"
    + escapeExpression(((stack1 = (depth0 && depth0.mem)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n					</li>\n				";
  return buffer;
  }
function program11(depth0,data) {
  
  
  return "selected ";
  }

function program13(depth0,data) {
  
  
  return "style=\"display:none;\"";
  }

function program15(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

function program17(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<section class=\"property-control-group\">\n			<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TENANCY", {hash:{},data:data}))
    + "</label>\n			<div class=\"selectbox\" id=\"tenancy-select\">\n				<div class=\"selection\">";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tenancy), {hash:{},inverse:self.program(20, program20, data),fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n				<ul class=\"dropdown\" tabindex=\"-1\">\n					";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.force_tenacy), {hash:{},inverse:self.noop,fn:self.program(22, program22, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n					<li class=\"item ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.tenancy), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"dedicated\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TENANCY_DELICATED", {hash:{},data:data}))
    + "</li>\n				</ul>\n			</div>\n		</section>\n		";
  return buffer;
  }
function program18(depth0,data) {
  
  
  return "Default";
  }

function program20(depth0,data) {
  
  
  return "Dedicated";
  }

function program22(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n					<li class=\"item ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tenancy), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"default\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TENANCY_DEFAULT", {hash:{},data:data}))
    + "</li>\n					";
  return buffer;
  }
function program23(depth0,data) {
  
  
  return "selected";
  }

function program25(depth0,data) {
  
  
  return "\n				<input id=\"property-instance-enable-cloudwatch\" type=\"checkbox\" checked=\"true\" value=\"None\" name=\"property-instance-enable-cloudwatch\" />\n				";
  }

function program27(depth0,data) {
  
  
  return "\n				<input id=\"property-instance-enable-cloudwatch\" type=\"checkbox\" value=\"None\" name=\"property-instance-enable-cloudwatch\" />\n				";
  }

function program29(depth0,data) {
  
  
  return "hide";
  }

function program31(depth0,data) {
  
  var buffer = "";
  buffer += "\n			<div class=\"property-info\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_USERDATA_DISABLED_TO_INSTALL_VISUALOPS", {hash:{},data:data}))
    + " <a href=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.AGENT_USER_DATA_URL", {hash:{},data:data}))
    + "\" target=\"_blank\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_VIEW_AGENT_USER_DATA_URL_TEXT", {hash:{},data:data}))
    + "</a>.</div>\n			";
  return buffer;
  }

function program33(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<label for=\"property-instance-user-data\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_USER_DATA", {hash:{},data:data}))
    + "</label>\n			<textarea id=\"property-instance-user-data\">"
    + escapeExpression(((stack1 = (depth0 && depth0.userData)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n			";
  return buffer;
  }

function program35(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ROOT_DEVICE", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\">\n    <section class=\"property-control-group\">\n      <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_DEVICE_NAME", {hash:{},data:data}))
    + "</label>\n      <div>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n    </section>\n    <section class=\"property-control-group\">\n      <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SIZE", {hash:{},data:data}))
    + "</label>\n      <div class=\"ranged-number-input\">\n          <label for=\"volume-size-ranged\"></label>\n          <input id=\"volume-size-ranged\" type=\"text\" class=\"input\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.size)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"volume-size-ranged\" data-ignore=\"true\" maxlength=\"4\" data-required=\"true\" data-required=\"true\" data-type=\"number\"/>\n      <label for=\"volume-property-ranged-number\" >GB</label>\n      </div>\n    </section>\n\n    <section class=\"property-control-group\">\n      <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE", {hash:{},data:data}))
    + "</label>\n      <div id=\"volume-type-radios\">\n\n      <div>\n      	<div class=\"radio\">\n          <input id=\"radio-standard\" type=\"radio\" name=\"volume-type\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.isStandard), {hash:{},inverse:self.noop,fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"standard\"/>\n          <label for=\"radio-standard\"></label>\n        </div>\n        <label for=\"radio-standard\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE_STANDARD", {hash:{},data:data}))
    + "</label>\n      </div>\n\n      <div>\n        <div class=\"radio\">\n          <input id=\"radio-gp2\" type=\"radio\" name=\"volume-type\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.isGp2), {hash:{},inverse:self.noop,fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"gp2\"/>\n          <label for=\"radio-gp2\"></label>\n        </div>\n        <label for=\"radio-gp2\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE_GP2", {hash:{},data:data}))
    + "</label>\n      </div>\n\n      <div ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.iopsDisabled), {hash:{},inverse:self.noop,fn:self.program(36, program36, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_MSG_WARN", {hash:{},data:data}))
    + "\">\n        <div class=\"radio\">\n          <input id=\"radio-io1\" type=\"radio\" name=\"volume-type\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.isIo1), {hash:{},inverse:self.noop,fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.iopsDisabled), {hash:{},inverse:self.noop,fn:self.program(38, program38, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"io1\"/>\n          <label for=\"radio-io1\"></label>\n        </div>\n        <label for=\"radio-io1\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE_IO1", {hash:{},data:data}))
    + "</label>\n      </div>\n\n      </div>\n    </section>\n\n    <section class=\"property-control-group\" id=\"iops-group\" ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.isIo1), {hash:{},inverse:self.noop,fn:self.program(40, program40, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_IOPS", {hash:{},data:data}))
    + "</label>\n        <div class=\"ranged-number-input\">\n          <label for=\"iops-ranged\"></label>\n          <input id=\"iops-ranged\" type=\"text\" class=\"input\" min=\"100\" max=\"2000\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n        </div>\n    </section>\n\n    <section class=\"property-control-group\">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ENCRYPTED", {hash:{},data:data}))
    + "</label>\n        <div>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.encrypted), {hash:{},inverse:self.program(44, program44, data),fn:self.program(42, program42, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n    </section>\n\n	</div>\n  ";
  return buffer;
  }
function program36(depth0,data) {
  
  
  return "class=\"tooltip\"";
  }

function program38(depth0,data) {
  
  
  return "disabled";
  }

function program40(depth0,data) {
  
  
  return "style=\"display:none\"";
  }

function program42(depth0,data) {
  
  
  return "Encrypted";
  }

function program44(depth0,data) {
  
  
  return "Not Encrypted";
  }

function program46(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_DETAIL", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\" data-bind=\"true\">\n		<section class=\"property-control-group\">\n			<label class=\"left\" for=\"property-instance-ni-description\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_DESC", {hash:{},data:data}))
    + "</label>\n			<textarea id=\"property-instance-ni-description\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n		</section>\n		<section class=\"property-control-group\">\n			<div class=\"checkbox\">\n				";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.sourceDestCheck), {hash:{},inverse:self.program(49, program49, data),fn:self.program(47, program47, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				<label for=\"property-instance-source-check\"></label>\n			</div>\n			<label for=\"property-instance-source-check\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_SOURCE_DEST_CHECK", {hash:{},data:data}))
    + "</label>\n		</section>\n		<section ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.multi_enis), {hash:{},inverse:self.program(53, program53, data),fn:self.program(51, program51, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n			<div class=\"checkbox\">\n				<input id=\"property-instance-public-ip\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.multi_enis), {hash:{},inverse:self.noop,fn:self.program(55, program55, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.assoPublicIp), {hash:{},inverse:self.noop,fn:self.program(57, program57, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"None\" name=\"property-instance-public-ip\" />\n				<label for=\"property-instance-public-ip\"></label>\n			</div>\n			<label for=\"property-instance-public-ip\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_AUTO_PUBLIC_IP", {hash:{},data:data}))
    + "</label>\n		</section>\n		<section class=\"property-control-group\">\n			<div class=\"network-list-wrap\">\n				<div class=\"network-list-header clearfix\">\n					"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_IP_ADDRESS", {hash:{},data:data}))
    + "\n					<button id=\"instance-ip-add\" class=\"right btn btn-blue btn-small tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_TIP_ADD_IP_ADDRESS", {hash:{},data:data}))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_ADD_IP", {hash:{},data:data}))
    + "</button>\n				</div>\n				<ul class=\"network-list\" id=\"property-network-list\" data-bind=\"true\"></ul>\n			</div>\n		</section>\n	</div>\n	";
  return buffer;
  }
function program47(depth0,data) {
  
  
  return "\n				<input id=\"property-instance-source-check\" type=\"checkbox\" checked=\"true\" value=\"None\" name=\"property-instance-source-check\" />\n				";
  }

function program49(depth0,data) {
  
  
  return "\n				<input id=\"property-instance-source-check\" type=\"checkbox\" value=\"None\" name=\"property-instance-source-check\" />\n				";
  }

function program51(depth0,data) {
  
  var buffer = "";
  buffer += "class=\"property-control-group tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TIP_PUBLIC_IP_CANNOT_BE_ASSOCIATED", {hash:{},data:data}))
    + "\"";
  return buffer;
  }

function program53(depth0,data) {
  
  
  return "class=\"property-control-group\"";
  }

function program55(depth0,data) {
  
  
  return "disabled=\"disabled\"";
  }

function program57(depth0,data) {
  
  
  return "checked=\"checked\" ";
  }

  buffer += "<article>\n\n	<div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_DETAIL", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\">\n		<section class=\"property-control-group\" data-bind=\"true\">\n			<label class=\"left\" for=\"property-instance-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_HOSTNAME", {hash:{},data:data}))
    + "</label>\n			<span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n\n			<div class=\"property-instance-name-wrap ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.count), 1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n				<div class=\"name-count-wrap\">\n					-[0-<span id=\"property-instance-name-count\">"
    + escapeExpression(((stack1 = (depth0 && depth0.displayCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>]\n				</div>\n				<div class=\"fitfloat\">\n					<input class=\"input instance-name\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-instance-name\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n				</div>\n			</div>\n		</section>\n		<section class=\"property-control-group\" data-bind=\"true\">\n			<label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n			<textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n		</section>\n		<section class=\"property-control-group\" data-bind=\"true\">\n			<label class=\"left\" for=\"property-instance-count\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_NUMBER", {hash:{},data:data}))
    + "</label>\n			<span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n			<input class=\"input tooltip\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.count)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-instance-count\" data-ignore=\"true\" data-required=\"true\" data-type=\"digits\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.number_disable), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n		</section>\n		<section class=\"property-control-group\">\n			<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI", {hash:{},data:data}))
    + "</label>\n			<div id=\"property-ami\" class=\"property-block-wrap clearfix\" data-uid='"
    + escapeExpression(((stack1 = (depth0 && depth0.imageId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "'>\n				<img class=\"property-ami-icon left\" src=\"/assets/images/ide/ami/"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.instance_ami)),stack1 == null || stack1 === false ? stack1 : stack1.icon)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n				<div class=\"property-ami-label\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.instance_ami)),stack1 == null || stack1 === false ? stack1 : stack1.unavailable), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.instance_ami)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n			</div>\n		</section>\n		";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.instance_type)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		<section class=\"property-control-group\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.can_set_ebs), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n			<div class=\"checkbox\">\n				<input id=\"property-instance-ebs-optimized\" type=\"checkbox\" value=\"None\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.ebsOptimized), {hash:{},inverse:self.noop,fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"ebs-optimized\" />\n				<label for=\"property-instance-ebs-optimized\"></label>\n			</div>\n			<label for=\"property-instance-ebs-optimized\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_EBS_OPTIMIZED", {hash:{},data:data}))
    + "</label>\n		</section>\n		";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.classic_stack), {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		<section class=\"property-control-group\">\n			<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_KEY_PAIR", {hash:{},data:data}))
    + "</label>\n			<i class=\"icon-info tooltip default-kp-info\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "POP_INSTANCE_KEYPAIR_INFO_TIP", {hash:{},data:data}))
    + "\"></i>\n            <div id=\"kp-placeholder\"></div>\n		</section>\n	</div>\n\n	<div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ADVANCED_DETAIL", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\">\n		<section class=\"property-control-group\">\n			<div class=\"checkbox\">\n				";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.monitoring), {hash:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				<label for=\"property-instance-enable-cloudwatch\"></label>\n			</div>\n			<label for=\"property-instance-enable-cloudwatch\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_CW_ENABLED", {hash:{},data:data}))
    + "</label>\n\n			<p class=\"";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.monitoring), {hash:{},inverse:self.noop,fn:self.program(29, program29, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " property-info\" id=\"property-cloudwatch-warn\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_CW_WARN", {hash:{},data:data}))
    + "<a target=\"_blank\" href=\"http://aws.amazon.com/cloudwatch\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_WATCH_LINK_TEXT", {hash:{},data:data}))
    + "</a></p>\n		</section>\n		<section class=\"property-control-group\">\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.stackAgentEnable), {hash:{},inverse:self.program(33, program33, data),fn:self.program(31, program31, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</section>\n	</div>\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.rootDevice), {hash:{},inverse:self.noop,fn:self.program(35, program35, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n	";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.eni), {hash:{},inverse:self.noop,fn:self.program(46, program46, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n	<div class=\"option-group-head\" id=\"sg-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n  <div class=\"option-group sg-group\"></div>\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/instance/view',['../base/view', './template/stack', 'i18n!/nls/lang.js', 'constant', 'kp_dropdown'], function(PropertyView, template, lang, constant, kp) {
    var InstanceView, noop;
    noop = function() {
      return null;
    };
    InstanceView = PropertyView.extend({
      events: {
        'change .instance-name': 'instanceNameChange',
        'change #property-res-desc': 'onChangeDesc',
        'change #property-instance-count': 'countChange',
        'change #property-instance-ebs-optimized': 'ebsOptimizedSelect',
        'change #property-instance-enable-cloudwatch': 'cloudwatchSelect',
        'change #property-instance-user-data': 'userdataChange',
        'change #property-instance-ni-description': 'eniDescriptionChange',
        'change #property-instance-source-check': 'sourceCheckChange',
        'change #property-instance-public-ip': 'publicIpChange',
        'OPTION_CHANGE #instance-type-select': "instanceTypeSelect",
        'OPTION_CHANGE #tenancy-select': "tenancySelect",
        'click #property-ami': 'openAmiPanel',
        'OPTION_CHANGE #keypair-select': "setKP",
        'EDIT_UPDATE #keypair-select': "addKP",
        'click #keypair-select .icon-remove': "deleteKP",
        "EDIT_FINISHED #keypair-select": "updateKPSelect",
        'click .toggle-eip': 'setEip',
        'click #instance-ip-add': "addIp",
        'click #property-network-list .icon-remove': "removeIp",
        'keyup .input-ip': 'syncIPList',
        'click #volume-type-radios input': 'changeVolumeType',
        'keyup #iops-ranged': 'changeIops',
        'keyup #volume-size-ranged': 'sizeChanged'
      },
      changeVolumeType: function(event) {
        var $this, iops, type, volumeSize;
        $this = $(event.currentTarget);
        if ($this.is(":disabled")) {
          return;
        }
        type = $this.val();
        $("#iops-group").toggle(type === "io1");
        if (type === "io1") {
          volumeSize = parseInt($('#volume-size-ranged').val(), 10);
          iops = volumeSize * 10;
          $("#iops-ranged").val(iops).keyup();
        } else {
          this.model.setIops("");
          $("#iops-ranged").val("");
        }
        this.model.setVolumeType(type);
        return null;
      },
      changeIops: function() {
        if ($('#iops-ranged').parsley('validate')) {
          this.model.setIops($('#iops-ranged').val());
        }
        return null;
      },
      sizeChanged: function(event) {
        var $iops, iops, iopsDisabled, volumeSize;
        if (!$('#volume-size-ranged').parsley('validate')) {
          return;
        }
        volumeSize = parseInt($('#volume-size-ranged').val(), 10);
        this.model.setVolumeSize(volumeSize);
        if (volumeSize < 10) {
          this.model.setIops("");
          iopsDisabled = true;
        }
        $iops = $('#volume-type-radios').children("div").last().toggleClass("tooltip", iopsDisabled).find('input');
        if (iopsDisabled) {
          $iops.attr("disabled", "disabled");
          $("#radio-standard").click();
          $("#iops-group").hide();
        } else {
          $iops.removeAttr('disabled');
        }
        iops = parseInt($("#iops-ranged").val(), 10) || 0;
        if (iops) {
          if (iops > volumeSize * 10) {
            iops = volumeSize * 10;
            $("#iops-ranged").val(iops);
          }
          $("#iops-ranged").keyup();
        }
        return null;
      },
      render: function() {
        var instanceModel, kpDropdown, me;
        this.$el.html(template(this.model.attributes));
        instanceModel = Design.instance().component(this.model.get('uid'));
        kpDropdown = new kp({
          resModel: instanceModel
        });
        this.$('#kp-placeholder').html(kpDropdown.render().el);
        this.addSubView(kpDropdown);
        this.refreshIPList();
        me = this;
        $('#volume-size-ranged').parsley('custom', function(val) {
          val = +val;
          if (!val || val > 1024 || val < me.model.attributes.min_volume_size) {
            return sprintf(lang.PARSLEY.VOLUME_SIZE_OF_ROOTDEVICE_MUST_IN_RANGE, me.model.attributes.min_volume_size);
          }
        });
        $('#iops-ranged').parsley('custom', function(val) {
          var volume_size;
          val = +val;
          volume_size = parseInt($('#volume-size-ranged').val(), 10);
          if (val > 4000 || val < 100) {
            return lang.PARSLEY.IOPS_MUST_BETWEEN_100_4000;
          } else if (val > 10 * volume_size) {
            return lang.PARSLEY.IOPS_MUST_BE_LESS_THAN_10_TIMES_OF_VOLUME_SIZE;
          }
        });
        return this.model.attributes.name;
      },
      instanceNameChange: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "Instance")) {
          this.model.setName(name);
          this.setTitle(name);
        }
        return null;
      },
      onChangeDesc: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      countChange: function(event) {
        var target, that, val;
        target = $(event.currentTarget);
        that = this;
        target.parsley('custom', function(val) {
          if (isNaN(val) || val > 99 || val < 1) {
            return lang.PARSLEY.THIS_VALUE_MUST_BETWEEN_1_99;
          }
        });
        if (target.parsley('validate')) {
          this.refreshIPList();
          val = +target.val();
          this.model.setCount(val);
          $(".property-instance-name-wrap").toggleClass("single", val === 1);
          $("#property-instance-name-count").text(val - 1);
          return this.setEditableIP(val === 1);
        }
      },
      setEditableIP: function(enable) {
        var $parent;
        $parent = $("#property-network-list");
        if (enable) {
          $parent.find(".input-ip-wrap").removeClass("disabled").find(".name").data("tooltip", lang.PROP.INSTANCE_IP_MSG_1).find(".input-ip").prop("disabled", "");
        } else {
          $parent.find(".input-ip-wrap").addClass("disabled").find(".name").data("tooltip", lang.PROP.INSTANCE_IP_MSG_2).find(".input-ip").attr("disabled", "disabled");
        }
        return null;
      },
      instanceTypeSelect: function(event, value) {
        var $ebs, canset, has_ebs;
        canset = this.model.canSetInstanceType(value);
        if (canset !== true) {
          notification("error", canset);
          event.preventDefault();
          return;
        }
        has_ebs = this.model.setInstanceType(value);
        $ebs = $("#property-instance-ebs-optimized");
        $ebs.closest(".property-control-group").toggle(has_ebs);
        if (!has_ebs) {
          $ebs.prop("checked", false);
        }
        return this.refreshIPList();
      },
      ebsOptimizedSelect: function(event) {
        this.model.setEbsOptimized(event.target.checked);
        return null;
      },
      tenancySelect: function(event, value) {
        var $t1, $type, show;
        $type = $("#instance-type-select");
        $t1 = $type.find("[data-id='t1.micro']");
        if ($t1.length) {
          show = value !== "dedicated";
          $t1.toggle(show);
          if ($t1.hasClass("selected") && !show) {
            $type.find(".item:not([data-id='t1.micro'])").eq(0).click();
          }
        }
        this.model.setTenancy(value);
        return null;
      },
      cloudwatchSelect: function(event) {
        this.model.setMonitoring(event.target.checked);
        return $("#property-cloudwatch-warn").toggle($("#property-instance-enable-cloudwatch").is(":checked"));
      },
      userdataChange: function(event) {
        this.model.setUserData(event.target.value);
        return null;
      },
      eniDescriptionChange: function(event) {
        this.model.setEniDescription(event.target.value);
        return null;
      },
      sourceCheckChange: function(event) {
        this.model.setSourceCheck(event.target.checked);
        return null;
      },
      publicIpChange: function(event) {
        this.model.setPublicIp(event.target.checked);
        return null;
      },
      updateKPSelect: function() {
        $("#keypair-select").find(".item:last-child").append('<span class="icon-remove"></span>');
        return null;
      },
      openAmiPanel: function(event) {
        this.trigger("OPEN_AMI", $("#property-ami").attr("data-uid"));
        return null;
      },
      bindIpItemValidate: function() {
        var that;
        that = this;
        return $('.input-ip').each(function() {
          var $item;
          $item = $(this);
          return $item.parsley("custom", function(val) {
            var currentInputIP, inputValue, inputValuePrefix, ipIPFormatCorrect, prefixAry, result, validDOM;
            validDOM = $item;
            inputValue = val;
            inputValuePrefix = validDOM.siblings(".input-ip-prefix").text();
            currentInputIP = inputValuePrefix + inputValue;
            prefixAry = inputValuePrefix.split('.');
            ipIPFormatCorrect = false;
            if (prefixAry.length === 4) {
              if (inputValue === 'x') {
                ipIPFormatCorrect = true;
              } else if (MC.validate('ipaddress', inputValuePrefix + inputValue)) {
                ipIPFormatCorrect = true;
              }
            } else {
              if (inputValue === 'x.x') {
                ipIPFormatCorrect = true;
              } else if (MC.validate('ipaddress', inputValuePrefix + inputValue)) {
                ipIPFormatCorrect = true;
              }
            }
            if (!ipIPFormatCorrect) {
              return 'Invalid IP address';
            } else {
              result = that.model.isValidIp(currentInputIP);
              if (result !== true) {
                return result;
              }
            }
          });
        });
      },
      addIp: function() {
        if ($("#instance-ip-add").hasClass("disabled")) {
          return;
        }
        this.model.addIp();
        this.refreshIPList();
        return null;
      },
      removeIp: function(event) {
        var $li, index;
        $li = $(event.currentTarget).closest("li");
        index = $li.index();
        $li.remove();
        this.model.removeIp(index);
        this.updateIPAddBtnState(true);
        return null;
      },
      setEip: function(event) {
        var $target, attach, index, tooltip;
        $target = $(event.currentTarget);
        index = $target.closest("li").index();
        attach = !$target.hasClass("associated");
        if (attach) {
          tooltip = lang.PROP.INSTANCE_IP_MSG_4;
        } else {
          tooltip = lang.PROP.INSTANCE_IP_MSG_3;
        }
        $target.toggleClass("associated", attach).data("tooltip", tooltip);
        this.model.attachEip(index, attach);
        return null;
      },
      syncIPList: function(event) {
        var $target, autoAssign, ip, ipItems, ipVal;
        ipItems = $('#property-network-list .input-ip-item');
        $target = $(event.currentTarget);
        if (!$target.parsley('validate')) {
          return;
        }
        ipVal = $target.val();
        ip = $target.siblings(".input-ip-prefix").text() + ipVal;
        autoAssign = ipVal === "x" || ipVal === "x.x";
        this.model.setIp($target.closest("li").index(), ip, autoAssign);
        return null;
      },
      refreshIPList: function() {
        if (!this.model.attributes.eni) {
          return;
        }
        $('#property-network-list').html(MC.template.propertyIpList(this.model.attributes.eni.ips));
        this.updateIPAddBtnState();
        this.bindIpItemValidate();
        return null;
      },
      updateIPAddBtnState: function(enabled) {
        var tooltip;
        if (enabled === void 0) {
          enabled = this.model.canAddIP();
        }
        if (enabled === true) {
          tooltip = "Add IP Address";
        } else {
          if (_.isString(enabled)) {
            tooltip = enabled;
          } else {
            tooltip = "Cannot add IP address";
          }
          enabled = false;
        }
        $("#instance-ip-add").toggleClass("disabled", !enabled).data("tooltip", tooltip);
        return null;
      },
      disableUserDataInput: function(flag) {
        var $userDataInput;
        $userDataInput = $('#property-instance-user-data');
        if (flag === true) {
          $userDataInput.attr('disabled', 'disabled');
          return $userDataInput.addClass('tooltip').attr('data-tooltip', lang.PROP.INSTANCE_USER_DATA_DISABLE);
        } else if (flag === false) {
          $userDataInput.removeAttr('disabled');
          return $userDataInput.removeClass('tooltip').removeAttr('data-tooltip');
        }
      }
    });
    return new InstanceView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/instance/app_model',['../base/model', 'constant', 'i18n!/nls/lang.js', 'Design', 'CloudResources', "ApiRequest"], function(PropertyModel, constant, lang, Design, CloudResources, ApiRequest) {
    var AppInstanceModel;
    AppInstanceModel = PropertyModel.extend({
      defaults: {
        'id': null
      },
      setOsTypeAndLoginCmd: function(appId) {
        var cmd_line, instance_data, instance_state, login_user, os_type, region, _ref, _ref1;
        region = Design.instance().region();
        instance_data = (_ref = CloudResources(constant.RESTYPE.INSTANCE, region).get(appId)) != null ? _ref.toJSON() : void 0;
        if (instance_data) {
          os_type = (_ref1 = CloudResources(constant.RESTYPE.AMI, region).get(instance_data.imageId)) != null ? _ref1.toJSON() : void 0;
          if (os_type) {
            os_type = os_type.osType;
          }
        }
        if (!os_type) {
          return;
        }
        if ('win|windows'.indexOf(os_type) > 0) {
          this.set('osType', 'windows');
        } else {
          this.set('osType', os_type);
        }
        if (instance_data) {
          instance_state = instance_data.instanceState.name;
        }
        if (instance_state === 'running') {
          switch (os_type) {
            case 'amazon':
              login_user = 'ec2-user';
              break;
            case 'ubuntu':
              login_user = 'ubuntu';
              break;
            case 'redhat':
              login_user = 'ec2-user';
              break;
            default:
              login_user = 'root';
          }
        }
        cmd_line = sprintf('ssh -i %s.pem %s@%s', instance_data.keyName, login_user, instance_data.publicIpAddress || instance_data.privateIpAddress);
        return this.set('loginCmd', cmd_line);
      },
      init: function(instance_id) {
        var app_data, deviceName, effective, i, instance, monitoringState, myInstanceComponent, rdName, rootDevice, volume, _i, _len, _ref, _ref1, _ref2, _ref3;
        this.set('id', instance_id);
        this.set('uid', instance_id);
        myInstanceComponent = Design.instance().component(instance_id);
        if (myInstanceComponent) {
          instance_id = myInstanceComponent.get('appId');
        } else {
          effective = Design.modelClassForType(constant.RESTYPE.INSTANCE).getEffectiveId(instance_id);
          myInstanceComponent = Design.instance().component(effective.uid);
          this.set('uid', effective.uid);
          this.set('mid', effective.mid);
        }
        if (myInstanceComponent) {
          this.set('description', myInstanceComponent.get("description"));
          this.set('name', myInstanceComponent.get("name"));
        }
        if (!myInstanceComponent) {
          console.warn("instance.app_model.init(): can not find InstanceModel");
        }
        app_data = CloudResources(constant.RESTYPE.INSTANCE, Design.instance().region());
        if (app_data != null ? (_ref = app_data.get(instance_id)) != null ? _ref.toJSON() : void 0 : void 0) {
          instance = $.extend(true, {}, (_ref1 = app_data.get(instance_id)) != null ? _ref1.toJSON() : void 0);
          instance.name = myInstanceComponent ? myInstanceComponent.get('name') : instance_id;
          rdName = myInstanceComponent.getAmiRootDeviceName();
          instance.state = MC.capitalize(instance.instanceState.name);
          instance.blockDevice = "";
          if (instance.blockDeviceMapping && instance.blockDeviceMapping) {
            deviceName = [];
            _ref2 = instance.blockDeviceMapping;
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              i = _ref2[_i];
              deviceName.push(i.deviceName);
              if (rdName === i.deviceName) {
                rootDevice = i;
              }
            }
            instance.blockDevice = deviceName.join(", ");
            if (rootDevice) {
              volume = (_ref3 = CloudResources(constant.RESTYPE.VOL, Design.instance().region()).get(rootDevice.ebs.volumeId)) != null ? _ref3.toJSON() : void 0;
              if (volume) {
                if (volume.attachmentSet) {
                  volume.name = volume.attachmentSet[0].device;
                }
                this.set("rootDevice", volume);
              }
            }
          }
          instance.eni = this.getEniData(instance);
          instance.app_view = false;
          monitoringState = 'disabled';
          if (instance.monitoring && instance.monitoring.state) {
            monitoringState = instance.monitoring.state;
          }
          this.set('monitoringState', monitoringState);
          this.set(instance);
          this.resModel = myInstanceComponent;
          this.setOsTypeAndLoginCmd(instance_id);
        } else {
          return false;
        }
        return null;
      },
      getEniData: function(instance_data) {
        var EniModel, TYPE_ENI, allEni, appData, component, data, eni, i, id, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        if (!instance_data.networkInterfaceSet) {
          return null;
        }
        _ref = instance_data.networkInterfaceSet;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.attachment.deviceIndex === "0") {
            id = i.networkInterfaceId;
            data = i;
            break;
          }
        }
        TYPE_ENI = constant.RESTYPE.ENI;
        if (!id) {
          return null;
        }
        EniModel = Design.modelClassForType(TYPE_ENI);
        allEni = EniModel && EniModel.allObjects() || [];
        for (_j = 0, _len1 = allEni.length; _j < _len1; _j++) {
          eni = allEni[_j];
          if (eni.get('appId' === id)) {
            component = eni;
            break;
          }
        }
        appData = CloudResources(constant.RESTYPE.ENI, Design.instance().region());
        if (!appData.get(id)) {
          data = $.extend(true, {}, data);
        } else {
          data = $.extend(true, {}, (_ref1 = appData.get(id)) != null ? _ref1.toJSON() : void 0);
        }
        data.name = component ? component.get('name') : id;
        if (data.status === "in-use") {
          data.isInUse = true;
        }
        data.sourceDestCheck = data.sourceDestCheck ? "enabled" : "disabled";
        _ref2 = data.privateIpAddressesSet;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          i = _ref2[_k];
          i.primary = i.primary === true;
        }
        return data;
      },
      getPassword: function(key_data) {
        return ApiRequest("ins_GetPasswordData", {
          region: Design.instance().region(),
          instance_id: this.get("instanceId"),
          key_data: key_data || void 0
        }).then(function(data) {
          return data.GetPasswordDataResponse.passwordData;
        });
      },
      getEni: function() {
        var eni, eni_obj, instance;
        instance = Design.instance().component(this.get('uid'));
        eni = instance.getEmbedEni();
        if (!eni) {
          return;
        }
        eni_obj = eni.toJSON();
        eni_obj.ips = eni.getIpArray();
        eni_obj.ips[0].unDeletable = true;
        this.set("eni", eni_obj);
        this.set("multi_enis", instance.connections("EniAttachment").length > 0);
        return null;
      }
    });
    return new AppInstanceModel();
  });

}).call(this);

define('workspaces/awseditor/property/instance/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.keyName), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n      ";
  return buffer;
  }
function program2(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = (depth0 && depth0.keyName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program4(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_NO_KP", {hash:{},data:data}));
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dd>\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.keyName), {hash:{},inverse:self.program(12, program12, data),fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </dd>\n      ";
  return buffer;
  }
function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.windows), {hash:{},inverse:self.program(10, program10, data),fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }
function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                "
    + escapeExpression(((stack1 = (depth0 && depth0.keyName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n                <button class=\"btn btn-blue\" id=\"property-app-keypair\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_GET_WINDOWS_PASSWORD", {hash:{},data:data}))
    + "</button>\n            ";
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <a href=\"#\" id=\"property-app-keypair\">"
    + escapeExpression(((stack1 = (depth0 && depth0.keyName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a>\n            ";
  return buffer;
  }

function program12(depth0,data) {
  
  var buffer = "";
  buffer += "\n          "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_NO_KP", {hash:{},data:data}))
    + "\n        ";
  return buffer;
  }

function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ROOT_DEVICE", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <article class=\"property-app\">\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.volumeId), {hash:{},data:data}))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_DEVICE_NAME", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.name), {hash:{},data:data}))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_STATE", {hash:{},data:data}))
    + "</dt>\n        <dd><i class=\"status status-"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_CREATE_TIME", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.timeStr.call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.createTime), {hash:{},data:data}))
    + "</dd>\n      </dl>\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.readableVt.call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.volumeType), {hash:{},data:data}))
    + "</dd>\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.snapshotId), {hash:{},inverse:self.noop,fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SIZE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.size), {hash:{},data:data}))
    + " GB</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ENCRYPTED", {hash:{},data:data}))
    + "</dt>\n        <dd>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.encrypted), {hash:{},inverse:self.program(19, program19, data),fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.iops), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </dl>\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ATTACHMENT_STATE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.attachmentSet)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.state), {hash:{},data:data}))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_INSTANCE_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.attachmentSet)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.instanceId), {hash:{},data:data}))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ATTACHMENT_TIME", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.timeStr.call(depth0, ((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.attachmentSet)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.attachTime), {hash:{},data:data}))
    + "</dd>\n      </dl>\n    </article>\n  </div>\n  ";
  return buffer;
  }
function program15(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SNAPSHOT_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.snapshotId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program17(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ENCRYPTED_STATE", {hash:{},data:data}));
  }

function program19(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_NOT_ENCRYPTED_STATE", {hash:{},data:data}));
  }

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_IOPS", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program23(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_DETAIL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_DEVICE_NAME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.networkInterfaceId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.description), {hash:{},inverse:self.noop,fn:self.program(24, program24, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_SOURCE_DEST_CHECK_DISP", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.sourceDestCheck)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n\n    <div class=\"hidden-details\">\n      <a href=\"#\" class=\"toggle-details js-toggle-dropdown\" data-toggle=\"self-only\"><span class=\"details-off\">+ "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_SHOW_DETAIL", {hash:{},data:data}))
    + "</span><span class=\"details-on\">- "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_HIDE_DETAIL", {hash:{},data:data}))
    + "</span></a>\n\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_VPC_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.vpcId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_SUBNET_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.subnetId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.attachment), {hash:{},inverse:self.noop,fn:self.program(26, program26, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </dl>\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_MAC_ADDRESS", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.macAddress), {hash:{},data:data}))
    + "</dd>\n\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.association)),stack1 == null || stack1 === false ? stack1 : stack1.publicDnsName), {hash:{},inverse:self.noop,fn:self.program(28, program28, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.privateDnsName), {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.ownerId), {hash:{},inverse:self.noop,fn:self.program(32, program32, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </dl>\n    </div>\n    <table class=\"table table-small\">\n      <tr>\n        <th>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_IP_ADDRESS", {hash:{},data:data}))
    + "</th>\n        <th>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PUBLIC_IP", {hash:{},data:data}))
    + "</th>\n      </tr>\n      ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.privateIpAddressesSet), {hash:{},inverse:self.noop,fn:self.program(34, program34, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </table>\n\n  </div>\n  ";
  return buffer;
  }
function program24(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      ";
  return buffer;
  }

function program26(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_ATTACHMENT_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.attachment)),stack1 == null || stack1 === false ? stack1 : stack1.attachmentId), {hash:{},data:data}))
    + "</dd>\n\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_Attachment_OWNER", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.instanceOwnerId), {hash:{},data:data}))
    + "</dd>\n\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_Attachment_STATE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.attachment)),stack1 == null || stack1 === false ? stack1 : stack1.status), {hash:{},data:data}))
    + "</dd>\n        ";
  return buffer;
  }

function program28(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PUBLIC_DNS", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.association)),stack1 == null || stack1 === false ? stack1 : stack1.publicDnsName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program30(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PRIVATE_DNS", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.privateDnsName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program32(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_IP_OWNER", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.ownerId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program34(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <tr>\n        <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.privateIpAddress)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.primary), {hash:{},inverse:self.noop,fn:self.program(35, program35, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</td>\n        <td>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.publicIp), {hash:{},inverse:self.program(39, program39, data),fn:self.program(37, program37, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</td>\n      </tr>\n      ";
  return buffer;
  }
function program35(depth0,data) {
  
  var buffer = "";
  buffer += "<span>("
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_PRIMARY", {hash:{},data:data}))
    + ")</span>";
  return buffer;
  }

function program37(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.publicIp)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program39(depth0,data) {
  
  
  return "-";
  }

  buffer += "<article class=\"property-app\">\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_DETAIL", {hash:{},data:data}))
    + "\n  <a href=\"#\" class=\"icon-syslog tooltip property-btn-get-system-log action-link\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TIP_GET_SYSTEM_LOG", {hash:{},data:data}))
    + "\" ></a>\n</div>\n  <div class=\"option-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_INSTANCE_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.instanceId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.name), {hash:{},data:data}))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_LAUNCH_TIME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.timeStr.call(depth0, (depth0 && depth0.launchTime), {hash:{},data:data}))
    + "</dd>\n    </dl>\n\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PRIMARY_PUBLIC_IP", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.publicIpAddress), {hash:{},data:data}))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PUBLIC_DNS", {hash:{},data:data}))
    + "</dt>\n      <dd class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_SELECT_ALL", {hash:{},data:data}))
    + "\">"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.dnsName), {hash:{},data:data}))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PRIMARY_PRIVATE_IP", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.privateIpAddress), {hash:{},data:data}))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PRIVATE_DNS", {hash:{},data:data}))
    + "</dt>\n      <dd class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_SELECT_ALL", {hash:{},data:data}))
    + "\">"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.privateDnsName), {hash:{},data:data}))
    + "</dd>\n    </dl>\n\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI", {hash:{},data:data}))
    + "</dt>\n      <dd><a href=\"#\" data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.imageId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-app-ami\">"
    + escapeExpression(((stack1 = (depth0 && depth0.imageId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a><dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TYPE", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.instanceType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_KEY_PAIR", {hash:{},data:data}))
    + "</dt>\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.app_view), {hash:{},inverse:self.program(6, program6, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_CLOUDWATCH_DETAILED_MONITORING", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.monitoringState)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n    </dl>\n\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_EBS_OPTIMIZED", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.ebsOptimized), {hash:{},data:data}))
    + "<dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TENANCY", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = (depth0 && depth0.placement)),stack1 == null || stack1 === false ? stack1 : stack1.tenancy), {hash:{},data:data}))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ROOT_DEVICE_TYPE", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.rootDeviceType), {hash:{},data:data}))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_BLOCK_DEVICE", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.blockDevice), {hash:{},data:data}))
    + "</dd>\n    </dl>\n  </div>\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.rootDevice), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.eni), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  <div class=\"option-group-head\"> "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n  <div class=\"option-group sg-group\"></div>\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/instance/app_view',['../base/view', './template/app', 'i18n!/nls/lang.js', 'ApiRequest', 'kp_upload', 'Design', 'JsonExporter'], function(PropertyView, template, lang, ApiRequest, kp_upload, Design, JsonExporter) {
    var InstanceAppView, download, genDownload;
    download = JsonExporter.download;
    genDownload = function(name, str) {
      return function() {
        var blob;
        if ($("body").hasClass("safari")) {
          blob = null;
        } else {
          blob = new Blob([str]);
        }
        if (!blob) {
          return {
            data: "data:text/plain;," + str,
            name: name
          };
        }
        download(blob, name);
        return null;
      };
    };
    InstanceAppView = PropertyView.extend({
      __kpUpload: null,
      events: {
        "click #property-app-keypair": "keyPairClick",
        "click #property-app-ami": "openAmiPanel",
        "click .property-btn-get-system-log": "openSysLogModal"
      },
      render: function() {
        var data;
        data = this.model.toJSON();
        data.windows = this.model.get('osType') === 'windows';
        this.$el.html(template(data));
        return this.model.attributes.name;
      },
      keyPairClick: function(event) {
        return this.proccessKpStuff();
      },
      proccessKpStuff: function(notOld) {
        var isOldDefaultKp, isOldKp, isOldOtherKp, kp;
        if (!notOld) {
          kp = this.model.resModel.connectionTargets("KeypairUsage")[0];
          isOldDefaultKp = kp && kp.isDefault() && kp.get('appId') === ("DefaultKP---" + (Design.instance().get('id')));
          isOldOtherKp = kp && !kp.isDefault();
          isOldKp = isOldDefaultKp || isOldOtherKp;
          if (isOldKp) {
            this.model.downloadKp(kpName);
          }
        }
        if (!isOldKp && this.model.get('osType') === 'windows') {
          return this.decryptPassword();
        } else {
          return this.loginPrompt();
        }
      },
      loginPrompt: function() {
        var keypair, me;
        keypair = this.model.get('keyName');
        modal(MC.template.modalDownloadKP({
          name: keypair,
          loginCmd: this.model.get('loginCmd'),
          isOldKp: false,
          windows: this.model.get('osType') === 'windows'
        }));
        me = this;
        $('#keypair-cmd').off('click').on('click', function(event) {
          if (event.currentTarget.select) {
            event.currentTarget.select();
          }
          return event.stopPropagation();
        });
        return false;
      },
      decryptPassword: function() {
        var me;
        modal(MC.template.modalDecryptPassword({
          name: this.model.get('keyName'),
          isOldKp: false
        }));
        this.kpModalClosed = false;
        me = this;
        $('#modal-wrap').on("closed", function() {
          me.kpModalClosed = true;
        });
        this.model.getPassword().then(function(data) {
          return this.updateKPModal("check", !!data);
        }, function() {
          return notification('error', lang.NOTIFY.ERR_GET_PASSWD_FAILED);
        });
        $("#do-kp-decrypt").off('click').on('click', function(event) {
          return me.model.getPassword(me.__kpUpload.getData()).then(function(data) {
            return me.updateKPModal("got", data);
          }, function() {
            return notification('error', lang.NOTIFY.ERR_GET_PASSWD_FAILED);
          });
        });
        return false;
      },
      updateKPModal: function(action, data, data2, data3) {
        var $kpPwdInput, kp, kpPwdInput, pwd, success;
        if (this.kpModalClosed) {
          return;
        }
        if (action === 'check') {
          if (data) {
            this.__kpUpload && this.__kpUpload.remove();
            this.__kpUpload = new kp_upload({
              type: "Private Key"
            });
            this.__kpUpload.on('load', function() {
              return $("#do-kp-decrypt").prop('disabled', false);
            });
            $('#modal-box .import-zone').html(this.__kpUpload.render().el);
            return $('#modal-box .decrypt-action').show();
          } else {
            $('#modal-box .import-zone').html('');
            return $('#modal-box .no-password').show();
          }
        } else if (action === 'got') {
          $("#do-kp-decrypt").prop('disabled', true);
          $kpPwdInput = $('#keypair-pwd');
          kpPwdInput = $kpPwdInput.get(0);
          $kpPwdInput.val(data);
          kpPwdInput.select();
          kpPwdInput.focus();
          $('#do-kp-decrypt').text('Decrypted');
          return $('.change-pw-recommend').show();
        } else if (action === 'download') {
          success = data;
          pwd = data2;
          kp = data3 || data2;
          $('#keypair-kp-download').off('click').on('click', genDownload("" + (this.model.get('keyName')) + ".pem", kp));
          $('#keypair-loading').hide();
          $('#keypair-body').show();
          if (this.model.get('osType') === 'windows') {
            $('#keypair-pwd-old').val(pwd).off('click').on('click', function() {
              return this.select();
            });
            return $('#keypair-show').one('click', function() {
              return $('#keypair-pwd-old').prop('type', 'input');
            });
          }
        }
      },
      openAmiPanel: function(event) {
        this.trigger("OPEN_AMI", $(event.target).data("uid"));
        return false;
      },
      openSysLogModal: function() {
        var instanceId, that;
        instanceId = this.model.get('instanceId');
        modal(MC.template.modalInstanceSysLog({
          instance_id: instanceId,
          log_content: ''
        }, true));
        that = this;
        ApiRequest("ins_GetConsoleOutput", {
          region_name: Design.instance().region(),
          instance_id: instanceId
        }).then(function(data) {
          return that.refreshSysLog(data.GetConsoleOutputResponse);
        }, function() {
          return that.refreshSysLog();
        });
        return false;
      },
      refreshSysLog: function(result) {
        var $contentElem, logContent;
        $('#modal-instance-sys-log .instance-sys-log-loading').hide();
        if (result && result.output) {
          logContent = Base64.decode(result.output);
          $contentElem = $('#modal-instance-sys-log .instance-sys-log-content');
          $contentElem.html(MC.template.convertBreaklines({
            content: logContent
          }));
          $contentElem.show();
        } else {
          $('#modal-instance-sys-log .instance-sys-log-info').show();
        }
        return modal.position();
      }
    });
    return new InstanceAppView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/instance/main',["../base/main", "./model", "./view", "./app_model", "./app_view", "../sglist/main", "constant", "event"], function(PropertyModule, model, view, app_model, app_view, sglist_main, constant, ide_event) {
    var InstanceModule, ideEvents;
    ideEvents = {};
    ideEvents[ide_event.PROPERTY_REFRESH_ENI_IP_LIST] = function() {
      if (this.model.getEni) {
        this.model.getEni();
      }
      if (this.view.refreshIPList) {
        this.view.refreshIPList();
      }
      return null;
    };
    InstanceModule = PropertyModule.extend({
      ideEvents: ideEvents,
      handleTypes: [constant.RESTYPE.INSTANCE, 'component_asg_instance'],
      onUnloadSubPanel: function(id) {
        sglist_main.onUnloadSubPanel(id);
        return null;
      },
      setupStack: function() {
        this.view.on("OPEN_AMI", function(id) {
          return PropertyModule.loadSubPanel("STATIC", id);
        });
        return null;
      },
      initStack: function() {
        this.model = model;
        this.view = view;
        return null;
      },
      afterLoadStack: function() {
        sglist_main.loadModule(this.model);
        return null;
      },
      setupApp: function() {
        var me;
        me = this;
        this.view.on("OPEN_AMI", function(id) {
          return PropertyModule.loadSubPanel("STATIC", id);
        });
        return null;
      },
      initApp: function() {
        this.model = app_model;
        this.view = app_view;
        return null;
      },
      afterLoadApp: function() {
        sglist_main.loadModule(this.model);
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/servergroup/app_model',['../base/model', '../instance/model', 'constant', 'i18n!/nls/lang.js', 'Design', 'CloudResources'], function(PropertyModel, instance_model, constant, lang, Design, CloudResources) {
    var ServerGroupModel;
    ServerGroupModel = PropertyModel.extend({
      init: function(uid) {
        var ami, ami_id, myInstanceComponent, rd, routeCount, tenancy;
        this.set('uid', uid);
        this.set('readOnly', !this.isAppEdit);
        myInstanceComponent = Design.instance().component(uid);
        ami_id = myInstanceComponent.get("imageId");
        ami = myInstanceComponent.getAmi() || myInstanceComponent.get("cachedAmi");
        if (ami) {
          this.set('ami', {
            id: ami_id,
            name: ami.name || ami.description || ami.id,
            icon: "" + ami.osType + "." + ami.architecture + "." + ami.rootDeviceType + ".png"
          });
          this.set('type_editable', ami.rootDeviceType !== "instance-store");
        } else {
          notification('warning', sprintf(lang.NOTIFY.ERR_AMI_NOT_FOUND, ami_id));
        }
        rd = myInstanceComponent.getBlockDeviceMapping();
        if (rd.length === 1) {
          this.set("rootDevice", rd[0]);
        }
        tenancy = myInstanceComponent.get('tenancy' !== 'dedicated');
        this.set('instance_type', myInstanceComponent.getInstanceTypeList());
        this.set('ebs_optimized', myInstanceComponent.get("ebsOptimized"));
        this.set('can_set_ebs', myInstanceComponent.isEbsOptimizedEnabled());
        routeCount = myInstanceComponent.connectionTargets('RTB_Route').length;
        if (routeCount) {
          this.set('number_disable', true);
        }
        this.set('number', myInstanceComponent.get('count'));
        this.set('name', myInstanceComponent.get('name'));
        this.set('monitoring', myInstanceComponent.get('monitoring'));
        this.set('description', myInstanceComponent.get('description'));
        this.set('displayCount', myInstanceComponent.get('count') - 1);
        this.getGroupList();
        this.getEni();
        return null;
      },
      setCount: function(count) {
        var uid;
        uid = this.get('uid');
        Design.instance().component(uid).setCount(count);
        this.getGroupList();
        return null;
      },
      getGroupList: function() {
        var appData, comp, count, eni, existingLength, group, idx, index, member, members, name, resource_list, uid, _i, _j, _len, _len1, _ref, _ref1;
        uid = this.get('uid');
        comp = Design.instance().component(uid);
        resource_list = CloudResources(constant.RESTYPE.INSTANCE, Design.instance().region());
        appData = (_ref = CloudResources(constant.RESTYPE.INSTANCE, Design.instance().region()).get(comp.get('appId'))) != null ? _ref.toJSON() : void 0;
        name = comp.get("name");
        group = [
          {
            appId: comp.get("appId"),
            name: name + "-0",
            status: appData ? appData.instanceState.name : "Unknown",
            launchTime: appData ? appData.launchTime : ""
          }
        ];
        count = comp.get("count");
        if (comp.groupMembers().length > count - 1) {
          members = comp.groupMembers().slice(0, count - 1);
        } else {
          members = comp.groupMembers();
        }
        for (index = _i = 0, _len = members.length; _i < _len; index = ++_i) {
          member = members[index];
          group.push({
            name: name + "-" + (index + 1),
            appId: member.appId,
            status: resource_list.get(member.appId) ? resource_list.get(member.appId).attributes.instanceState.name : "Unknown",
            isNew: !member.appId,
            isOld: member.appId && (index + 1 >= count)
          });
        }
        while (group.length < count) {
          group.push({
            name: name + "-" + group.length,
            isNew: true,
            status: "Unknown"
          });
        }
        existingLength = 0;
        _ref1 = comp.groupMembers();
        for (idx = _j = 0, _len1 = _ref1.length; _j < _len1; idx = ++_j) {
          eni = _ref1[idx];
          if (eni.appId) {
            existingLength = idx + 1;
          } else {
            break;
          }
        }
        existingLength += 1;
        if (group.length > 1) {
          this.set('group', group);
          if (existingLength > count) {
            group.increment = "-" + (existingLength - count);
          } else if (existingLength < count) {
            group.increment = "+" + (count - existingLength);
          }
        } else {
          this.set('group', group[0]);
        }
        return null;
      },
      getEni: instance_model.getEni,
      setEbsOptimized: instance_model.setEbsOptimized,
      canSetInstanceType: instance_model.canSetInstanceType,
      setInstanceType: instance_model.setInstanceType,
      setIp: instance_model.setIp,
      canAddIP: instance_model.canAddIP,
      isValidIp: instance_model.isValidIp,
      addIp: instance_model.addIp,
      removeIp: instance_model.removeIp,
      attachEip: instance_model.attachEip,
      setMonitoring: instance_model.setMonitoring,
      setSourceCheck: instance_model.setSourceCheck
    });
    return new ServerGroupModel();
  });

}).call(this);

define('workspaces/awseditor/property/servergroup/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  
  return "class=\"expand\"";
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_DETAIL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n\n    <section class=\"property-control-group\" data-bind=\"true\">\n        <label class=\"left\" for=\"property-instance-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_HOSTNAME", {hash:{},data:data}))
    + "</label>\n        <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n\n        <div class=\"property-instance-name-wrap ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.count), 1, {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n            <div class=\"name-count-wrap\">\n                -[0-<span id=\"property-instance-name-count\">"
    + escapeExpression(((stack1 = (depth0 && depth0.displayCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>]\n            </div>\n            <div class=\"fitfloat\">\n                <input class=\"input instance-name\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-instance-name\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n            </div>\n        </div>\n    </section>\n\n    <section class=\"property-control-group\" data-bind=\"true\">\n        <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n        <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-instance-count\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_NUMBER", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n      <input class=\"input tooltip\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.number)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-instance-count\" data-ignore=\"true\" data-required=\"true\" data-type=\"digits\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.number_disable), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n    </section>\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.ami), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.type_editable), {hash:{},inverse:self.program(23, program23, data),fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ADVANCED_DETAIL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <section class=\"property-control-group\">\n      <div class=\"checkbox\">\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.monitoring), {hash:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <label for=\"property-instance-enable-cloudwatch\"></label>\n      </div>\n      <label for=\"property-instance-enable-cloudwatch\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_CW_ENABLED", {hash:{},data:data}))
    + "</label>\n\n      <p class=\"";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.monitoring), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " property-info\" id=\"property-cloudwatch-warn\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_CW_WARN", {hash:{},data:data}))
    + "<a target=\"_blank\" href=\"http://aws.amazon.com/cloudwatch\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_AMAZON_CLOUD_WATCH_PRODUCT_PAGE", {hash:{},data:data}))
    + "</a></p>\n    </section>\n  </div>\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.rootDevice), {hash:{},inverse:self.noop,fn:self.program(29, program29, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.eni), {hash:{},inverse:self.noop,fn:self.program(34, program34, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  <div class=\"option-group-head\"> "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n  <div class=\"option-group sg-group\"></div>\n  ";
  return buffer;
  }
function program4(depth0,data) {
  
  
  return "single";
  }

function program6(depth0,data) {
  
  var buffer = "";
  buffer += "disabled=\"disabled\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TIP_YOU_CANNOT_SPECIFY_INSTANCE_NUMBER", {hash:{},data:data}))
    + "\"";
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = "";
  buffer += "data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TIP_IF_THE_QUANTITY_IS_MORE_THAN_1", {hash:{},data:data}))
    + "\"";
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group\">\n      <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI", {hash:{},data:data}))
    + "</label>\n      <div id=\"property-ami\" class=\"property-block-wrap clearfix\" data-uid='"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.ami)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "'>\n        <img class=\"property-ami-icon left\" src=\"/assets/images/ide/ami/"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.ami)),stack1 == null || stack1 === false ? stack1 : stack1.icon)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" / >\n        <div class=\"property-ami-label\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.ami)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n      </div>\n    </section>\n    ";
  return buffer;
  }

function program12(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.instance_type)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;
  }
function program13(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group\">\n      <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TYPE", {hash:{},data:data}))
    + "</label>\n      <div class=\"selectbox selectbox-mega\" id=\"instance-type-select\">\n        <div class=\"selection\"></div>\n        <ul class=\"dropdown\">\n          ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.instance_type), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </ul>\n      </div>\n    </section>\n    <section class=\"property-control-group ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.can_set_ebs), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n      <div class=\"checkbox\">\n        <input id=\"property-instance-ebs-optimized\" type=\"checkbox\" value=\"None\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.ebs_optimized), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"ebs-optimized\" />\n        <label for=\"property-instance-ebs-optimized\"></label>\n      </div>\n      <label for=\"property-instance-ebs-optimized\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_EBS_OPTIMIZED", {hash:{},data:data}))
    + "</label>\n    </section>\n    ";
  return buffer;
  }
function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n          <li class=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "tooltip item\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.main)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hide), {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n            <div class=\"main truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.main)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n            <div class=\"sub\"><span>"
    + escapeExpression(((stack1 = (depth0 && depth0.ecu)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span> <span>"
    + escapeExpression(((stack1 = (depth0 && depth0.core)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span> <span>"
    + escapeExpression(((stack1 = (depth0 && depth0.mem)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n          </li>\n          ";
  return buffer;
  }
function program15(depth0,data) {
  
  
  return "selected ";
  }

function program17(depth0,data) {
  
  
  return "style=\"display:none;\"";
  }

function program19(depth0,data) {
  
  
  return "hide";
  }

function program21(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

function program23(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <section class=\"property-control-group\">\n      <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TYPE", {hash:{},data:data}))
    + "</label>\n      <p class=\"property-info\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_UPDATE_INSTANCE_TYPE_DISABLED_FOR_INSTANCE_STORE", {hash:{},data:data}))
    + "</p>\n    </section>\n    ";
  return buffer;
  }

function program25(depth0,data) {
  
  
  return "\n        <input id=\"property-instance-enable-cloudwatch\" type=\"checkbox\" checked=\"true\" value=\"None\" name=\"property-instance-enable-cloudwatch\" />\n        ";
  }

function program27(depth0,data) {
  
  
  return "\n        <input id=\"property-instance-enable-cloudwatch\" type=\"checkbox\" value=\"None\" name=\"property-instance-enable-cloudwatch\" />\n        ";
  }

function program29(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head\">Root Device</div>\n  <div class=\"option-group\">\n    <article class=\"property-app\">\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_DEVICE_NAME", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.DeviceName), {hash:{},data:data}))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.VolumeType), {hash:{},data:data}))
    + "</dd>\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.SnapshotId), {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SIZE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.VolumeSize), {hash:{},data:data}))
    + " GB</dd>\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.Iops), {hash:{},inverse:self.noop,fn:self.program(32, program32, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </dl>\n    </article>\n  </div>\n  ";
  return buffer;
  }
function program30(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SNAPSHOT_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.SnapshotId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program32(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>IOPS</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.Iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program34(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_DETAIL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <section class=\"property-control-group\">\n      <div class=\"checkbox\">\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.eni)),stack1 == null || stack1 === false ? stack1 : stack1.sourceDestCheck), {hash:{},inverse:self.program(37, program37, data),fn:self.program(35, program35, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <label for=\"property-instance-source-check\"></label>\n      </div>\n      <label for=\"property-instance-source-check\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_SOURCE_DEST_CHECK", {hash:{},data:data}))
    + "</label>\n    </section>\n    <section class=\"property-control-group\">\n      <div class=\"network-list-wrap\">\n        <div class=\"network-list-header clearfix\">\n          "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_IP_ADDRESS", {hash:{},data:data}))
    + "\n          <button id=\"instance-ip-add\" class=\"right btn btn-blue btn-small tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_TIP_ADD_IP_ADDRESS", {hash:{},data:data}))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_ADD_IP", {hash:{},data:data}))
    + "</button>\n        </div>\n        <ul class=\"network-list\" id=\"property-network-list\" data-bind=\"true\"></ul>\n      </div>\n    </section>\n  </div>\n  ";
  return buffer;
  }
function program35(depth0,data) {
  
  
  return "\n        <input id=\"property-instance-source-check\" type=\"checkbox\" checked=\"true\" value=\"None\" name=\"property-instance-source-check\" />\n        ";
  }

function program37(depth0,data) {
  
  
  return "\n        <input id=\"property-instance-source-check\" type=\"checkbox\" value=\"None\" name=\"property-instance-source-check\" />\n        ";
  }

  buffer += "<article class=\"property-app\">\n  <div id=\"prop-appedit-ami-list\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.readOnly), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n\n  </div>\n  ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.readOnly), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/servergroup/template/ami_list',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, self=this, escapeExpression=this.escapeExpression, functionType="function";

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.program(5, program5, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<div class=\"option-group-head ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.readOnly), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_INSTANCE_SUMMARY", {hash:{},data:data}))
    + "</div>\n<div class=\"option-group\">\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_INSTANCE_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.appId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_STATE", {hash:{},data:data}))
    + "</dt>\n    <dd><i class=\"status status-"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " icon-label\"></i>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_LAUNCH_TIME", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.timeStr.call(depth0, ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.launchTime), {hash:{},data:data}))
    + "</dd>\n  </dl>\n<div>\n";
  return buffer;
  }
function program3(depth0,data) {
  
  
  return "expand";
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<div class=\"option-group-head ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.readOnly), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_SERVER_GROUP_MEMBERS", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">("
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span> <span class=\"appedit-head-meta appedit-head-meta-add\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.increment)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n<ul class=\"option-group property-list\">\n  ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.group), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n";
  return buffer;
  }
function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <li>\n      <i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " icon-label tooltip\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.appId), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isNew), {hash:{},inverse:self.program(11, program11, data),fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </li>\n  ";
  return buffer;
  }
function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"subtitle\">("
    + escapeExpression(((stack1 = (depth0 && depth0.appId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span>";
  return buffer;
  }

function program9(depth0,data) {
  
  var buffer = "";
  buffer += "<div class=\"subtitle subtitle-launch\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_LAUNCH_AFTER_APPLYING_UPDATES", {hash:{},data:data}))
    + "</div>\n      ";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isOld), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      ";
  return buffer;
  }
function program12(depth0,data) {
  
  var buffer = "";
  buffer += "<div class=\"subtitle subtitle-terminate\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_TERMINATE_AFTER_APPLYING_UPDATE", {hash:{},data:data}))
    + "</div>";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, (depth0 && depth0.group), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/servergroup/app_view',['../base/view', '../instance/view', './template/app', './template/ami_list', 'i18n!/nls/lang.js'], function(PropertyView, instance_view, template, ami_list_template, lang) {
    var InstanceView;
    InstanceView = PropertyView.extend({
      events: {
        'change .instance-name': 'instanceNameChange',
        'change #property-res-desc': 'onChangeDesc',
        'change #property-instance-count': "countChange",
        'click #property-ami': "openAmiPanel",
        'OPTION_CHANGE #instance-type-select': "instanceTypeSelect",
        'change #property-instance-ebs-optimized': 'ebsOptimizedSelect',
        'click .toggle-eip': 'setEip',
        'click #instance-ip-add': "addIp",
        'click #property-network-list .icon-remove': "removeIp",
        'change .input-ip': 'syncIPList',
        'change #property-instance-enable-cloudwatch': 'cloudwatchSelect',
        'change #property-instance-source-check': 'sourceCheckChange'
      },
      render: function() {
        this.$el.html(template(this.model.attributes));
        this.updateInstanceList();
        this.refreshIPList();
        return this.model.attributes.name;
      },
      instanceNameChange: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "Instance")) {
          this.model.setName(name);
          this.setTitle(name);
        }
        return null;
      },
      openAmiPanel: function(event) {
        this.trigger("OPEN_AMI", $(event.currentTarget).data("uid"));
        return false;
      },
      updateInstanceList: function() {
        $("#prop-appedit-ami-list").html(ami_list_template(this.model.attributes));
        return null;
      },
      countChange: function(event) {
        var target, val;
        target = $(event.currentTarget);
        target.parsley('custom', function(val) {
          if (isNaN(val) || val > 99 || val < 1) {
            return lang.PARSLEY.THIS_VALUE_MUST_BETWEEN_1_99;
          }
        });
        if (!target.parsley('validate')) {
          return;
        }
        val = +target.val();
        this.model.setCount(val);
        this.updateInstanceList();
        $(".property-instance-name-wrap").toggleClass("single", val === 1);
        $("#property-instance-name-count").text(val - 1);
        this.setEditableIP(val === 1);
        return null;
      },
      onChangeDesc: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      ebsOptimizedSelect: function(event) {
        this.model.setEbsOptimized(event.target.checked);
        return null;
      },
      instanceTypeSelect: instance_view.instanceTypeSelect,
      cloudwatchSelect: instance_view.cloudwatchSelect,
      sourceCheckChange: instance_view.sourceCheckChange,
      addIp: instance_view.addIp,
      removeIp: instance_view.removeIp,
      setEip: instance_view.setEip,
      syncIPList: instance_view.syncIPList,
      refreshIPList: instance_view.refreshIPList,
      updateIPAddBtnState: instance_view.updateIPAddBtnState,
      setEditableIP: instance_view.setEditableIP,
      validateIpItem: instance_view.validateIpItem,
      bindIpItemValidate: instance_view.bindIpItemValidate
    });
    return new InstanceView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/servergroup/main',["../base/main", "./app_model", "./app_view", "../sglist/main", "constant", "event"], function(PropertyModule, app_model, app_view, sglist_main, constant, ide_event) {
    var ServerGroupModule, ideEvents;
    ideEvents = {};
    ideEvents[ide_event.PROPERTY_REFRESH_ENI_IP_LIST] = function() {
      this.model.getEni();
      this.view.refreshIPList();
      return null;
    };
    ServerGroupModule = PropertyModule.extend({
      ideEvents: ideEvents,
      handleTypes: 'component_server_group',
      onUnloadSubPanel: function(id) {
        sglist_main.onUnloadSubPanel(id);
        return null;
      },
      initApp: function() {
        this.model = app_model;
        this.model.isAppEdit = false;
        this.view = app_view;
        return null;
      },
      setupAppEdit: function() {
        this.view.on("OPEN_AMI", function(id) {
          return PropertyModule.loadSubPanel("STATIC", id);
        });
        return null;
      },
      initAppEdit: function() {
        this.model = app_model;
        this.model.isAppEdit = true;
        this.view = app_view;
        return null;
      },
      afterLoadAppEdit: function() {
        sglist_main.loadModule(this.model);
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/connection/model',['../base/model', "Design", 'constant', 'i18n!/nls/lang.js'], function(PropertyModel, Design, constant, lang) {
    var ConnectionModel;
    ConnectionModel = PropertyModel.extend({
      init: function(uid) {
        var attr, cn;
        cn = Design.instance().component(uid);
        if (!cn) {
          return false;
        }
        if (cn.type === "EniAttachment") {
          attr = {
            name: lang.PROP.ENI_ATTACHMENT_NAME,
            eniAsso: {
              instance: cn.getTarget(constant.RESTYPE.INSTANCE).get("name"),
              eni: cn.getTarget(constant.RESTYPE.ENI).get("name")
            }
          };
        } else if (cn.type === "ElbSubnetAsso") {
          attr = {
            name: lang.PROP.ELB_SUBNET_ASSO_NAME,
            subnetAsso: {
              elb: cn.getTarget(constant.RESTYPE.ELB).get("name"),
              subnet: cn.getTarget(constant.RESTYPE.SUBNET).get("name")
            }
          };
        }
        return this.set(attr);
      }
    });
    return new ConnectionModel();
  });

}).call(this);

define('workspaces/awseditor/property/connection/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"property-control-group\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CONNECTION_ATTACHMENT_OF", ((stack1 = (depth0 && depth0.eniAsso)),stack1 == null || stack1 === false ? stack1 : stack1.instance), ((stack1 = (depth0 && depth0.eniAsso)),stack1 == null || stack1 === false ? stack1 : stack1.eni), {hash:{},data:data}))
    + "</div>\n";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.subnetAsso), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"property-control-group\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CONNECTION_SUBNET_ASSO_PLACEMENT", ((stack1 = (depth0 && depth0.subnetAsso)),stack1 == null || stack1 === false ? stack1 : stack1.subnet), ((stack1 = (depth0 && depth0.subnetAsso)),stack1 == null || stack1 === false ? stack1 : stack1.elb), {hash:{},data:data}))
    + "</div>\n  ";
  return buffer;
  }

  buffer += "<article>\n\n";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.eniAsso), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/connection/view',['../base/view', './template/stack'], function(PropertyView, template) {
    var ConnectionView;
    ConnectionView = PropertyView.extend({
      render: function() {
        this.$el.html(template(this.model.attributes));
        return this.model.attributes.name;
      }
    });
    return new ConnectionView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/connection/main',['../base/main', './model', './view'], function(PropertyModule, model, view) {
    var ConnectionModule;
    ConnectionModule = PropertyModule.extend({
      handleTypes: ["EniAttachment", "ElbSubnetAsso"],
      initStack: function() {
        this.model = model;
        this.view = view;
        return null;
      },
      initApp: function() {
        this.model = model;
        this.view = view;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.view = view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/staticsub/model',['../base/model', 'constant', "../base/main", "CloudResources", "Design", 'i18n!/nls/lang.js'], function(PropertyModel, constant, PropertyModule, CloudResources, Design, lang) {
    var StaticSubModel;
    StaticSubModel = PropertyModel.extend({
      init: function(uid) {
        var InstanceModel, ami, item;
        this.set("isApp", this.isApp);
        InstanceModel = Design.modelClassForType(constant.RESTYPE.INSTANCE);
        ami = CloudResources(constant.RESTYPE.AMI, Design.instance().region()).get(uid);
        if (ami) {
          ami = ami.toJSON();
          this.set(ami);
          this.set("instance_type", (InstanceModel.getInstanceType(ami, Design.instance().region()) || []).join(", "));
          this.set("ami", true);
          this.set("name", ami.name);
          return;
        } else if (uid.indexOf("ami-") === 0) {
          this.set("ami", {
            unavailable: true
          });
          this.set("name", uid);
          return;
        }
        this.set("name", uid);
        item = CloudResources(constant.RESTYPE.SNAP, Design.instance().region()).get(uid);
        if (!item) {
          return false;
        }
        this.set(item.attributes);
        return true;
      },
      canChangeAmi: function(amiId) {
        var component, instanceType, newAmi, oldAmi;
        component = Design.instance().component(PropertyModule.activeModule().uid);
        oldAmi = component.getAmi() || component.get("cachedAmi");
        newAmi = CloudResources(constant.RESTYPE.AMI, Design.instance().region()).get(amiId);
        if (newAmi) {
          newAmi = newAmi.toJSON();
        }
        if (!oldAmi && !newAmi) {
          return lang.PROP.STATICSUB_VALIDATION_AMI_INFO_MISSING;
        }
        if (oldAmi.osType === "windows" && newAmi.osType !== "windows") {
          return sprintf(lang.PROP.STATICSUB_VALIDATION_AMI_TYPE_NOT_SUPPORT, newAmi.osFamily);
        }
        if (oldAmi.osType !== "windows" && newAmi.osType === "windows") {
          return sprintf(lang.PROP.STATICSUB_VALIDATION_AMI_TYPE_NOT_SUPPORT, newAmi.osFamily);
        }
        instanceType = Design.modelClassForType(constant.RESTYPE.INSTANCE).getInstanceType(newAmi, Design.instance().region());
        if (instanceType.indexOf(component.get("instanceType")) === -1) {
          return sprintf(lang.PROP.STATICSUB_VALIDATION_AMI_INSTANCETYPE_NOT_VALID, newAmi.name, component.get("instanceType"));
        }
        return true;
      },
      getAmiPngName: function(amiId) {
        var ami;
        ami = CloudResources(constant.RESTYPE.AMI, Design.instance().region()).get(amiId);
        if (!ami) {
          return "ami-not-available";
        } else {
          ami = ami.attributes;
          return "" + ami.osType + "." + ami.architecture + "." + ami.rootDeviceType;
        }
      },
      getAmiName: function(amiId) {
        var ami;
        ami = CloudResources(constant.RESTYPE.AMI, Design.instance().region()).get(amiId);
        if (ami) {
          return ami.get("name");
        } else {
          return "";
        }
      },
      changeAmi: function(amiId) {
        Design.instance().component(PropertyModule.activeModule().uid).setAmi(amiId);
        this.init(amiId);
        return null;
      },
      getInstanceName: function() {
        return Design.instance().component(PropertyModule.activeModule().uid).get("name");
      }
    });
    return new StaticSubModel();
  });

}).call(this);

define('workspaces/awseditor/property/staticsub/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isApp), {hash:{},inverse:self.program(5, program5, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.ami)),stack1 == null || stack1 === false ? stack1 : stack1.unavailable), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.ami)),stack1 == null || stack1 === false ? stack1 : stack1.unavailable), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program3(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <div class=\"property-control-group property-ami-info\">\n        <p>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.AMI_APP_NOT_AVAILABLE", {hash:{},data:data}))
    + "</p>\n    </div>\n    ";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.ami)),stack1 == null || stack1 === false ? stack1 : stack1.unavailable), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <div class=\"property-control-group property-ami-info\">\n        <div class=\"property-control-group tac\">\n            <button id=\"changeAmi\" class=\"btn btn-blue\"><i class=\"icon-edit icon-label\"></i>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STATIC_SUB_CHANGE_AMI", {hash:{},data:data}))
    + "</button>\n        </div>\n    </div>\n    <div class=\"property-control-group hide\" id=\"changeAmiPanel\">\n        <p>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DRAG_IMAGE_DROP_TO_CHANGE", {hash:{},data:data}))
    + "</p>\n        <div id=\"changeAmiDropZone\">\n            <p>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DRAG_IMAGE_DROP_HERE", {hash:{},data:data}))
    + "</p>\n            <div class=\"resource-icon resource-icon-instance\">\n                <img src=\"/assets/images/ide/ami/amazon.i386.ebs.png\" width=\"39\" height=\"27\">\n                <div class=\"resource-label\"></div>\n            </div>\n        </div>\n        <div class=\"hide\" id=\"confirmChangeAmiWrap\">\n            <p id=\"changeAmiWarning\"></p>\n            <button id=\"confirmChangeAmi\" class=\"btn btn-blue\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CONFIRM_CHANGE_AMI", {hash:{},data:data}))
    + "</button>\n        </div>\n        <button id=\"cancelChangeAmi\" class=\"btn-link\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_CANCEL", {hash:{},data:data}))
    + "</button>\n    </div>\n";
  return buffer;
  }
function program6(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <div class=\"property-control-group property-ami-info\">\n        "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.AMI_STACK_NOT_AVAILABLE", {hash:{},data:data}))
    + "\n    </div>\n    ";
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dl class=\"dl-vertical property-ami-info\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI_NAME", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI_DESC", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ROOT_DEVICE_TYPE", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.rootDeviceType), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI_ARCHITECH", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.architecture)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI_VIRTUALIZATION", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.virtualizationType), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI_KERNEL_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.kernelId), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI_OS_TYPE", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.osType), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI_SUPPORT_INSTANCE_TYPE", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.instance_type), {hash:{},data:data}))
    + "</dd>\n    </dl>\n    ";
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SNAPSHOT_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.volumeId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_CAPACITY", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.volumeSize), {hash:{},data:data}))
    + "GB</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_OWNER", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.ownerId), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_STARTED", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.startTime), {hash:{},data:data}))
    + "</dd>\n    </dl>\n";
  return buffer;
  }

  buffer += "<article class=\"property-app\">\n";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.ami), {hash:{},inverse:self.program(10, program10, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/staticsub/view',['../base/view', './template/stack'], function(PropertyView, template) {
    var StaticSubView;
    StaticSubView = PropertyView.extend({
      events: {
        "click #changeAmi": "showChangeAmiPanel",
        "click #confirmChangeAmi": "changeAmi",
        "click #cancelChangeAmi": "hideChangeAmiPanel"
      },
      render: function() {
        var self;
        this.$el.html(template(this.model.attributes));
        this.model.attributes.name;
        self = this;
        $("#changeAmiDropZone").on("addItem_drop", function(evt, data) {
          return self.onDropAmi(data);
        });
        return this.model.id;
      },
      showChangeAmiPanel: function() {
        $("#changeAmiPanel").show().siblings(".property-ami-info").hide();
        $("#changeAmiDropZone").children().hide().filter("p").show();
        $("#confirmChangeAmiWrap").hide();
        return null;
      },
      hideChangeAmiPanel: function() {
        $("#changeAmiPanel").hide().siblings(".property-ami-info").show();
        return null;
      },
      onDropAmi: function(data) {
        var amiId, canChangeAmi;
        amiId = data.dataTransfer.imageId;
        if (!amiId) {
          return;
        }
        $("#changeAmiPanel").data("amiId", amiId);
        $("#confirmChangeAmiWrap").show();
        canChangeAmi = this.model.canChangeAmi(amiId);
        if (canChangeAmi === true) {
          $("#changeAmiWarning").hide();
          $("#confirmChangeAmi").show();
        } else {
          $("#changeAmiWarning").html(canChangeAmi).show();
          $("#confirmChangeAmi").hide();
        }
        $("#changeAmiDropZone").children().show().filter("p").hide();
        $("#changeAmiDropZone").find("img").attr("src", "/assets/images/ide/ami/" + this.model.getAmiPngName(amiId) + ".png");
        $("#changeAmiDropZone").find(".resource-label").html(this.model.getAmiName(amiId));
        return null;
      },
      changeAmi: function() {
        var amiId;
        amiId = $("#changeAmiPanel").data("amiId");
        this.model.changeAmi(amiId);
        this.trigger("AMI_CHANGE");
        return null;
      }
    });
    return new StaticSubView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/staticsub/main',['../base/main', './model', './view', "event", "Design"], function(PropertyModule, model, view, ide_event, Design) {
    var StaticSubModule;
    view.on("AMI_CHANGE", function() {
      var component;
      component = Design.instance().component(PropertyModule.activeModule().uid);
      ide_event.trigger(ide_event.OPEN_PROPERTY, component.type, component.id);
      return null;
    });
    StaticSubModule = PropertyModule.extend({
      subPanelID: "STATIC",
      initStack: function() {
        this.model = model;
        this.view = view;
        this.model.isApp = false;
        return null;
      },
      initApp: function() {
        this.model = model;
        this.view = view;
        this.model.isApp = true;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.view = view;
        this.model.isApp = true;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/missing/main',['../base/main', '../base/model', '../base/view', 'constant', 'i18n!/nls/lang.js'], function(PropertyModule, PropertyModel, PropertyView, constant, lang) {
    var MissingModule, MissingView, m, model, view;
    MissingView = PropertyView.extend({
      render: function() {
        var comp, _ref;
        comp = Design.instance().component(this.model.get('uid'));
        if (((_ref = Design.instance().get('state')) === 'Stopped' || _ref === "Stopping") && comp.type === constant.RESTYPE.ASG) {
          this.$el.html(MC.template.missingAsgWhenStop({
            asgName: comp.get('name')
          }));
          return "" + (comp.get('name')) + " Deleted";
        } else {
          this.$el.html(MC.template.missingPropertyPanel());
          return lang.PROP.MISSING_RESOURCE_UNAVAILABLE;
        }
      }
    });
    view = new MissingView();
    m = PropertyModel.extend({
      init: function(uid) {
        return this.set('uid', uid);
      }
    });
    model = new m();
    MissingModule = PropertyModule.extend({
      handleTypes: "Missing_Resource",
      initApp: function() {
        this.model = model;
        this.view = view;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.view = view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/sg/model',['../base/model', "Design", 'constant', "CloudResources"], function(PropertyModel, Design, constant, CloudResources) {
    var SgModel;
    SgModel = PropertyModel.extend({
      init: function(uid) {
        var component, inputReadOnly, members, rule, rules, _i, _len, _ref;
        this.component = component = Design.instance().component(uid);
        if (this.isReadOnly) {
          this.appInit(uid);
          return;
        }
        rules = [];
        _ref = component.connections("SgRuleSet");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rule = _ref[_i];
          rules = rules.concat(rule.toPlainObjects(uid, true));
        }
        members = _.map(component.getMemberList(), function(tgt) {
          return tgt.get("name");
        });
        this.set({
          uid: uid,
          name: component.get("name"),
          description: component.get("description"),
          members: members,
          rules: rules,
          color: component.color,
          ruleEditable: true
        });
        this.sortSGRule();
        if (component.isElbSg()) {
          inputReadOnly = true;
        } else if (this.isAppEdit) {
          inputReadOnly = component.get("appId");
        }
        if (inputReadOnly || component.isDefault()) {
          this.set('nameReadOnly', true);
          this.set('descReadOnly', true);
        }
        return null;
      },
      setDescription: function(value) {
        Design.instance().component(this.get("uid")).set("description", value);
        return null;
      },
      sortSGRule: function(key) {
        this.attributes.rules = _.sortBy(this.attributes.rules, key || "direction");
        return null;
      },
      addRule: function(rule) {
        var SgRuleSetModel, beforeCount, mySg, rules, sgRuleSet, target, uid, _i, _len, _ref;
        uid = this.get("uid");
        mySg = Design.instance().component(uid);
        if (rule.relation[0] === "@") {
          target = Design.instance().component(rule.relation.substr(1));
        } else {
          target = mySg.createIpTarget(rule.relation);
        }
        SgRuleSetModel = Design.modelClassForType("SgRuleSet");
        sgRuleSet = new SgRuleSetModel(mySg, target);
        beforeCount = sgRuleSet.ruleCount(mySg.id);
        sgRuleSet.addRawRule(mySg.id, rule.direction, rule);
        if (beforeCount < sgRuleSet.ruleCount(mySg.id)) {
          rules = [];
          _ref = mySg.connections("SgRuleSet");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rule = _ref[_i];
            rules = rules.concat(rule.toPlainObjects(uid, true));
          }
          this.attributes.rules = rules;
          this.sortSGRule();
          return true;
        } else {
          return false;
        }
      },
      createSGRuleData: function() {
        var sgList;
        sgList = _.map(Design.modelClassForType(constant.RESTYPE.SG).allObjects(), function(sg) {
          return {
            id: sg.id,
            color: sg.color,
            name: sg.get("name")
          };
        });
        return {
          isClassic: false,
          sgList: sgList
        };
      },
      removeRule: function(rule) {
        var sgRuleSet;
        sgRuleSet = Design.instance().component(rule.ruleSetId);
        sgRuleSet.removeRuleByPlainObj(rule);
        return null;
      },
      appInit: function(sg_uid) {
        var currentAppSG, currentRegion, currentSGID, members, rule, rules, sg_app_detail, _i, _len, _ref, _ref1;
        currentRegion = Design.instance().region();
        currentSGID = this.component.get('appId');
        currentAppSG = (_ref = CloudResources(constant.RESTYPE.SG, currentRegion).get(currentSGID)) != null ? _ref.toJSON() : void 0;
        rules = [];
        _ref1 = this.component.connections("SgRuleSet");
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          rule = _ref1[_i];
          rules = rules.concat(rule.toPlainObjects(sg_uid));
        }
        members = _.map(this.component.connectionTargets("SgAsso"), function(sgTarget) {
          return sgTarget.get('name');
        });
        sg_app_detail = {
          uid: sg_uid,
          name: this.component.get('name'),
          color: this.component.color,
          groupName: currentAppSG.groupName,
          description: currentAppSG.groupDescription,
          groupId: currentAppSG.groupId,
          ownerId: currentAppSG.ownerId,
          vpcId: currentAppSG.vpcId,
          members: members,
          rules: rules
        };
        this.set(sg_app_detail);
        this.sortSGRule();
        return null;
      }
    });
    return new SgModel();
  });

}).call(this);

define('workspaces/awseditor/property/sg/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  
  return "disabled=\"disabled\"";
  }

function program3(depth0,data) {
  
  var buffer = "";
  buffer += "\n		<a href=\"#\" class=\"icon-add tooltip add-rule action-link\" id=\"sg-add-rule-icon\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_TIP_CREATE_RULE", {hash:{},data:data}))
    + "' ></a>\n		";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "";
  buffer += "<li class=\"sg-member-name\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</li>";
  return buffer;
  }

  buffer += "<article>\n	<div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_TIT_DETAIL", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\" data-bind=\"true\">\n		<div class=\"property-control-group\">\n			<label for=\"securitygroup-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_DETAIL_LBL_NAME", {hash:{},data:data}))
    + "</label>\n			<span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n			<input class=\"input\"  type=\"text\" id=\"securitygroup-name\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.nameReadOnly), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n		</div>\n		<div class=\"property-control-group\">\n			<label for=\"securitygroup-description\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n			<input class=\"input\" type=\"text\" id=\"securitygroup-description\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.descReadOnly), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-type=\"ascii\" data-ignore=\"true\"/>\n		</div>\n	</div>\n\n	<div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_TIT_RULE", {hash:{},data:data}))
    + "\n		<span class=\"property-head-num-wrap\">(<span id=\"rule-count\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rules)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>)</span>\n		";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.ruleEditable), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</div>\n	<div class=\"option-group\">\n		<div class=\"rule-list-sort property-control-group\">\n			<h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY", {hash:{},data:data}))
    + "</h5>\n			<div class=\"selectbox\" id=\"sg-rule-filter-select\">\n				<div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_DIRECTION", {hash:{},data:data}))
    + "</div>\n				<ul class=\"dropdown\" tabindex=\"-1\">\n					<li class=\"item selected\" data-id=\"direction\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_DIRECTION", {hash:{},data:data}))
    + "</li>\n					<li class=\"item\" data-id=\"relation\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_SRC_DEST", {hash:{},data:data}))
    + "</li>\n					<li class=\"item\" data-id=\"protocol\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_PROTOCOL", {hash:{},data:data}))
    + "</li>\n				</ul>\n			</div>\n		</div>\n\n		<ul class=\"sg-rule-list property-list\" id=\"sg-rule-list\"></ul>\n	</div>\n\n	<div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_TIT_MEMBER", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">("
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.members)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span>	</div>\n	<div class=\"option-group\">\n		<ul class=\"sg-member-list property-list\">\n			";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.members), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</ul>\n	</div>\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/sg/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += " <li class=\"sg-member-name\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</li> ";
  return buffer;
  }

  buffer += "<article>\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_APP_SG_NAME", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.groupName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_APP_SG_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.groupId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_APP_VPC_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.vpcId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n  </dl>\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_TIT_RULE", {hash:{},data:data}))
    + "\n    <span class=\"property-head-num-wrap\">(<span id=\"rule-count\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rules)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>)</span>\n  </div>\n  <div class=\"option-group\">\n\n    <div class=\"rule-list-sort property-control-group\">\n      <h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY", {hash:{},data:data}))
    + "</h5>\n      <div class=\"selectbox\" id=\"sg-rule-filter-select\">\n        <div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_DIRECTION", {hash:{},data:data}))
    + "</div>\n        <ul class=\"dropdown\" tabindex=\"-1\">\n          <li class=\"item selected\" data-id=\"direction\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_DIRECTION", {hash:{},data:data}))
    + "</li>\n          <li class=\"item\" data-id=\"relation\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_SRC_DEST", {hash:{},data:data}))
    + "</li>\n          <li class=\"item\" data-id=\"protocol\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_RULE_SORT_BY_PROTOCOL", {hash:{},data:data}))
    + "</li>\n        </ul>\n      </div>\n    </div>\n\n    <ul class=\"sg-rule-list property-list\" id=\"sg-rule-list\"></ul>\n  </div>\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SG_TIT_MEMBER", {hash:{},data:data}))
    + "\n    <span class=\"property-head-num-wrap\">(<span>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.members)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>)</span>\n  </div>\n  <div class=\"option-group\">\n    <ul class=\"sg-member-list property-list\">\n      ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.members), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </ul>\n  </div>\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/sg/view',['../base/view', './template/stack', './template/app', 'constant', 'i18n!/nls/lang.js'], function(PropertyView, template, app_template, constant, lang) {
    var SgView;
    SgView = PropertyView.extend({
      events: {
        'click #sg-add-rule-icon': 'showCreateRuleModal',
        'click .sg-rule-delete': 'removeRulefromList',
        'change #securitygroup-name': 'setSGName',
        'change #securitygroup-description': 'setSGDescription',
        'OPTION_CHANGE #sg-rule-filter-select': 'sortSgRule'
      },
      render: function() {
        var tpl;
        tpl = this.model.isReadOnly ? app_template : template;
        this.$el.html(tpl(this.model.toJSON()));
        this.refreshSgruleList();
        this.setTitle(this.model.get("name"));
        this.prependTitle('<span class="sg-color" style="background-color:' + this.model.get("color") + '" ></span>');
        this.forceShow();
        setTimeout(function() {
          return $('#securitygroup-name').focus();
        }, 200);
        return this.model.get("name");
      },
      refreshSgruleList: function() {
        var rules;
        rules = this.model.get('rules');
        rules.deletable = this.model.get('ruleEditable');
        return $('#sg-rule-list').html(MC.template.sgRuleList(rules));
      },
      showCreateRuleModal: function(event) {
        modal(MC.template.modalSGRule(this.model.createSGRuleData()));
        $("#sg-modal-direction").on("click", "input", this.radioSgModalChange);
        $("#modal-protocol-select").on("OPTION_CHANGE", this.sgModalSelectboxChange);
        $("#protocol-icmp-main-select").on("OPTION_CHANGE", this.icmpMainSelect);
        $("#sg-protocol-select-result").on("OPTION_CHANGE", ".protocol-icmp-sub-select", this.icmpSubSelect);
        $("#sg-modal-save").on("click", _.bind(this.saveSgModal, this));
        $("#sg-add-model-source-select").on("OPTION_CHANGE", this.modalRuleSourceSelected);
        return false;
      },
      radioSgModalChange: function(event) {
        if ($('#sg-modal-direction input:checked').val() === "inbound") {
          return $('#rule-modal-ip-range').text(lang.IDE.POP_ACLRULE_LBL_SOURCE);
        } else {
          return $('#rule-modal-ip-range').text(lang.IDE.POP_ACLRULE_LBL_DEST);
        }
      },
      sgModalSelectboxChange: function(event, id) {
        $('#sg-protocol-select-result').find('.show').removeClass('show');
        $('.sg-protocol-option-input').removeClass("show");
        $('#sg-protocol-' + id).addClass('show');
        $('.protocol-icmp-sub-select').removeClass('shown');
        $('#modal-protocol-select').data('protocal-type', id);
        return null;
      },
      icmpMainSelect: function(event, id) {
        $("#protocol-icmp-main-select").data('protocal-main', id);
        if (id === "3" || id === "5" || id === "11" || id === "12") {
          $('.protocol-icmp-sub-select').removeClass('shown');
          return $('#protocol-icmp-sub-select-' + id).addClass('shown');
        } else {
          return $('.protocol-icmp-sub-select').removeClass('shown');
        }
      },
      icmpSubSelect: function(event, id) {
        return $("#protocol-icmp-main-select").data('protocal-sub', id);
      },
      modalRuleSourceSelected: function(event) {
        var isCustom, value;
        value = $.trim($(event.target).find('.selected').attr('data-id'));
        isCustom = value === 'custom';
        $('#securitygroup-modal-description').toggle(isCustom);
        $('#sg-add-model-source-select .selection').width(isCustom ? 69 : 322);
        return null;
      },
      setSGName: function(event) {
        var name, oldName, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "SG")) {
          oldName = this.model.get("name");
          this.model.setName(name);
          this.setTitle(this.model.get("name"));
          this.prependTitle('<span class="sg-color" style="background-color:' + this.model.get("color") + '" ></span>');
          $("#sg-rule-list").children().find(".rule-reference").each(function() {
            if ($(this).text() === oldName) {
              $(this).html(title);
            }
          });
        }
        return null;
      },
      setSGDescription: function(event) {
        this.model.setDescription(event.target.value);
        return null;
      },
      sortSgRule: function(event) {
        this.model.sortSGRule($(event.target).find('.selected').attr('data-id'));
        this.refreshSgruleList();
        return null;
      },
      removeRulefromList: function(event) {
        var li_dom, rule, ruleCount;
        li_dom = $(event.target).closest('li');
        rule = {
          ruleSetId: li_dom.attr('data-uid'),
          port: li_dom.attr('data-port'),
          protocol: li_dom.attr('data-protocol'),
          direction: li_dom.attr('data-direction'),
          relation: li_dom.attr("data-relationid")
        };
        li_dom.remove();
        ruleCount = $("#sg-rule-list").children().length;
        $("#rule-count").text(ruleCount);
        this.model.removeRule(rule);
        return false;
      },
      saveSgModal: function(event) {
        var custom_protocal_dom, descrition_dom, needValidate, ports, protocol_type, protocol_val, protocol_val_sub, result, rule, sg_direction, sourceValue, tcp_port_dom, udp_port_dom, validateMap;
        sg_direction = $('#sg-modal-direction input:checked').val();
        descrition_dom = $('#securitygroup-modal-description');
        tcp_port_dom = $('#sg-protocol-tcp input');
        udp_port_dom = $('#sg-protocol-udp input');
        custom_protocal_dom = $('#sg-protocol-custom input');
        protocol_type = $('#modal-protocol-select').data('protocal-type');
        sourceValue = $.trim($('#sg-add-model-source-select').find('.selected').attr('data-id'));
        validateMap = {
          'custom': {
            dom: custom_protocal_dom,
            method: function(val) {
              if (!MC.validate.portRange(val)) {
                return lang.PARSLEY.MUST_BE_A_VALID_FORMAT_OF_NUMBER;
              }
              if (Number(val) < 0 || Number(val) > 255) {
                return lang.PARSLEY.THE_PROTOCOL_NUMBER_RANGE_MUST_BE_0_255;
              }
              return null;
            }
          },
          'tcp': {
            dom: tcp_port_dom,
            method: function(val) {
              var portAry;
              portAry = [];
              portAry = MC.validate.portRange(val);
              if (!portAry) {
                return lang.PARSLEY.MUST_BE_A_VALID_FORMAT_OF_PORT_RANGE;
              }
              if (!MC.validate.portValidRange(portAry)) {
                return lang.PARSLEY.PORT_RANGE_BETWEEN_0_65535;
              }
              return null;
            }
          },
          'udp': {
            dom: udp_port_dom,
            method: function(val) {
              var portAry;
              portAry = [];
              portAry = MC.validate.portRange(val);
              if (!portAry) {
                return lang.PARSLEY.MUST_BE_A_VALID_FORMAT_OF_PORT_RANGE;
              }
              if (!MC.validate.portValidRange(portAry)) {
                return lang.PARSLEY.PORT_RANGE_BETWEEN_0_65535;
              }
              return null;
            }
          }
        };
        if (protocol_type in validateMap) {
          needValidate = validateMap[protocol_type];
          needValidate.dom.parsley('custom', needValidate.method);
        }
        descrition_dom.parsley('custom', function(val) {
          if (!MC.validate('cidr', val)) {
            return lang.PARSLEY.MUST_BE_CIDR_BLOCK;
          }
          return null;
        });
        if ((sourceValue === 'custom' && (!descrition_dom.parsley('validate'))) || (needValidate && !needValidate.dom.parsley('validate'))) {
          return;
        }
        rule = {
          protocol: protocol_type,
          direction: sg_direction || "inbound",
          fromPort: "",
          toPort: ""
        };
        switch (protocol_type) {
          case "tcp":
          case "udp":
            ports = $('#sg-protocol-' + protocol_type + ' input').val().split('-');
            rule.fromPort = ports[0].trim();
            if (ports.length >= 2) {
              rule.toPort = ports[1].trim();
            }
            break;
          case "icmp":
            protocol_val = $("#protocol-icmp-main-select").data('protocal-main');
            protocol_val_sub = $("#protocol-icmp-main-select").data('protocal-sub');
            rule.fromPort = protocol_val;
            rule.toPort = protocol_val_sub;
            break;
          case "custom":
            rule.protocol = $('#sg-protocol-custom input').val();
        }
        if (sourceValue === 'custom') {
          rule.relation = descrition_dom.val();
        } else {
          rule.relation = "@" + $('#sg-add-model-source-select').children("ul").children('.selected').attr("data-uid");
        }
        result = this.model.addRule(rule);
        if (!result) {
          return notification('warning', lang.NOTIFY.THE_ADDING_RULE_ALREADY_EXIST);
        } else {
          this.refreshSgruleList();
          return modal.close();
        }
      }
    });
    return new SgView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/sg/main',['../base/main', './model', './view'], function(PropertyModule, model, view) {
    var SgModule;
    SgModule = PropertyModule.extend({
      subPanelID: "SG",
      initStack: function() {
        this.model = model;
        this.model.isReadOnly = false;
        this.model.isAppEdit = false;
        this.view = view;
        return null;
      },
      initApp: function() {
        this.model = model;
        this.model.isReadOnly = true;
        this.model.isAppEdit = false;
        this.view = view;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.model.isReadOnly = false;
        this.model.isAppEdit = true;
        this.view = view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/sgrule/model',['../base/model', "Design"], function(PropertyModel, Design) {
    var SGRuleModel;
    SGRuleModel = PropertyModel.extend({
      init: function(line_id) {
        var SgRuleSetModel, allRuleSets, connection;
        connection = Design.instance().component(line_id);
        if (!connection) {
          return;
        }
        SgRuleSetModel = Design.modelClassForType("SgRuleSet");
        allRuleSets = SgRuleSetModel.getRelatedSgRuleSets(connection.port1Comp(), connection.port2Comp());
        this.set({
          uid: line_id,
          groups: SgRuleSetModel.getGroupedObjFromRuleSets(allRuleSets),
          readOnly: this.isApp
        });
        return null;
      }
    });
    return new SGRuleModel();
  });

}).call(this);

define('workspaces/awseditor/property/sgrule/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"property-group-head truncate\"><span class=\"sg-color sg-color-rule-header\" style=\"background-color:"
    + escapeExpression(((stack1 = (depth0 && depth0.ownerColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></span>"
    + escapeExpression(((stack1 = (depth0 && depth0.ownerName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n  <ul class=\"property-group sg-rule-list property-list\">";
  stack1 = ((stack1 = (depth0 && depth0.ruleListTpl)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</ul>\n  ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "";
  buffer += "\n  <div class=\"tac property-control-group\">\n    <button class=\"btn\" id=\"sg-edit-rule-button\" style=\"width:180px;\"><i class=\"icon-edit icon-label\"></i>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SGRULE_BTN_EDIT_RULE", {hash:{},data:data}))
    + "</button>\n  </div>\n  ";
  return buffer;
  }

  buffer += "<article>\n  <section class=\"property-info\" style=\"margin-top:0;\">\n    <div class=\"property-control-group\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SGRULE_DESCRIPTION", {hash:{},data:data}))
    + "</div>\n  </section>\n\n	";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.groups), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.readOnly), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/sgrule/view',['../base/view', './template/stack', "SGRulePopup"], function(PropertyView, template, SGRulePopup) {
    var SgRuleView;
    SgRuleView = PropertyView.extend({
      events: {
        "click #sg-edit-rule-button": "onEditRule"
      },
      render: function() {
        var group, _i, _len, _ref;
        _ref = this.model.attributes.groups;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          group.ruleListTpl = MC.template.sgRuleList(group.rules);
        }
        this.$el.html(template(this.model.attributes));
        return "Security Group Rule";
      },
      onEditRule: function(event) {
        new SGRulePopup(this.model.get("uid"));
        return false;
      }
    });
    return new SgRuleView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/sgrule/main',['../base/main', './model', './view'], function(PropertyModule, model, view) {
    var SgRuleModule;
    SgRuleModule = PropertyModule.extend({
      handleTypes: ["ElbAmiAsso", "SgRuleLine"],
      initStack: function() {
        this.model = model;
        this.model.isApp = false;
        this.view = view;
        return null;
      },
      initApp: function() {
        this.model = model;
        this.model.isApp = true;
        this.view = view;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.model.isApp = false;
        this.view = view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/volume/model',['../base/model', 'constant', 'Design', "CloudResources"], function(PropertyModel, constant, Design, CloudResources) {
    var VolumeModel;
    VolumeModel = PropertyModel.extend({
      init: function(uid) {
        var component, displayEncrypted, isEncrypted, res, snapshot, supportEncrypted, volume_detail, _ref;
        component = Design.instance().component(uid);
        res = component.attributes;
        if (!res.owner) {
          console.error("[volume property] can not found owner of volume!");
          return false;
        }
        supportEncrypted = component.isSupportEncrypted();
        displayEncrypted = true;
        if (!supportEncrypted) {
          displayEncrypted = false;
        }
        if (res.snapshotId) {
          supportEncrypted = false;
        }
        if (component.get('owner').type === constant.RESTYPE.LC) {
          displayEncrypted = false;
        }
        isEncrypted = false;
        if (supportEncrypted) {
          isEncrypted = ((_ref = res.encrypted) === 'true' || _ref === true);
        }
        volume_detail = {
          isWin: res.name[0] !== '/',
          isStandard: res.volumeType === 'standard',
          isIo1: res.volumeType === 'io1',
          isGp2: res.volumeType === 'gp2',
          iops: res.iops,
          volume_size: res.volumeSize,
          snapshot_id: res.snapshotId,
          name: res.name,
          displayEncrypted: displayEncrypted,
          support_encrypted: supportEncrypted,
          encrypted: isEncrypted
        };
        if (volume_detail.isWin) {
          volume_detail.editName = volume_detail.name.slice(-1);
        } else {
          volume_detail.editName = volume_detail.name.slice(5);
        }
        if (volume_detail.snapshot_id) {
          snapshot = CloudResources(constant.RESTYPE.SNAP, Design.instance().region()).get(volume_detail.snapshot_id);
          if (snapshot) {
            volume_detail.snapshot_size = snapshot.get('volumeSize');
            volume_detail.snapshot_desc = snapshot.get('description');
          }
        }
        if (volume_detail.volume_size < 10) {
          volume_detail.iopsDisabled = true;
        }
        this.set('volume_detail', volume_detail);
        this.set('uid', uid);
        return null;
      },
      setDeviceName: function(name) {
        var allVolume, device_name, lc, lcUid, newDeviceName, newId, realuid, uid, v, volume, volumeModel, _i, _len;
        uid = this.get("uid");
        volume = Design.instance().component(uid);
        if (!volume) {
          realuid = uid.split('_');
          device_name = realuid[2];
          lcUid = realuid[0];
          lc = Design.instance().component(lcUid);
          volumeModel = Design.modelClassForType(constant.RESTYPE.VOL);
          allVolume = volumeModel && volumeModel.allObjects() || [];
          for (_i = 0, _len = allVolume.length; _i < _len; _i++) {
            v = allVolume[_i];
            if (v.get('owner') === lc) {
              if (v.get('name') === device_name) {
                newDeviceName = volume.genFullName(name);
                newId = "" + realuid + "_volume_" + name;
                v.set('name', newDeviceName);
                this.attributes.volume_detail.name = newDeviceName;
                this.attributes.volume_detail.editName = name;
                this.set('uid', newId);
                break;
              }
            }
          }
        } else {
          newDeviceName = volume.genFullName(name);
          volume.set('name', newDeviceName);
          this.attributes.volume_detail.name = newDeviceName;
        }
        return null;
      },
      setVolumeSize: function(value) {
        var allVolume, device_name, lc, lcUid, realuid, uid, v, volume, volumeModel, _i, _len;
        uid = this.get("uid");
        volume = Design.instance().component(uid);
        if (!volume) {
          realuid = uid.split('_');
          device_name = realuid[2];
          lcUid = realuid[0];
          lc = Design.instance().component(lcUid);
          volumeModel = Design.modelClassForType(constant.RESTYPE.VOL);
          allVolume = volumeModel && volumeModel.allObjects() || [];
          for (_i = 0, _len = allVolume.length; _i < _len; _i++) {
            v = allVolume[_i];
            if (v.get('owner') === lc) {
              if (v.get('name') === device_name) {
                v.set('volumeSize', value);
                break;
              }
            }
          }
        } else {
          volume.set('volumeSize', value);
        }
        return null;
      },
      setVolumeType: function(type, iops) {
        var volume;
        volume = Design.instance().component(this.get("uid"));
        volume.set({
          'volumeType': type,
          'iops': iops
        });
        return null;
      },
      setEncrypted: function(value) {
        var uid, volume;
        uid = this.get("uid");
        volume = Design.instance().component(uid);
        if (!volume) {

        } else {
          volume.set('encrypted', value);
        }
        return null;
      },
      genFullName: function(name) {
        if (comp.name[0] !== '/') {
          if (comp.name === "xvd" + name) {
            return true;
          }
        } else if (comp.name.indexOf(name) !== -1) {
          return true;
        }
      },
      isDuplicate: function(name) {
        var allVolume, device_name, lc, lcUid, realuid, uid, v, volume, volumeModel, _i, _len;
        uid = this.get("uid");
        volume = Design.instance().component(uid);
        volumeModel = Design.modelClassForType(constant.RESTYPE.VOL);
        allVolume = volumeModel && volumeModel.allObjects() || [];
        if (!volume) {
          realuid = uid.split('_');
          device_name = realuid[2];
          lcUid = realuid[0];
          lc = Design.instance().component(lcUid);
          for (_i = 0, _len = allVolume.length; _i < _len; _i++) {
            v = allVolume[_i];
            if (v.get('owner') === lc) {
              volume = v;
              break;
            }
          }
        }
        return _.some(allVolume, function(v) {
          var fullName;
          fullName = v.genFullName(name);
          if (v !== volume && v.get('name') === fullName) {
            return true;
          }
        });
      }
    });
    return new VolumeModel();
  });

}).call(this);

define('workspaces/awseditor/property/volume/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <label for=\"volume-device\">xvd</label>\n            <input class=\"input input-device\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.editName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"volume-device\" data-ignore=\"true\" data-required-rollback=\"true\" maxlength=\"1\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n            ";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return "disabled";
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <label for=\"volume-device\">/dev/</label>\n            <input class=\"input input-device\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.editName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"volume-device\" data-ignore=\"true\" data-required-rollback=\"true\" maxlength=\"5\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n            ";
  return buffer;
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group\">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SNAPSHOT", {hash:{},data:data}))
    + "</label>\n        <div id=\"snapshot-info-group\" class=\"clearfix property-block-wrap\" data-uid='"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.snapshot_id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "'>\n            <div>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.snapshot_id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " <span class=\"mgl5\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.snapshot_size)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "GB</span></div>\n            <div><span>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.snapshot_desc)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n        </div>\n    </section>\n    ";
  return buffer;
  }

function program8(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

function program10(depth0,data) {
  
  var buffer = "";
  buffer += "class=\"tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_MSG_WARN", {hash:{},data:data}))
    + "\"";
  return buffer;
  }

function program12(depth0,data) {
  
  
  return "style=\"display:none\"";
  }

function program14(depth0,data) {
  
  
  return "style=\"display:block\"";
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <input id=\"iops-ranged\" type=\"text\" class=\"input\" value=\"100\" name=\"iops-ranged\" min=\"100\" max=\"2000\" required=\"\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n            ";
  return buffer;
  }

function program18(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <input class=\"input\" id=\"iops-ranged\" type=\"text\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"iops-ranged\" min=\"100\" max=\"2000\" required=\"\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n            ";
  return buffer;
  }

function program20(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group\">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ENCRYPTED", {hash:{},data:data}))
    + "</label>\n        <div>\n            <div class=\"checkbox\">\n                <input id=\"volume-property-encrypted-check\" type=\"checkbox\" ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.support_encrypted), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.encrypted), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n                <label for=\"volume-property-encrypted-check\"></label>\n            </div>\n            <label for=\"volume-property-encrypted-check\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ENCRYPTED_LABEL", {hash:{},data:data}))
    + "</label>\n        </div>\n    </section>\n    ";
  return buffer;
  }
function program21(depth0,data) {
  
  
  return "disabled=\"disabled\"";
  }

function program23(depth0,data) {
  
  
  return "checked=\"checked\" ";
  }

  buffer += "<article id='property-panel-volume' data-bind=\"true\" data-focus=\"none\">\n    <section class=\"property-control-group\">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_DEVICE_NAME", {hash:{},data:data}))
    + "</label>\n        <div class=\"name\">\n            ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.isWin), {hash:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </div>\n    </section>\n    <section class=\"property-control-group\">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SIZE", {hash:{},data:data}))
    + "</label>\n        <div class=\"ranged-number-input\">\n            <label for=\"volume-size-ranged\"></label>\n            <input id=\"volume-size-ranged\" type=\"text\" class=\"input\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.volume_size)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"volume-size-ranged\" data-ignore=\"true\" maxlength=\"4\" data-required=\"true\" data-required=\"true\" data-type=\"number\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n        <label for=\"volume-property-ranged-number\" >GB</label>\n        </div>\n    </section>\n\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.snapshot_id), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    <section class=\"property-control-group\">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE", {hash:{},data:data}))
    + "</label>\n        <div class=\"context\" id=\"volume-type-radios\">\n\n            <div>\n                <div class=\"radio\">\n                    <input id=\"radio-standard\" type=\"radio\" name=\"volume-type\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.isStandard), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"standard\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n                    <label for=\"radio-standard\"></label>\n                </div>\n                <label for=\"radio-standard\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE_STANDARD", {hash:{},data:data}))
    + "</label>\n            </div>\n\n            <div>\n                <div class=\"radio\">\n                    <input id=\"radio-gp2\" type=\"radio\" name=\"volume-type\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.isGp2), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"gp2\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n                    <label for=\"radio-gp2\"></label>\n                </div>\n                <label for=\"radio-gp2\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE_GP2", {hash:{},data:data}))
    + "</label>\n            </div>\n\n            <div ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.iopsDisabled), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n                <div class=\"radio\">\n                    <input id=\"radio-io1\" type=\"radio\" name=\"volume-type\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.isIo1), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"io1\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.iopsDisabled), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n                    <label for=\"radio-io1\"></label>\n                </div>\n                <label for=\"radio-io1\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE_IO1", {hash:{},data:data}))
    + "</label>\n            </div>\n\n        </div>\n    </section>\n\n    <section class=\"property-control-group\" id=\"iops-group\" ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.isIo1), {hash:{},inverse:self.program(14, program14, data),fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n        <label>IOPS</label>\n        <div class=\"ranged-number-input\">\n            <label for=\"iops-ranged\"></label>\n            ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.isStandard), {hash:{},inverse:self.program(18, program18, data),fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <label for=\"volume-property-ranged-number\" ></label>\n        </div>\n    </section>\n\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.volume_detail)),stack1 == null || stack1 === false ? stack1 : stack1.displayEncrypted), {hash:{},inverse:self.noop,fn:self.program(20, program20, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/volume/view',['../base/view', './template/stack', 'event', 'i18n!/nls/lang.js'], function(PropertyView, template, ide_event, lang) {
    var VolumeView;
    VolumeView = PropertyView.extend({
      events: {
        'click #volume-type-radios input': 'volumeTypeChecked',
        'change #volume-device': 'deviceNameChanged',
        'keyup #volume-size-ranged': 'sizeChanged',
        'keyup  #volume-size-ranged': 'processIops',
        'keyup #iops-ranged': 'sizeChanged',
        'click #snapshot-info-group': 'showSnapshotDetail',
        'change #volume-property-encrypted-check': 'encryptedCheck'
      },
      render: function() {
        this.$el.html(template(_.extend({
          isAppEdit: this.model.isAppEdit
        }, this.model.toJSON())));
        $('#volume-size-ranged').parsley('custom', function(val) {
          val = +val;
          if (!val || val > 1024 || val < 1) {
            return lang.PARSLEY.VOLUME_SIZE_MUST_IN_1_1024;
          }
        });
        $('#iops-ranged').parsley('custom', function(val) {
          var volume_size;
          val = +val;
          volume_size = parseInt($('#volume-size-ranged').val(), 10);
          if (val > 4000 || val < 100) {
            return lang.PARSLEY.IOPS_MUST_BETWEEN_100_4000;
          } else if (val > 10 * volume_size) {
            return lang.PARSLEY.IOPS_MUST_BE_LESS_THAN_10_TIMES_OF_VOLUME_SIZE;
          }
        });
        return this.model.attributes.volume_detail.name;
      },
      volumeTypeChecked: function(event) {
        var iops, type;
        this.processIops();
        type = $('#volume-type-radios input:checked').val();
        iops = type === 'io1' ? $('#iops-ranged').val() : '';
        if (type !== 'io1') {
          $('#iops-group').hide();
        } else {
          $('#iops-group').show();
        }
        this.model.setVolumeType(type, iops);
        return this.sizeChanged();
      },
      deviceNameChanged: function(event) {
        var devicePrefix, name, self, target, type;
        target = $(event.currentTarget);
        name = target.val();
        devicePrefix = target.prev('label').text();
        type = devicePrefix === '/dev/' ? 'linux' : 'windows';
        self = this;
        target.parsley('custom', function(val) {
          if (!MC.validate.deviceName(val, type, true)) {
            if (type === 'linux') {
              return lang.PARSLEY.DEVICENAME_LINUX;
            } else {
              return lang.PARSLEY.DEVICENAME_WINDOWS;
            }
          }
          if (self.model.isDuplicate(val)) {
            return sprintf(lang.PARSLEY.VOLUME_NAME_INUSE, val);
          }
        });
        if (target.parsley('validate')) {
          this.model.setDeviceName(name);
          return this.setTitle(this.model.attributes.volume_detail.name);
        }
      },
      processIops: function(event) {
        var opsCheck, size;
        size = parseInt($('#volume-size-ranged').val(), 10);
        opsCheck = $('#radio-io1').is(':checked');
        if (size >= 10) {
          this.enableIops();
        } else if (!opsCheck) {
          this.disableIops();
        }
        return null;
      },
      enableIops: function() {
        return $('#volume-type-radios > div').last().data('tooltip', '').find('input').removeAttr('disabled');
      },
      disableIops: function() {
        return $('#volume-type-radios > div').last().data('tooltip', lang.PROP.VOLUME_DISABLE_IOPS_TOOLTIP).find('input').attr('disabled', '');
      },
      sizeChanged: function(event) {
        var iopsEnabled, iopsValidate, volumeSize, volumeValidate;
        volumeSize = parseInt($('#volume-size-ranged').val(), 10);
        iopsValidate = true;
        volumeValidate = $('#volume-size-ranged').parsley('validate');
        iopsEnabled = $('#radio-io1').is(':checked');
        if (iopsEnabled) {
          iopsValidate = $('#iops-ranged').parsley('validate');
        }
        if (volumeValidate && iopsValidate) {
          this.model.setVolumeSize(volumeSize);
          if (iopsEnabled) {
            this.model.setVolumeType('io1', $('#iops-ranged').val());
          }
        }
        return null;
      },
      showSnapshotDetail: function(event) {
        this.trigger("OPEN_SNAPSHOT", $("#snapshot-info-group").data("uid"));
        return null;
      },
      encryptedCheck: function(event) {
        this.model.setEncrypted(event.target.checked);
        return null;
      }
    });
    return new VolumeView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/volume/app_model',['../base/model', 'Design', 'CloudResources', 'constant'], function(PropertyModel, Design, CloudResources, constant) {
    var VolumeAppModel, getVolRes;
    getVolRes = function(volComp) {
      var appId, data, deviceName, instanceList, representMember, v, volume, volumeList, _i, _len, _ref, _ref1, _ref2;
      representMember = volComp.get('owner').groupMembers()[0];
      deviceName = volComp.get('name');
      appId = representMember.appId;
      instanceList = CloudResources(constant.RESTYPE.INSTANCE, Design.instance().region());
      volumeList = CloudResources(constant.RESTYPE.VOL, Design.instance().region());
      if (!instanceList) {
        return null;
      }
      data = (_ref = instanceList.get(appId)) != null ? _ref.toJSON() : void 0;
      if (data && data.blockDeviceMapping) {
        _ref1 = data.blockDeviceMapping;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          v = _ref1[_i];
          if (data.rootDeviceName.indexOf(v.deviceName) !== -1) {
            continue;
          }
          volume = (_ref2 = volumeList.get(v.ebs.volumeId)) != null ? _ref2.attributes : void 0;
          if (!volume) {
            continue;
          }
          if (volume.device !== deviceName) {
            continue;
          }
          return volume;
        }
      }
      return null;
    };
    VolumeAppModel = PropertyModel.extend({
      init: function(uid) {
        var appId, myVolumeComponent, volume;
        myVolumeComponent = Design.instance().component(uid);
        if (myVolumeComponent) {
          appId = myVolumeComponent.get("appId");
        } else {
          appId = uid;
        }
        if (!appId && myVolumeComponent.get('owner').type === constant.RESTYPE.LC) {
          volume = getVolRes(myVolumeComponent);
        } else {
          volume = CloudResources(constant.RESTYPE.VOL, Design.instance().region()).get(appId);
          volume = volume.attributes;
        }
        if (volume) {
          if (volume.attachmentSet) {
            volume.name = volume.attachmentSet[0].device;
          }
        } else {
          return false;
        }
        return this.set(volume);
      }
    });
    return new VolumeAppModel();
  });

}).call(this);

define('workspaces/awseditor/property/volume/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SNAPSHOT_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.snapshotId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    ";
  return buffer;
  }

function program3(depth0,data) {
  
  
  return "Encrypted";
  }

function program5(depth0,data) {
  
  
  return "Not Encrypted";
  }

function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dt>IOPS</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    ";
  return buffer;
  }

  buffer += "<article class=\"property-app\">\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.volumeId), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_DEVICE_NAME", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.name), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_STATE", {hash:{},data:data}))
    + "</dt>\n    <dd><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_CREATE_TIME", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.timeStr.call(depth0, (depth0 && depth0.createTime), {hash:{},data:data}))
    + "</dd>\n  </dl>\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.readableVt.call(depth0, (depth0 && depth0.volumeType), {hash:{},data:data}))
    + "</dd>\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.snapshotId), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SIZE", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.size), {hash:{},data:data}))
    + " GB</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ENCRYPTED", {hash:{},data:data}))
    + "</dt>\n    <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.encrypted), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.iops), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </dl>\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ATTACHMENT_STATE", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.attachmentSet)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.state), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_INSTANCE_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.attachmentSet)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.instanceId), {hash:{},data:data}))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ATTACHMENT_TIME", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.timeStr.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.attachmentSet)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.attachTime), {hash:{},data:data}))
    + "</dd>\n  </dl>\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/volume/app_view',['../base/view', './template/app'], function(PropertyView, template) {
    var VolumeView;
    VolumeView = PropertyView.extend({
      render: function() {
        this.$el.html(template(this.model.attributes));
        return this.model.attributes.name;
      }
    });
    return new VolumeView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/volume/main',["../base/main", "./model", "./view", "./app_model", "./app_view", "constant"], function(PropertyModule, model, view, app_model, app_view, constant) {
    var VolumeModule;
    VolumeModule = PropertyModule.extend({
      handleTypes: [constant.RESTYPE.VOL],
      setupStack: function() {
        this.view.on("OPEN_SNAPSHOT", function(id) {
          PropertyModule.loadSubPanel("STATIC", id);
          return null;
        });
        return null;
      },
      initStack: function(uid) {
        var owner, volume;
        volume = Design.instance().component(uid);
        owner = volume.get('owner');
        this.model = model;
        this.view = view;
        if (owner.type === constant.RESTYPE.LC && owner.get('appId')) {
          this.model.isAppEdit = true;
        } else {
          this.model.isAppEdit = false;
        }
        return null;
      },
      initApp: function() {
        this.model = app_model;
        this.view = app_view;
        return null;
      },
      initAppEdit: function() {
        this.model = app_model;
        this.view = app_view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/elb/model',['../base/model', "Design", 'constant', 'sslcert_dropdown', "CloudResources"], function(PropertyModel, Design, constant, SSLCertDropdown, CloudResources) {
    var ElbModel;
    ElbModel = PropertyModel.extend({
      init: function(uid) {
        var AzModel, allCertModelAry, ami, attr, az, azArr, azComp, component, connectedAzMap, currentSSLCert, filterFunc, i, pingArr, reg, replaceFunc, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        component = Design.instance().component(uid);
        this.getAppData(uid);
        attr = component != null ? component.toJSON() : void 0;
        attr.uid = uid;
        attr.isVpc = true;
        attr.description = component != null ? component.get("description") : void 0;
        pingArr = component.getHealthCheckTarget();
        attr.pingProtocol = pingArr[0];
        attr.pingPort = pingArr[1];
        attr.pingPath = pingArr[2];
        if (attr.sslCert) {
          attr.sslCert = (_ref = attr.sslCert) != null ? _ref.toJSON() : void 0;
        }
        _ref1 = attr.listeners;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          i = _ref1[_i];
          if (i.protocol === "SSL" || i.protocol === "HTTPS") {
            attr.showCert = true;
            break;
          }
        }
        if (!attr.isVpc) {
          AzModel = Design.modelClassForType(constant.RESTYPE.AZ);
          connectedAzMap = {};
          _ref2 = component.connectionTargets("ElbAmiAsso");
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            ami = _ref2[_j];
            if (ami.parent().type === constant.RESTYPE.ASG) {
              az = ami.parent().parent();
            } else {
              az = ami.parent();
            }
            connectedAzMap[az.get("name")] = true;
          }
          reg = /-[\w]/g;
          replaceFunc = function(g) {
            return " " + g[1].toUpperCase();
          };
          filterFunc = function(ch) {
            return ch.type === constant.RESTYPE.INSTANCE;
          };
          azArr = AzModel.allPossibleAZ();
          for (_k = 0, _len2 = azArr.length; _k < _len2; _k++) {
            az = azArr[_k];
            if (connectedAzMap[az.name]) {
              az.disabled = connectedAzMap[az.name];
              az.selected = true;
            } else {
              az.disabled = false;
              az.selected = attr.AvailabilityZones.indexOf(az.name) !== -1;
            }
            az.displayName = az.name.replace(reg, replaceFunc);
            az.displayName = az.displayName[0].toUpperCase() + az.displayName.substr(1);
            if (az.id) {
              azComp = Design.instance().component(az.id);
              az.instanceCount = _.filter(azComp.children(), filterFunc).length;
            }
          }
          attr.azArray = azArr;
        }
        currentSSLCert = component.connectionTargets("SslCertUsage")[0];
        allCertModelAry = Design.modelClassForType(constant.RESTYPE.IAM).allObjects();
        attr.noSSLCert = true;
        attr.sslCertItem = _.map(allCertModelAry, function(sslCertModel) {
          var disableCertEdit;
          if (currentSSLCert === sslCertModel) {
            attr.noSSLCert = false;
          }
          disableCertEdit = false;
          if (sslCertModel.get('certId') && sslCertModel.get('arn')) {
            disableCertEdit = true;
          }
          return {
            uid: sslCertModel.id,
            name: sslCertModel.get('name'),
            selected: currentSSLCert === sslCertModel,
            disableCertEdit: disableCertEdit
          };
        });
        if (attr.ConnectionDraining) {
          if (attr.ConnectionDraining.Enabled === true) {
            attr.connectionDrainingEnabled = true;
            attr.connectionDrainingTimeout = attr.ConnectionDraining.Timeout;
          } else {
            attr.connectionDrainingEnabled = false;
          }
        }
        this.set(attr);
        return null;
      },
      getAppData: function(uid) {
        var elb, myElbComponent;
        uid = uid || this.get("uid");
        myElbComponent = Design.instance().component(uid);
        elb = CloudResources(constant.RESTYPE.ELB, Design.instance().region()).get(myElbComponent.get('appId'));
        if (!elb) {
          return;
        }
        elb = elb.attributes;
        this.set({
          appData: true,
          isInternet: elb.Scheme === 'internet-facing',
          DNSName: elb.Dnsname,
          CanonicalHostedZoneNameID: elb.CanonicalHostedZoneNameID
        });
        return null;
      },
      setScheme: function(value) {
        value = value === "internal";
        Design.instance().component(this.get("uid")).setInternal(value);
        if (!value) {
          Design.modelClassForType(constant.RESTYPE.IGW).tryCreateIgw();
        }
        return null;
      },
      setElbCrossAZ: function(value) {
        Design.instance().component(this.get("uid")).set("crossZone", !!value);
        return null;
      },
      setHealthProtocol: function(value) {
        Design.instance().component(this.get("uid")).setHealthCheckTarget(value);
        return null;
      },
      setHealthPort: function(value) {
        Design.instance().component(this.get("uid")).setHealthCheckTarget(void 0, value);
        return null;
      },
      setHealthPath: function(value) {
        Design.instance().component(this.get("uid")).setHealthCheckTarget(void 0, void 0, value);
        return null;
      },
      setHealthInterval: function(value) {
        Design.instance().component(this.get("uid")).set("healthCheckInterval", value);
        return null;
      },
      setHealthTimeout: function(value) {
        Design.instance().component(this.get("uid")).set("healthCheckTimeout", value);
        return null;
      },
      setHealthUnhealth: function(value) {
        Design.instance().component(this.get("uid")).set("unHealthyThreshold", value);
        return null;
      },
      setHealthHealth: function(value) {
        Design.instance().component(this.get("uid")).set("healthyThreshold", value);
        return null;
      },
      setListener: function(idx, value) {
        Design.instance().component(this.get("uid")).setListener(idx, value);
        return null;
      },
      removeListener: function(idx) {
        Design.instance().component(this.get("uid")).removeListener(idx);
        return null;
      },
      setCert: function(value) {
        Design.instance().component(this.get("uid")).connectionTargets("SslCertUsage")[0].set(value);
        return null;
      },
      addCert: function(value) {
        var SslCertModel;
        SslCertModel = Design.modelClassForType(constant.RESTYPE.IAM);
        (new SslCertModel(value)).assignTo(Design.instance().component(this.get("uid")));
        return null;
      },
      removeCert: function(value) {
        Design.instance().component(value).remove();
        return null;
      },
      updateElbAZ: function(azArray) {
        Design.instance().component(this.get("uid")).set("AvailabilityZones", azArray);
        return null;
      },
      changeCert: function(certUID) {
        var cn, design, _i, _len, _ref;
        design = Design.instance();
        if (certUID) {
          design.component(certUID).assignTo(design.component(this.get("uid")));
        } else {
          _ref = design.component(this.get("uid")).connections("SslCertUsage");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cn = _ref[_i];
            cn.remove();
          }
        }
        return null;
      },
      updateCert: function(certUID, certObj) {
        Design.instance().component(certUID).updateValue(certObj);
        return null;
      },
      getOtherCertName: function(currentName) {
        var allCertModelAry, otherCertNameAry;
        allCertModelAry = Design.modelClassForType(constant.RESTYPE.IAM).allObjects();
        otherCertNameAry = [];
        _.each(allCertModelAry, function(sslCertModel) {
          var sslCertName;
          sslCertName = sslCertModel.get('name');
          if (currentName !== sslCertName) {
            return otherCertNameAry.push(sslCertName);
          }
        });
        return otherCertNameAry;
      },
      setConnectionDraining: function(enabled, timeout) {
        var elbModel;
        if (!enabled) {
          timeout = null;
        }
        elbModel = Design.instance().component(this.get("uid"));
        return elbModel.set('ConnectionDraining', {
          Enabled: enabled,
          Timeout: timeout
        });
      },
      setAdvancedProxyProtocol: function(enable, portAry) {
        var elbModel;
        elbModel = Design.instance().component(this.get("uid"));
        return elbModel.setPolicyProxyProtocol(enable, portAry);
      },
      initNewSSLCertDropDown: function(idx, $listenerItem) {
        var elbModel, sslCertDropDown, sslCertModel, that;
        that = this;
        elbModel = Design.instance().component(this.get("uid"));
        sslCertDropDown = new SSLCertDropdown();
        sslCertDropDown.uid = this.get('uid');
        sslCertDropDown.listenerNum = idx;
        sslCertModel = elbModel.getSSLCert(idx);
        if (sslCertModel) {
          sslCertDropDown.sslCertName = sslCertModel.get('name');
        }
        return sslCertDropDown;
      },
      setIdletimeout: function(value) {
        var elbModel;
        elbModel = Design.instance().component(this.get("uid"));
        return elbModel.set('idleTimeout', value);
      }
    });
    return new ElbModel();
  });

}).call(this);

define('workspaces/awseditor/property/elb/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dl class=\"dl-vertical property-app\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_SCHEME", {hash:{},data:data}))
    + "</dt>\n      <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isInternet), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_DNS_NAME", {hash:{},data:data}))
    + "</dt>\n      <dd>\n        <div class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_SELECT_ALL", {hash:{},data:data}))
    + "\">(A)"
    + escapeExpression(((stack1 = (depth0 && depth0.DNSName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        <div class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_SELECT_ALL", {hash:{},data:data}))
    + "\">(AAAA)ipv6."
    + escapeExpression(((stack1 = (depth0 && depth0.DNSName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        <div class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_SELECT_ALL", {hash:{},data:data}))
    + "\">(A/AAAA)dualstack."
    + escapeExpression(((stack1 = (depth0 && depth0.DNSName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n      </dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HOST_ZONE_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.CanonicalHostedZoneNameID)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<dd>\n    </dl>\n	";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_INTERNET_FACING", {hash:{},data:data}));
  }

function program4(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_INTERNAL", {hash:{},data:data}));
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<section class=\"property-control-group\">\n			<label class=\"left\" for=\"property-elb-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_NAME", {hash:{},data:data}))
    + "</label>\n			<span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_REQUIRED", {hash:{},data:data}))
    + "</span>\n			<input data-ignore=\"true\" data-required-rollback=\"true\" maxlength=\"17\" class=\"input elb-name\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-elb-name\"/>\n		</section>\n		";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isVpc), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	";
  return buffer;
  }
function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<section class=\"property-control-group\">\n      <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_SCHEME", {hash:{},data:data}))
    + "</label>\n      <div class=\"mgt5\">\n        <div class=\"radio\">\n            <input type=\"radio\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.internal), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"internet\" id=\"elb-scheme-select1\" name=\"elb-schema-select\"/>\n            <label for=\"elb-scheme-select1\"></label>\n        </div>\n        <label for=\"elb-scheme-select1\">Internet-facing</label>\n      </div>\n      <div class=\"mgt5\">\n        <div class=\"radio\">\n            <input type=\"radio\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.internal), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"internal\" id=\"elb-scheme-select2\" name=\"elb-schema-select\"/>\n            <label for=\"elb-scheme-select2\"></label>\n        </div>\n        <label for=\"elb-scheme-select2\">Internal</label>\n    	</div>\n		</section>\n		";
  return buffer;
  }
function program8(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

function program10(depth0,data) {
  
  
  return "hide";
  }

function program12(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = (depth0 && depth0.connectionDrainingTimeout)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program14(depth0,data) {
  
  
  return "300";
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<li class=\"elb-property-listener\">\n			<div class=\"elb-property-listener-item-remove icon-remove tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_REMOVE_LISTENER", {hash:{},data:data}))
    + "\"></div>\n\n			<div class=\"property-control-group listener-item clearfix\">\n				<div class=\"elb-property-listener-item-1\">\n					<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_LOAD_BALENCER_PROTOCOL", {hash:{},data:data}))
    + "</label>\n					<div class=\"selectbox elb-property-elb-protocol\">\n						<div class=\"selection\">"
    + escapeExpression(((stack1 = (depth0 && depth0.protocol)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n						<ul class=\"dropdown\">\n							<li data-id=\"HTTP\" class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.protocol), "HTTP", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">HTTP</li>\n							<li data-id=\"HTTPS\" class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.protocol), "HTTPS", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">HTTPS</li>\n							<li data-id=\"TCP\" class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.protocol), "TCP", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">TCP</li>\n							<li data-id=\"SSL\" class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.protocol), "SSL", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">SSL</li>\n						</ul>\n					</div>\n				</div>\n				<div class=\"elb-property-listener-item-2\">\n					<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.PORT", {hash:{},data:data}))
    + "</label>\n					<input class=\"input elb-property-elb-port tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_25_80_443OR1024TO65535", {hash:{},data:data}))
    + "\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.port)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-ignore=\"true\" data-required=\"true\" data-type=\"digits\" maxlength=\"5\"/>\n				</div>\n			</div>\n\n			<div class=\"property-control-group listener-item clearfix\">\n				<div class=\"left elb-property-listener-item-1\">\n					<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_INSTANCE_PROTOCOL", {hash:{},data:data}))
    + "</label>\n					<div class=\"selectbox elb-property-instance-protocol\">\n						<div class=\"selection\">"
    + escapeExpression(((stack1 = (depth0 && depth0.instanceProtocol)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n						<ul class=\"dropdown\">\n							<li data-id=\"HTTP\" class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.instanceProtocol), "HTTP", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">HTTP</li>\n							<li data-id=\"HTTPS\" class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.instanceProtocol), "HTTPS", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">HTTPS</li>\n							<li data-id=\"TCP\" class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.instanceProtocol), "TCP", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">TCP</li>\n							<li data-id=\"SSL\" class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.instanceProtocol), "SSL", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">SSL</li>\n						</ul>\n					</div>\n				</div>\n				<div class=\"left elb-property-listener-item-2\">\n					<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.PORT", {hash:{},data:data}))
    + "</label>\n					<input class=\"input elb-property-instance-port tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_1_65535", {hash:{},data:data}))
    + "\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.instancePort)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-ignore=\"true\" data-required=\"true\" data-type=\"digits\" maxlength=\"5\"/>\n				</div>\n			</div>\n\n			<div class=\"property-control-group sslcert-select clearfix\">\n				<label for=\"sslcert-placeholder\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_SERVER_CERTIFICATE", {hash:{},data:data}))
    + "</label>\n				<div class=\"sslcert-placeholder\"></div>\n			</div>\n		</li>\n		";
  return buffer;
  }
function program17(depth0,data) {
  
  
  return "selected";
  }

function program19(depth0,data) {
  
  
  return " selected";
  }

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n								<li class=\"item";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.uid)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n									"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.disableCertEdit), {hash:{},inverse:self.noop,fn:self.program(22, program22, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "<span class=\"icon-remove\"></span>\n								</li>\n							";
  return buffer;
  }
function program22(depth0,data) {
  
  
  return "<span class=\"icon-edit\"></span>";
  }

function program24(depth0,data) {
  
  
  return "disabled=\"disabled\"";
  }

function program26(depth0,data) {
  
  var buffer = "";
  buffer += "\n	<div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n	<div class=\"option-group sg-group\"></div>\n\n	";
  return buffer;
  }

function program28(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.azArray), {hash:{},inverse:self.noop,fn:self.program(29, program29, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	";
  return buffer;
  }
function program29(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"option-group-head\"> "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_AVAILABILITY_ZONE", {hash:{},data:data}))
    + " </div>\n		<div class=\"option-group\" id=\"property-elb-az-cb-group\">\n			";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.azArray), {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</div>\n		";
  return buffer;
  }
function program30(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<section class=\"property-control-group\">\n				<div class=\"checkbox\">\n					<input class=\"property-elb-az-checkbox\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.disabled), {hash:{},inverse:self.noop,fn:self.program(24, program24, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " data-name=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-elb-az-"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"/>\n					<label for=\"property-elb-az-"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></label>\n				</div>\n				<label for=\"property-elb-az-"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"checkbox-label-main\">\n					<span>"
    + escapeExpression(((stack1 = (depth0 && depth0.displayName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></label>\n				<label for=\"property-elb-az-"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"checkbox-label-minor\">"
    + escapeExpression(((stack1 = (depth0 && depth0.instanceCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " instances</label>\n			</section>\n			";
  return buffer;
  }

  buffer += "<article id=\"stack-elb-property-panel\">\n\n	<div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_DETAILS", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\" data-bind=\"true\" >\n	";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.appData), {hash:{},inverse:self.program(6, program6, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		<section class=\"property-control-group\" data-bind=\"true\">\n		<label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n		<textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n		</section>\n		<section class=\"property-control-group\">\n			<div class=\"checkbox\">\n				<input id=\"elb-cross-az-select\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.crossZone), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n				<label for=\"elb-cross-az-select\"></label>\n			</div>\n			<label for=\"elb-cross-az-select\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_ENABLE_CROSS_ZONE_BALANCING", {hash:{},data:data}))
    + "</label>\n			<a class=\"elb-info-icon tooltip icon-info\" href=\"https://aws.amazon.com/about-aws/whats-new/2013/11/06/elastic-load-balancing-adds-cross-zone-load-balancing/\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_READ_RELATED_AWS_DOCUMENT", {hash:{},data:data}))
    + "\" target=\"_blank\"></a>\n		</section>\n		<section class=\"property-control-group\">\n			<div class=\"checkbox\">\n				<input id=\"elb-connection-draining-select\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.connectionDrainingEnabled), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n				<label for=\"elb-connection-draining-select\"></label>\n			</div>\n			<label for=\"elb-connection-draining-select\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_CONNECTION_DRAINING", {hash:{},data:data}))
    + "</label>\n			<a class=\"elb-info-icon tooltip icon-info\" href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/config-conn-drain.html\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_READ_RELATED_AWS_DOCUMENT", {hash:{},data:data}))
    + "\" target=\"_blank\"></a>\n			<div class=\"elb-connection-draining-input-group ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.connectionDrainingEnabled), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n				<label for=\"elb-connection-draining-input\" class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_CONNECTION_TIMEOUT", {hash:{},data:data}))
    + "</label>\n				<input id=\"elb-connection-draining-input\" class=\"input parsley-validated\" type=\"text\" value=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.connectionDrainingTimeout), {hash:{},inverse:self.program(14, program14, data),fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-ignore=\"true\" data-required=\"true\" data-type=\"number\">\n				<label for=\"elb-connection-draining-input\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_CONNECTION_SECONDS", {hash:{},data:data}))
    + "</label>\n			</div>\n		</section>\n		<section class=\"property-control-group\">\n			<label for=\"property-elb-idle-timeout\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_IDLE_TIMEOUT", {hash:{},data:data}))
    + "</label>\n			<input class=\"input input-short mgt5\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.idleTimeout)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"property-elb-idle-timeout\" id=\"property-elb-idle-timeout\" data-required=\"true\" data-type=\"digits\" data-min=\"1\" data-max=\"3600\" data-ignore=\"true\"/>\n			<label class=\"elb-property-right-text\" for=\"property-elb-idle-timeout\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_INTERVAL_SECONDS", {hash:{},data:data}))
    + "</label>\n		</section>\n	</div>\n\n	<!--\n	<div class=\"option-group-head\">Advanced Configuration</div>\n	<div class=\"option-group\" data-bind=\"true\"> <ul id=\"elb-property-listener-list\" class=\"property-list\">\n		<section class=\"property-control-group\">\n			<label>Proxy Protocol</label>\n			<div class=\"mgt5\">\n				<div class=\"checkbox\">\n					<input id=\"elb-advanced-proxy-protocol-select\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.otherPoliciesMap)),stack1 == null || stack1 === false ? stack1 : stack1.EnableProxyProtocol), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n					<label for=\"elb-advanced-proxy-protocol-select\"></label>\n				</div>\n				<label for=\"elb-advanced-proxy-protocol-select\">Enable Proxy Protocol</label>\n				<div id=\"elb-advanced-proxy-protocol-select-tip\" class=\"property-info ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.otherPoliciesMap)),stack1 == null || stack1 === false ? stack1 : stack1.EnableProxyProtocol), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">If you have a Proxy Protocol enabled proxy server in front of your load balancer, then you must not enable Proxy Protocol on your load balancer.</div>\n			</div>\n		</section>\n	</div>\n	-->\n\n	<div class=\"option-group-head\"> "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_LISTENER_DETAIL", {hash:{},data:data}))
    + " </div>\n	<div class=\"option-group\" data-bind=\"true\"> <ul id=\"elb-property-listener-list\" class=\"property-list\">\n		";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.listeners), {hash:{},inverse:self.noop,fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</ul>\n		<a href=\"#\" id=\"elb-property-listener-content-add\" class=\"add-to-list action-link\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_BTN_ADD_LISTENER", {hash:{},data:data}))
    + "</a>\n<!-- 		<section class=\"property-control-group\" id=\"property-control-group-cert-setting\">\n			<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_SERVER_CERTIFICATE", {hash:{},data:data}))
    + "</label>\n			<div class=\"selectbox\" id=\"sslcert-select\">\n				<div class=\"selection\"></div>\n				<div style=\"height: 120px; width:260px;\" class=\"dropdown scroll-wrap scrollbar-auto-hide  clearfix\">\n					<div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n					<div class=\"scroll-content\">\n						<ul>\n							<li class=\"item";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.noSSLCert), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">None</li>\n							";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.sslCertItem), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n						</ul>\n					</div>\n				</div>\n				<div class=\"editor\">\n					<a href=\"#\" class=\"editbtn\">Add New Certificate...</a>\n				</div>\n			</div>\n		</section> -->\n	</div>\n\n	<div class=\"option-group-head\"> "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_DETAILS", {hash:{},data:data}))
    + " </div>\n	<div class=\"option-group\" data-bind=\"true\" data-validate=\"parsley\" >\n		<section class=\"property-control-group\">\n			<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_PING_PROTOCOL", {hash:{},data:data}))
    + "</label>\n			<div class=\"selectbox mgt5\" id=\"elb-property-health-protocol-select\">\n				<div class=\"selection\">"
    + escapeExpression(((stack1 = (depth0 && depth0.pingProtocol)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n				<ul class=\"dropdown\" tabindex=\"-1\">\n					<li class=\"item";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.pingProtocol), "TCP", {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"TCP\">TCP</li>\n					<li class=\"item";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.pingProtocol), "HTTP", {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"HTTP\">HTTP</li>\n					<li class=\"item";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.pingProtocol), "HTTPS", {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"HTTPS\">HTTPS</li>\n					<li class=\"item";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.pingProtocol), "SSL", {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"SSL\">SSL</li>\n				</ul>\n			</div>\n		</section>\n		<section class=\"property-control-group\" data-bind=\"true\">\n			<label for=\"property-elb-health-port\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_PING_PORT", {hash:{},data:data}))
    + "</label>\n			<input class=\"input mgt5\" tooltip=\"1-65535\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.pingPort)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"property-elb-health-port\" id=\"property-elb-health-port\" data-required=\"true\" data-type=\"digits\" data-ignore=\"true\" maxlength=\"5\"/>\n		</section>\n		<section class=\"property-control-group\">\n			<label for=\"property-elb-health-path\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_PING_PATH", {hash:{},data:data}))
    + "</label>\n			<div class=\"pos-r mgt5\">\n				<input class=\"input\" ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.pingProtocol), "SSL", {hash:{},inverse:self.noop,fn:self.program(24, program24, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.pingProtocol), "TCP", {hash:{},inverse:self.noop,fn:self.program(24, program24, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.pingPath)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"property-elb-health-path\" id=\"property-elb-health-path\" />\n				<span class=\"elb-pingpath-prefix\">/</span>\n			</div>\n		</section>\n\n		<section class=\"property-control-group\">\n			<label for=\"property-elb-health-interval\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_INTERVAL", {hash:{},data:data}))
    + "</label>\n			<input class=\"input input-short mgt5\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.healthCheckInterval)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"property-elb-health-interval\" id=\"property-elb-health-interval\" data-required=\"true\" data-type=\"digits\" data-ignore=\"true\"/>\n			<label class=\"elb-property-right-text\" for=\"property-elb-health-interval\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_INTERVAL_SECONDS", {hash:{},data:data}))
    + "</label>\n		</section>\n		<section class=\"property-control-group\">\n			<label for=\"property-elb-health-timout\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_RESPOND_TIMEOUT", {hash:{},data:data}))
    + "</label>\n			<input class=\"input input-short mgt5\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.healthCheckTimeout)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"property-elb-health-timeout\" id=\"property-elb-health-timeout\" data-required=\"true\" data-type=\"digits\" data-ignore=\"true\"/>\n			<label class=\"elb-property-right-text\" for=\"property-elb-health-timeout\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_INTERVAL_SECONDS", {hash:{},data:data}))
    + "</label>\n		</section>\n\n		<section class=\"property-control-group\">\n			<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_UNHEALTH_THRESHOLD", {hash:{},data:data}))
    + "</label>\n			<div class=\"slider\" id=\"elb-property-slider-unhealthy\">\n				<a class=\"thumb\"></a>\n				<ul class=\"marker\"><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ul>\n			</div>\n		</section>\n		<section class=\"property-control-group\">\n			<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_THRESHOLD", {hash:{},data:data}))
    + "</label>\n			<div class=\"slider\" id=\"elb-property-slider-healthy\">\n				<a class=\"thumb\"></a>\n				<ul class=\"marker\"><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ul>\n			</div>\n		</section>\n	</div>\n\n	";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isVpc), {hash:{},inverse:self.program(28, program28, data),fn:self.program(26, program26, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/property/elb/view',['../base/view', './template/stack', 'event', 'i18n!/nls/lang.js'], function(PropertyView, template, ide_event, lang) {
    var ElbView, Helper;
    Helper = {
      makeInRange: function(value, range, $target, deflt) {
        var begin, end;
        begin = range[0];
        end = range[1];
        if (isFinite(value)) {
          value = +value;
          if (value < begin) {
            value = begin;
          } else if (value > end) {
            value = end;
          }
        } else {
          value = deflt;
        }
        $target.val(value);
        return value;
      }
    };
    ElbView = PropertyView.extend({
      events: {
        'keyup #property-elb-name': 'elbNameChange',
        'change #property-res-desc': 'onChangeDesc',
        'change #elb-scheme-select1': "schemeSelectChange",
        'change #elb-scheme-select2': "schemeSelectChange",
        'OPTION_CHANGE #elb-property-health-protocol-select': "healthProtocolSelect",
        'change #property-elb-health-port': 'healthPortChanged',
        'change #property-elb-health-path': 'healthPathChanged',
        'change #property-elb-health-interval': 'healthIntervalChanged',
        'change #property-elb-health-timeout': 'healthTimeoutChanged',
        'OPTION_CHANGE .elb-property-elb-protocol': 'protocolChanged',
        'OPTION_CHANGE .elb-property-instance-protocol': 'protocolChanged',
        'change .elb-property-elb-port': 'portChanged',
        'change .elb-property-instance-port': 'portChanged',
        'click #elb-property-listener-content-add': 'listenerItemAddClicked',
        'click .elb-property-listener-item-remove': 'listenerItemRemovedClicked',
        'change #elb-property-cert-name-input': 'listenerCertChanged',
        'change #elb-property-cert-privatekey-input': 'listenerCertChanged',
        'change #elb-property-cert-publickey-input': 'listenerCertChanged',
        'change #elb-property-cert-chain-input': 'listenerCertChanged',
        'change .property-elb-az-checkbox': 'azCheckChanged',
        'mousedown .slider .thumb': "sliderMouseDown",
        'mousedown .slider li': "sliderSelect",
        'SLIDER_CHANGE .slider': 'sliderChanged',
        'change #elb-cross-az-select': 'elbCrossAZSelect',
        'click .editbtn': 'elbSSLCertAdd',
        'click #sslcert-select .item': 'changeSSLCert',
        'click #sslcert-select .item .icon-edit': 'elbSSLCertEdit',
        'click #sslcert-select .item .icon-remove': 'elbSSLCertRemove',
        'click #elb-connection-draining-select': 'elbConnectionDrainSelectChange',
        'change #elb-connection-draining-input': 'elbConnectionDrainTimeoutChange',
        'click #elb-advanced-proxy-protocol-select': 'elbAdvancedProxyProtocolSelectChange',
        'change #property-elb-idle-timeout': 'elbIdleTimeoutChange'
      },
      render: function() {
        var that;
        that = this;
        this.$el.html(template(this.model.attributes));
        this.updateSlider($('#elb-property-slider-unhealthy'), this.model.get('unHealthyThreshold') - 2);
        this.updateSlider($('#elb-property-slider-healthy'), this.model.get('healthyThreshold') - 2);
        _.each(this.$('.sslcert-placeholder'), function(sslCertPlaceHolder, idx) {
          var $listenerItem, $sslCertPlaceHolder, sslCertDropDown;
          $sslCertPlaceHolder = $(sslCertPlaceHolder);
          $listenerItem = $sslCertPlaceHolder.parents('.elb-property-listener');
          sslCertDropDown = that.model.initNewSSLCertDropDown(idx);
          $listenerItem.data('sslCertDropDown', sslCertDropDown);
          return $sslCertPlaceHolder.html(sslCertDropDown.render().el);
        });
        this.updateCertView();
        return this.model.attributes.name;
      },
      elbNameChange: function(event) {
        var name, newName, oldName, target;
        target = $(event.currentTarget);
        name = target.val();
        oldName = this.model.get("name");
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "Load Balancer")) {
          this.model.setName(name);
          this.setTitle(name);
          oldName += "-sg";
          newName = name + "-sg";
          return $("#sg-info-list").children().each(function() {
            var $name;
            $name = $(this).find(".sg-name");
            if ($name.text() === oldName) {
              $name.text(newName);
              return false;
            }
          });
        }
      },
      onChangeDesc: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      schemeSelectChange: function(event) {
        this.model.setScheme(event.currentTarget.value);
        return null;
      },
      healthProtocolSelect: function(event, value) {
        if (value === "TCP" || value === "SSL") {
          $('#property-elb-health-path').attr('disabled', 'disabled');
        } else {
          $('#property-elb-health-path').removeAttr('disabled');
        }
        return this.model.setHealthProtocol(value);
      },
      healthPortChanged: function(event) {
        var $target, value;
        $target = $(event.currentTarget);
        value = $target.val();
        value = Helper.makeInRange(value, [1, 65535], $target, 1);
        return this.model.setHealthPort(value);
      },
      healthPathChanged: function(event) {
        return this.model.setHealthPath($(event.currentTarget).val());
      },
      healthIntervalChanged: function(event) {
        var $target, $timeoutDom, value;
        $target = $(event.currentTarget);
        value = Helper.makeInRange($target.val(), [5, 300], $target, 30);
        $timeoutDom = $('#property-elb-health-timeout');
        $target.parsley('custom', function(val) {
          var intervalValue, timeoutValue;
          intervalValue = Number(val);
          timeoutValue = Number($timeoutDom.val());
          if (intervalValue <= timeoutValue) {
            return lang.PROP.ELB_HEALTH_INTERVAL_VALID;
          }
          return null;
        });
        if (!$target.parsley('validate')) {
          return;
        } else {
          $timeoutDom.parsley('validate');
        }
        return this.model.setHealthInterval(value);
      },
      healthTimeoutChanged: function(event) {
        var $intervalDom, $target, value;
        $target = $(event.currentTarget);
        value = Helper.makeInRange($target.val(), [2, 60], $target, 5);
        $intervalDom = $('#property-elb-health-interval');
        $target.parsley('custom', function(val) {
          var intervalValue, timeoutValue;
          intervalValue = Number($intervalDom.val());
          timeoutValue = Number(val);
          if (intervalValue <= timeoutValue) {
            return lang.PROP.ELB_HEALTH_INTERVAL_VALID;
          }
          return null;
        });
        if (!$target.parsley('validate')) {
          return;
        } else {
          $intervalDom.parsley('validate');
        }
        return this.model.setHealthTimeout(value);
      },
      elbIdleTimeoutChange: function(event) {
        var $target;
        $target = $(event.currentTarget);
        if ($target.parsley('validate')) {
          return this.model.setIdletimeout(Number($target.val()));
        }
      },
      sliderChanged: function(event, value) {
        var id, target;
        target = $(event.target);
        id = event.target.id;
        value += 2;
        if (id === 'elb-property-slider-unhealthy') {
          return this.model.setHealthUnhealth(value);
        } else {
          return this.model.setHealthHealth(value);
        }
      },
      listenerItemAddClicked: function(event) {
        var $li, $listenerItem, $portInput, $selectbox, $sslCertPlaceHolder, sslCertDropDown, that;
        that = this;
        $li = $("#elb-property-listener-list").children().eq(0).clone();
        $selectbox = $li.find("ul");
        $portInput = $li.find('input.input');
        $portInput.val('80');
        $selectbox.children(".selected").removeClass("selected");
        $selectbox.children(":first-child").addClass("selected");
        $selectbox.prev(".selection").text("HTTP");
        $('#elb-property-listener-list').append($li);
        this.updateListener($li);
        $sslCertPlaceHolder = $li.find('.sslcert-placeholder');
        $listenerItem = $sslCertPlaceHolder.parents('.elb-property-listener');
        sslCertDropDown = that.model.initNewSSLCertDropDown($li.index());
        $listenerItem.data('sslCertDropDown', sslCertDropDown);
        $sslCertPlaceHolder.html(sslCertDropDown.render().el);
        return false;
      },
      updateListener: function($li) {
        var obj;
        obj = {
          port: $li.find(".elb-property-elb-port").val(),
          protocol: $li.find(".elb-property-elb-protocol .selected").text(),
          instancePort: $li.find(".elb-property-instance-port").val(),
          instanceProtocol: $li.find(".elb-property-instance-protocol .selected").text()
        };
        this.model.setListener($li.index(), obj);
        this.updateCertView();
        return null;
      },
      protocolChanged: function(event) {
        var $allSelectItem, $protocol, $selectProtocol, currentPtotocol, layerMap, newOtherProtocol, otherProtocol, otherProtocolElem, parentItemElem, portElem, thatElem, value;
        $protocol = $(event.currentTarget);
        if (event) {
          thatElem = $(event.target);
          value = thatElem.find('.selection').text();
          if (value) {
            portElem = null;
            otherProtocolElem = null;
            parentItemElem = thatElem.parents('.elb-property-listener');
            if (thatElem.hasClass('elb-property-elb-protocol')) {
              portElem = parentItemElem.find('.elb-property-elb-port');
              otherProtocolElem = parentItemElem.find('.elb-property-instance-protocol');
            } else {
              portElem = parentItemElem.find('.elb-property-instance-port');
              otherProtocolElem = parentItemElem.find('.elb-property-elb-protocol');
            }
            if (value === 'HTTPS' || value === 'SSL') {
              portElem.val('443');
            } else {
              portElem.val('80');
            }
            layerMap = {
              'HTTP': 'application',
              'HTTPS': 'application',
              'TCP': 'transport',
              'SSL': 'transport'
            };
            currentPtotocol = value;
            otherProtocol = otherProtocolElem.find('.selection').text();
            if (layerMap[currentPtotocol] !== layerMap[otherProtocol]) {
              otherProtocolElem.find('.selection').text(currentPtotocol);
              $allSelectItem = otherProtocolElem.find('.item');
              $allSelectItem.removeClass('selected');
              $selectProtocol = otherProtocolElem.find("[data-id=" + currentPtotocol + "]");
              $selectProtocol.addClass('selected');
            }
            if (otherProtocolElem.hasClass('elb-property-elb-protocol')) {
              portElem = parentItemElem.find('.elb-property-elb-port');
            } else {
              portElem = parentItemElem.find('.elb-property-instance-port');
            }
            newOtherProtocol = otherProtocolElem.find('.selection').text();
            if (newOtherProtocol === 'HTTPS' || newOtherProtocol === 'SSL') {
              portElem.val('443');
            } else {
              portElem.val('80');
            }
          }
        }
        this.updateListener($protocol.closest("li"));
        return null;
      },
      portChanged: function(event) {
        var $input, validate;
        $input = $(event.currentTarget);
        if ($input.hasClass("elb-property-elb-port")) {
          validate = function(val) {
            val = parseInt(val, 10);
            if (!(val === 25 || val === 80 || val === 443 || ((1023 < val && val < 65536)))) {
              return lang.PARSLEY.LOAD_BALANCER_PORT_MUST_BE_SOME_PROT;
            }
          };
        } else {
          validate = function(val) {
            val = parseInt(val, 10);
            if (!((0 < val && val < 65536))) {
              return lang.PARSLEY.INSTANCE_PORT_MUST_BE_BETWEEN_1_AND_65535;
            }
          };
        }
        $input.parsley("custom", validate);
        if ($input.parsley("validate")) {
          this.updateListener($input.closest("li"));
        }
        return null;
      },
      listenerItemChanged: function(event) {
        var currentPtotocol, hasValidateError, isShowCertPanel, layerMap, listenerAry, listenerContainerElem, listenerItemElem, me, newOtherProtocol, otherProtocol, otherProtocolElem, parentItemElem, portElem, thatElem, value;
        if (event) {
          thatElem = $(event.target);
          value = thatElem.find('.selection').text();
          if (value) {
            portElem = null;
            otherProtocolElem = null;
            parentItemElem = thatElem.parents('.elb-property-listener-main');
            if (thatElem.hasClass('elb-property-listener-elb-protocol-select')) {
              portElem = parentItemElem.find('.elb-property-listener-elb-port-input');
              otherProtocolElem = parentItemElem.find('.elb-property-listener-instance-protocol-select');
            } else {
              portElem = parentItemElem.find('.elb-property-listener-instance-port-input');
              otherProtocolElem = parentItemElem.find('.elb-property-listener-elb-protocol-select');
            }
            if (value === 'HTTPS' || value === 'SSL') {
              portElem.val('443');
            } else {
              portElem.val('80');
            }
            layerMap = {
              'HTTP': 'application',
              'HTTPS': 'application',
              'TCP': 'transport',
              'SSL': 'transport'
            };
            currentPtotocol = value;
            otherProtocol = otherProtocolElem.find('.selection').text();
            if (layerMap[currentPtotocol] !== layerMap[otherProtocol]) {
              otherProtocolElem.find('.selection').text(currentPtotocol);
            }
            if (otherProtocolElem.hasClass('elb-property-listener-elb-protocol-select')) {
              portElem = parentItemElem.find('.elb-property-listener-elb-port-input');
            } else {
              portElem = parentItemElem.find('.elb-property-listener-instance-port-input');
            }
            newOtherProtocol = otherProtocolElem.find('.selection').text();
            if (newOtherProtocol === 'HTTPS' || newOtherProtocol === 'SSL') {
              portElem.val('443');
            } else {
              portElem.val('80');
            }
          }
        }
        me = this;
        listenerContainerElem = $('#accordion-group-elb-property-listener');
        listenerItemElem = listenerContainerElem.find('.elb-property-listener-main');
        listenerAry = [];
        isShowCertPanel = false;
        hasValidateError = false;
        listenerItemElem.each(function(index, elem) {
          var elbPort, elbPortValue, elbProtocolValue, instancePort, instancePortValue, instanceProtocolValue, newItemObj, that;
          that = $(this);
          elbProtocolValue = $.trim(that.find('.elb-property-listener-elb-protocol-select .selection').text());
          elbPortValue = that.find('.elb-property-listener-elb-port-input').val();
          instanceProtocolValue = $.trim(that.find('.elb-property-listener-instance-protocol-select .selection').text());
          instancePortValue = that.find('.elb-property-listener-instance-port-input').val();
          elbPort = that.find('.elb-property-listener-elb-port-input');
          instancePort = that.find('.elb-property-listener-instance-port-input');
          if (elbPortValidate && instancePortValidate && !isNaN(parseInt(elbPortValue, 10)) && !isNaN(parseInt(instancePortValue, 10))) {
            newItemObj = {
              Listener: {
                "LoadBalancerPort": elbPortValue,
                "InstanceProtocol": instanceProtocolValue,
                "Protocol": elbProtocolValue,
                "SSLCertificateId": "",
                "InstancePort": instancePortValue
              },
              PolicyNames: ''
            };
            listenerAry.push(newItemObj);
          }
          if (elbProtocolValue === 'HTTPS' || elbProtocolValue === 'SSL') {
            isShowCertPanel = true;
          }
          return null;
        });
        this.model.setListenerAry(idx, listener);
        this.updateCertView();
        return null;
      },
      listenerItemRemovedClicked: function(event) {
        var $li;
        $li = $(event.currentTarget).closest("li");
        this.model.removeListener($li.index());
        $li.remove();
        this.updateCertView();
        return false;
      },
      listenerCertChanged: function(event) {
        this.model.setCert({
          name: $('#elb-property-cert-name-input').val(),
          key: $('#elb-property-cert-privatekey-input').val(),
          body: $('#elb-property-cert-publickey-input').val(),
          chain: $('#elb-property-cert-chain-input').val()
        });
        return null;
      },
      updateCertView: function() {
        $("#elb-property-listener-list").children().each(function() {
          var $certPanel, $listenerItem, protocol, sslCertDropDown;
          protocol = $(this).find(".elb-property-elb-protocol .selected").text();
          $certPanel = $(this).find(".sslcert-select");
          $listenerItem = $(this);
          sslCertDropDown = $listenerItem.data('sslCertDropDown');
          if (protocol === "HTTPS" || protocol === "SSL") {
            if (sslCertDropDown) {
              sslCertDropDown.setDefault();
            }
            return $certPanel.show();
          } else {
            if (sslCertDropDown) {
              sslCertDropDown.dropdown.setSelection('None');
            }
            return $certPanel.hide();
          }
        });
        return null;
      },
      azCheckChanged: function(event) {
        var azArray;
        azArray = _.map($("#property-elb-az-cb-group").find("input:checked"), function(cb) {
          return $(cb).attr("data-name");
        });
        this.model.updateElbAZ(azArray);
        return null;
      },
      updateSlider: function($target, value) {
        var left, step, width;
        step = $target.children(".marker").children().length - 1;
        width = $target.width();
        left = value * Math.floor(width / step);
        $target.data("value", value).children(".thumb").css("left", left);
        return null;
      },
      sliderSelect: function(event) {
        var $slider, $target, value;
        $target = $(event.currentTarget);
        $slider = $target.closest(".slider");
        value = $target.index();
        this.updateSlider($slider, value);
        $slider.trigger("SLIDER_CHANGE", value);
        return null;
      },
      sliderMouseDown: function(event) {
        var $body, $slider, $thumb, offsetStep, onMouseMove, onMouseUp, originalX, step, stepWidth, thumbPos, value, width;
        $body = $("body");
        $thumb = $(event.currentTarget);
        $slider = $thumb.closest(".slider");
        step = $slider.children(".marker").children().length - 1;
        width = $slider.width();
        stepWidth = Math.floor(width / step);
        originalX = event.clientX;
        thumbPos = $thumb.position().left;
        value = $slider.data("value");
        offsetStep = 0;
        onMouseMove = function(event) {
          var absOffset, delta, halfStepWidth, newPos, offset;
          offset = event.clientX - originalX;
          absOffset = Math.abs(offset);
          halfStepWidth = stepWidth / 2;
          if (absOffset >= halfStepWidth) {
            absOffset += halfStepWidth;
            delta = offset > 0 ? 1 : -1;
            offsetStep = Math.floor(absOffset / stepWidth) * delta;
            newPos = thumbPos + offsetStep * stepWidth;
            if (newPos < 0) {
              newPos = 0;
              offsetStep = -value;
            } else if (newPos > width) {
              newPos = width;
              offsetStep = step - value;
            }
          } else {
            newPos = thumbPos;
            offsetStep = 0;
          }
          $thumb.css("left", newPos);
          return false;
        };
        onMouseUp = function() {
          var newValue;
          $body.off("mousemove", onMouseMove);
          newValue = value + offsetStep;
          $slider.data("value", newValue).trigger("SLIDER_CHANGE", newValue);
          return null;
        };
        $body.on("mousemove", onMouseMove);
        $body.one("mouseup", onMouseUp);
        return false;
      },
      elbCrossAZSelect: function(event) {
        this.model.setElbCrossAZ(event.target.checked);
        return null;
      },
      elbSSLCertAdd: function(event) {
        var that;
        that = this;
        that.popSSLCertModal(false);
        return false;
      },
      elbSSLCertEdit: function(event) {
        var $certEditItem, $certItem, certUID, that;
        that = this;
        $certEditItem = $(event.currentTarget);
        $certItem = $certEditItem.parents('.item');
        certUID = $certItem.attr('data-id');
        if (certUID) {
          that.popSSLCertModal(true, certUID);
        }
        return false;
      },
      elbSSLCertRemove: function(event) {
        var $certEditItem, $certItem, certModel, certName, certUID, that;
        that = this;
        $certEditItem = $(event.currentTarget);
        $certItem = $certEditItem.parents('.item');
        certUID = $certItem.attr('data-id');
        certModel = Design.instance().component(certUID);
        if (certModel) {
          certName = certModel.get('name');
          modal(MC.template.modalDeleteELBCert({
            cert_name: certName
          }, true));
          $("#modal-confirm-elb-cert-delete").one('click', function() {
            that.model.removeCert(certUID);
            ide_event.trigger(ide_event.REFRESH_PROPERTY);
            return modal.close();
          });
        }
        return false;
      },
      changeSSLCert: function(event) {
        var $certItem, certUID, that;
        that = this;
        $certItem = $(event.currentTarget);
        certUID = $certItem.attr('data-id');
        that.model.changeCert(certUID);
        return ide_event.trigger(ide_event.REFRESH_PROPERTY);
      },
      popSSLCertModal: function(isEdit, certUID) {
        var $certChain, $certName, $certPrikey, $certPubkey, certModel, currentCertName, otherCertNameAry, that;
        that = this;
        modal(MC.template.modalSSLCertSetting({}, true));
        $certName = $('#elb-ssl-cert-name-input');
        $certPrikey = $('#elb-ssl-cert-privatekey-input');
        $certPubkey = $('#elb-ssl-cert-publickey-input');
        $certChain = $('#elb-ssl-cert-chain-input');
        currentCertName = '';
        if (isEdit && certUID) {
          certModel = Design.instance().component(certUID);
          if (certModel) {
            currentCertName = certModel.get('name');
            $certName.val(currentCertName);
            $certPrikey.val(certModel.get('key'));
            $certPubkey.val(certModel.get('body'));
            $certChain.val(certModel.get('chain'));
          }
        }
        otherCertNameAry = that.model.getOtherCertName(currentCertName);
        return $("#elb-ssl-cert-confirm").off('click').on('click', function() {
          var certObj, isCorrect, valid1, valid2, valid3;
          isCorrect = false;
          $certName.parsley('custom', function(val) {
            if (__indexOf.call(otherCertNameAry, val) >= 0) {
              return lang.PARSLEY.THIS_NAME_IS_ALREADY_IN_USING;
            }
            return null;
          });
          valid1 = $certName.parsley('validate');
          valid2 = $certPrikey.parsley('validate');
          valid3 = $certPubkey.parsley('validate');
          if (valid1 && valid2 && valid3) {
            isCorrect = true;
          }
          if (isCorrect) {
            certObj = {
              name: $certName.val(),
              key: $certPrikey.val(),
              body: $certPubkey.val(),
              chain: $certChain.val()
            };
            if (isEdit && certUID) {
              that.model.updateCert(certUID, certObj);
            } else {
              that.model.addCert(certObj);
            }
            ide_event.trigger(ide_event.REFRESH_PROPERTY);
            modal.close();
          }
          return null;
        });
      },
      elbConnectionDrainSelectChange: function(event) {
        var $inputGroup, $selectbox, $timeoutInput, selectValue, that, timeoutValue;
        that = this;
        $selectbox = that.$('#elb-connection-draining-select');
        $inputGroup = that.$('.elb-connection-draining-input-group');
        $timeoutInput = that.$('#elb-connection-draining-input');
        selectValue = $selectbox.prop('checked');
        if (selectValue) {
          $inputGroup.removeClass('hide');
        } else {
          $inputGroup.addClass('hide');
        }
        timeoutValue = Number($timeoutInput.val());
        if (selectValue && timeoutValue) {
          that.model.setConnectionDraining(true, timeoutValue);
        }
        if (!selectValue) {
          return that.model.setConnectionDraining(false);
        }
      },
      elbConnectionDrainTimeoutChange: function(event) {
        var $selectbox, $timeoutInput, selectValue, that, timeoutValue;
        that = this;
        $timeoutInput = that.$('#elb-connection-draining-input');
        $selectbox = that.$('#elb-connection-draining-select');
        selectValue = $selectbox.prop('checked');
        timeoutValue = Number($timeoutInput.val());
        $timeoutInput.parsley('custom', function(val) {
          var inputValue;
          inputValue = Number($timeoutInput.val());
          if (!(inputValue >= 1 && inputValue < 3600)) {
            return lang.PROP.ELB_CONNECTION_DRAIN_TIMEOUT_INVALID;
          }
          return null;
        });
        if (!$timeoutInput.parsley('validate')) {
          return;
        }
        if (selectValue && timeoutValue) {
          return that.model.setConnectionDraining(true, timeoutValue);
        }
      },
      elbAdvancedProxyProtocolSelectChange: function(event) {
        var $selectbox, $tipBox, selectValue, that;
        that = this;
        $selectbox = that.$('#elb-advanced-proxy-protocol-select');
        $tipBox = $('#elb-advanced-proxy-protocol-select-tip');
        selectValue = $selectbox.prop('checked');
        if (selectValue) {
          $tipBox.removeClass('hide');
        } else {
          $tipBox.addClass('hide');
        }
        return that.model.setAdvancedProxyProtocol(selectValue, [80]);
      }
    });
    return new ElbView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/elb/app_model',['../base/model', 'constant', 'Design', "CloudResources"], function(PropertyModel, constant, Design, CloudResources) {
    var ElbAppModel;
    ElbAppModel = PropertyModel.extend({
      defaults: {
        'id': null
      },
      init: function(uid) {
        var elb, elbDistrMap, instanceStateObj, myElbComponent, port, splitIndex, target, _ref;
        this.set('id', uid);
        this.set('uid', uid);
        myElbComponent = Design.instance().component(uid);
        elb = CloudResources(constant.RESTYPE.ELB, Design.instance().region()).get(myElbComponent.get("appId"));
        if (!elb) {
          return false;
        }
        elb = elb.toJSON();
        elb.description = myElbComponent.get("description");
        elb.name = myElbComponent.get("name");
        if (elb.ConnectionDraining) {
          if (elb.ConnectionDraining.Enabled) {
            elb.ConnectionDrainingInfo = "Enabled; Timeout: " + elb.ConnectionDraining.Timeout + " seconds";
          } else {
            elb.ConnectionDrainingInfo = 'Disabled';
          }
        } else {
          elb.ConnectionDrainingInfo = 'Disabled';
        }
        elb.IdleTimeout = (_ref = elb.ConnectionSettings) != null ? _ref.IdleTimeout : void 0;
        elb.name = myElbComponent.get('name');
        elb.isInternet = elb.Scheme === 'internet-facing';
        target = elb.HealthCheck.Target;
        splitIndex = target.indexOf(":");
        elb.HealthCheck.protocol = target.substring(0, splitIndex);
        target = target.substring(splitIndex + 1);
        port = parseInt(target, 10);
        if (isNaN(port)) {
          port = 80;
        }
        elb.HealthCheck.port = port;
        elb.HealthCheck.path = target.replace(/[^\/]+\//, "/");
        elb.CrossZone = myElbComponent.get('crossZone') ? "Enabled" : "Disabled";
        elb.listenerDisplay = [];
        if (elb.ListenerDescriptions) {
          $.each(elb.ListenerDescriptions, function(i, listener) {
            elb.listenerDisplay.push(listener);
            if (listener.Listener.SSLCertificateId) {
              listener.Listener.server_certificate = listener.Listener.SSLCertificateId.split('/')[1];
              return null;
            }
          });
        }
        elb.isClassic = false;
        elb.defaultVPC = false;
        elb.distribution = [];
        elbDistrMap = {};
        instanceStateObj = elb.InstanceStates;
        _.each(instanceStateObj, function(stateObj) {
          var err, instanceComp, instanceCompObj, instanceId, instanceModel, instanceName, instanceState, instanceStateCode, instanceStateDescription, instanceUID, regionComp, regionName, showStateObj;
          try {
            instanceId = stateObj.InstanceId;
            instanceStateCode = stateObj.ReasonCode;
            instanceState = stateObj.State;
            instanceStateDescription = stateObj.Description;
            instanceCompObj = Design.modelClassForType(constant.RESTYPE.INSTANCE).getEffectiveId(instanceId);
            instanceUID = instanceCompObj.uid;
            instanceComp = Design.instance().component(instanceUID);
            regionName = '';
            if (instanceComp) {
              instanceName = instanceComp.get('name');
              if (instanceName === instanceId) {
                instanceName = null;
              }
              showStateObj = {
                instance_name: instanceName,
                instance_id: instanceId,
                instance_state: instanceState === 'InService',
                instance_state_desc: instanceStateDescription
              };
              regionComp = null;
              if (instanceComp.parent() && instanceComp.parent().parent()) {
                regionComp = instanceComp.parent().parent();
                if (instanceComp.type === constant.RESTYPE.LC) {
                  regionComp = instanceComp.parent().parent().parent();
                }
              }
              if (regionComp) {
                regionName = regionComp.get('name');
              }
            }
            if (!regionName) {
              instanceModel = CloudResources(constant.RESTYPE.INSTANCE, Design.instance().region()).get(instanceId);
              if (instanceModel) {
                if (instanceModel.get('placement')) {
                  regionName = instanceModel.get('placement').availabilityZone;
                }
              }
            }
            elbDistrMap[regionName] = elbDistrMap[regionName] || [];
            return elbDistrMap[regionName].push(showStateObj);
          } catch (_error) {
            err = _error;
            return console.log('Error: ELB Instance State Parse Failed');
          }
        });
        _.each(elbDistrMap, function(instanceAry, azName) {
          var isHealth;
          isHealth = true;
          _.each(instanceAry, function(instanceObj) {
            if (!instanceObj.instance_state) {
              isHealth = false;
            }
            return null;
          });
          return elb.distribution.push({
            zone: azName,
            instance: instanceAry,
            health: isHealth
          });
        });
        elb.distribution = elb.distribution.sort(function(azObj1, azObj2) {
          return azObj1.zone > azObj2.zone;
        });
        this.set(elb);
        return this.set("componentUid", myElbComponent.id);
      }
    });
    return new ElbAppModel();
  });

}).call(this);

define('workspaces/awseditor/property/elb/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_INTERNET_FACING", {hash:{},data:data}));
  }

function program3(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_INTERNAL", {hash:{},data:data}));
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_IDLE_TIMEOUT", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.IdleTimeout)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " seconds<dd>\n        ";
  return buffer;
  }

function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <li class=\"clearfix\">\n        <div class=\"app-panel-li-col2-1\">\n          <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_ELB_PROTOCOL", {hash:{},data:data}))
    + "</label>\n          <div>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.Listener)),stack1 == null || stack1 === false ? stack1 : stack1.Protocol)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        </div>\n\n        <div class=\"app-panel-li-col2-2\">\n          <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.PORT", {hash:{},data:data}))
    + "</label>\n          <div>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.Listener)),stack1 == null || stack1 === false ? stack1 : stack1.LoadBalancerPort)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        </div>\n\n        <div class=\"app-panel-li-col2-1\">\n          <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_INSTANCE_PROTOCOL", {hash:{},data:data}))
    + "</label>\n          <div>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.Listener)),stack1 == null || stack1 === false ? stack1 : stack1.InstanceProtocol)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        </div>\n\n        <div class=\"app-panel-li-col2-2\">\n          <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.PORT", {hash:{},data:data}))
    + "</label>\n          <div>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.Listener)),stack1 == null || stack1 === false ? stack1 : stack1.InstancePort)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        </div>\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.Listener)),stack1 == null || stack1 === false ? stack1 : stack1.server_certificate), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </li>\n    ";
  return buffer;
  }
function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <div class=\"app-panel-li-col2-full\">\n          <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_SERVER_CERTIFICATE", {hash:{},data:data}))
    + "</label>\n          <div>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.Listener)),stack1 == null || stack1 === false ? stack1 : stack1.server_certificate)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        </div>\n        ";
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_INSTANCES", {hash:{},data:data}))
    + "</div>\n  <ul class=\"option-group property-list\">\n    ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.distribution), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </ul>\n  ";
  return buffer;
  }
function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <li>\n        <div class=\"list-row\">\n            <i class=\"status status-";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.health), {hash:{},inverse:self.program(14, program14, data),fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " icon-label\"></i>\n            <span class=\"app-panel-li-main\">"
    + escapeExpression(((stack1 = (depth0 && depth0.zone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n        </div>\n        <div class=\"list-row\">\n          <ul class=\"elb-property-instance-list\">\n            ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.instance), {hash:{},inverse:self.noop,fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          </ul>\n        </div>\n      </li>\n    ";
  return buffer;
  }
function program12(depth0,data) {
  
  
  return "green";
  }

function program14(depth0,data) {
  
  
  return "red";
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n              <li>\n                <div class=\"instance-info\">\n                  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.instance_name), {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                  <div class=\"instance-id ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.instance_name), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">("
    + escapeExpression(((stack1 = (depth0 && depth0.instance_id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</div>\n                </div>\n                <div class=\"instance-state\">\n                  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.instance_state), {hash:{},inverse:self.program(23, program23, data),fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                  ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.instance_state), {hash:{},inverse:self.noop,fn:self.program(25, program25, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                </div>\n              </li>\n            ";
  return buffer;
  }
function program17(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<div class=\"instance-name\">"
    + escapeExpression(((stack1 = (depth0 && depth0.instance_name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>";
  return buffer;
  }

function program19(depth0,data) {
  
  
  return "instance-id-down";
  }

function program21(depth0,data) {
  
  
  return "InService";
  }

function program23(depth0,data) {
  
  
  return "OutOfService";
  }

function program25(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<a class=\"elb-info-icon tooltip icon-info\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.instance_state_desc)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></a>";
  return buffer;
  }

function program27(depth0,data) {
  
  var buffer = "";
  buffer += "\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span> </div>\n  <div class=\"option-group sg-group\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_LOADING", {hash:{},data:data}))
    + "</div>\n  ";
  return buffer;
  }

  buffer += "<article class=\"property-app\">\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_DETAILS", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_SCHEME", {hash:{},data:data}))
    + "</dt>\n        <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isInternet), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_DNS_NAME", {hash:{},data:data}))
    + "</dt>\n        <dd>\n          <div class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_SELECT_ALL", {hash:{},data:data}))
    + "\">(A)"
    + escapeExpression(((stack1 = (depth0 && depth0.Dnsname)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n          <div class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_SELECT_ALL", {hash:{},data:data}))
    + "\">(AAAA)ipv6."
    + escapeExpression(((stack1 = (depth0 && depth0.Dnsname)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n          <div class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_TIP_CLICK_TO_SELECT_ALL", {hash:{},data:data}))
    + "\">(A/AAAA)dualstack."
    + escapeExpression(((stack1 = (depth0 && depth0.Dnsname)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        </dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.name), {hash:{},data:data}))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HOST_ZONE_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.CanonicalHostedZoneNameID)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_CROSS_ZONE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.CrossZone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_CONNECTION_DRAIN", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.ConnectionDrainingInfo)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<dd>\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.IdleTimeout), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </dl>\n  </div>\n\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_LISTENER_DETAIL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <ul class=\"property-list\">\n    ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.listenerDisplay), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </ul>\n  </div>\n\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_DETAILS", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_PING_PROTOCOL", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.HealthCheck)),stack1 == null || stack1 === false ? stack1 : stack1.protocol)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_PING_PORT", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.HealthCheck)),stack1 == null || stack1 === false ? stack1 : stack1.port)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_PING_PATH", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.HealthCheck)),stack1 == null || stack1 === false ? stack1 : stack1.path)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_INTERVAL", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.HealthCheck)),stack1 == null || stack1 === false ? stack1 : stack1.Interval)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_INTERVAL_SECONDS", {hash:{},data:data}))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_RESPOND_TIMEOUT", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.HealthCheck)),stack1 == null || stack1 === false ? stack1 : stack1.Timeout)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_CHECK_INTERVAL_SECONDS", {hash:{},data:data}))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_UNHEALTH_THRESHOLD", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.HealthCheck)),stack1 == null || stack1 === false ? stack1 : stack1.UnhealthyThreshold)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ELB_HEALTH_THRESHOLD", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.HealthCheck)),stack1 == null || stack1 === false ? stack1 : stack1.HealthyThreshold)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      </dl>\n  </div>\n\n  ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.distribution)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isclassic), {hash:{},inverse:self.noop,fn:self.program(27, program27, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/elb/app_view',['../base/view', './template/app'], function(PropertyView, template) {
    var ElbAppView;
    ElbAppView = PropertyView.extend({
      render: function() {
        this.$el.html(template(this.model.attributes));
        return this.model.attributes.name;
      }
    });
    return new ElbAppView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/elb/main',['../base/main', './model', './view', './app_model', './app_view', "../sglist/main", 'constant'], function(PropertyModule, model, view, app_model, app_view, sglist_main, constant) {
    var ElbModule;
    ElbModule = PropertyModule.extend({
      handleTypes: constant.RESTYPE.ELB,
      onUnloadSubPanel: function(id) {
        sglist_main.onUnloadSubPanel(id);
        return null;
      },
      initStack: function() {
        this.model = model;
        this.view = view;
        return null;
      },
      afterLoadStack: function() {
        sglist_main.loadModule(this.model);
        return null;
      },
      initApp: function() {
        this.model = app_model;
        this.view = app_view;
        return null;
      },
      afterLoadApp: function() {
        sglist_main.loadModule(this.model);
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.view = view;
        return null;
      },
      afterLoadAppEdit: function() {
        sglist_main.loadModule(model);
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/az/model',['../base/model', "Design", 'constant', "CloudResources"], function(PropertyModel, Design, constant, CloudResources) {
    var AZModel;
    AZModel = PropertyModel.extend({
      init: function(id) {
        var AZClass, az, az_list, component, design, possible_list, selectedItemName, used_list, _i, _len;
        design = Design.instance();
        az_list = CloudResources(constant.RESTYPE.AZ, Design.instance().region()).where({
          category: design.get("region")
        });
        component = design.component(id);
        if (!component || !az_list) {
          return false;
        }
        selectedItemName = component.get("name");
        used_list = {};
        AZClass = Design.modelClassForType(constant.RESTYPE.AZ);
        _.each(AZClass.allObjects(), function(element) {
          used_list[element.get("name")] = true;
          return null;
        });
        possible_list = [];
        for (_i = 0, _len = az_list.length; _i < _len; _i++) {
          az = az_list[_i];
          az = az.attributes;
          if (az.id === selectedItemName || !used_list[az.id]) {
            possible_list.push({
              name: az.id,
              selected: az.id === selectedItemName
            });
          }
        }
        this.set({
          uid: id,
          name: selectedItemName,
          list: possible_list
        });
        return null;
      }
    });
    return new AZModel();
  });

}).call(this);

define('workspaces/awseditor/property/az/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n  <div>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.AZ_CANNOT_EDIT_EXISTING_AZ", {hash:{},data:data}))
    + "</div>\n  ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.AZ_LBL_SWITCH", {hash:{},data:data}))
    + "</label>\n  <div class=\"selectbox selectbox-mega\" id=\"az-quick-select\">\n    <div class=\"selection\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n    <ul class=\"dropdown\" tabindex=\"-1\">\n      ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.list), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </ul>\n  </div>\n  ";
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<li class=\"item";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</li>";
  return buffer;
  }
function program5(depth0,data) {
  
  
  return " selected";
  }

  buffer += "<section class=\"property-control-group\">\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.appEdit), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</section>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/az/view',['../base/view', './template/stack'], function(PropertyView, template) {
    var AZView;
    AZView = PropertyView.extend({
      events: {
        'OPTION_CHANGE #az-quick-select': "azSelect"
      },
      render: function() {
        var data;
        if (this.isAppEdit) {
          data = {
            appEdit: true
          };
        } else {
          data = this.model.attributes;
        }
        this.$el.html(template(data));
        return "Availability Zone";
      },
      azSelect: function(event, newAZName) {
        this.model.setName(newAZName);
      }
    });
    return new AZView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/az/main',['../base/main', './model', './view', 'constant'], function(PropertyModule, model, view, constant) {
    var AZModule;
    AZModule = PropertyModule.extend({
      handleTypes: constant.RESTYPE.AZ,
      initStack: function() {
        this.model = model;
        this.view = view;
        this.view.isAppEdit = false;
      },
      initApp: function() {
        return false;
      },
      initAppEdit: function() {
        this.model = model;
        this.view = view;
        this.view.isAppEdit = true;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/subnet/model',['../base/model', 'constant', "Design", "CloudResources"], function(PropertyModel, constant, Design, CloudResources) {
    var SubnetModel;
    SubnetModel = PropertyModel.extend({
      defaults: {
        'isAppEdit': false
      },
      init: function(uid) {
        var ACLModel, defaultACL, defaultRT, linkedRT, networkACLs, routeTable, subnet, subnet_acl, subnet_component, _ref;
        subnet_component = Design.instance().component(uid);
        if (!subnet_component) {
          return false;
        }
        ACLModel = Design.modelClassForType(constant.RESTYPE.ACL);
        subnet_acl = subnet_component.connectionTargets("AclAsso")[0];
        defaultACL = null;
        networkACLs = [];
        _.each(ACLModel.allObjects(), function(acl) {
          var aclObj;
          aclObj = {
            uid: acl.id,
            name: acl.get("name"),
            isUsed: acl === subnet_acl,
            rule: acl.getRuleCount(),
            association: acl.getAssoCount()
          };
          if (acl.isDefault()) {
            defaultACL = aclObj;
            aclObj.isDefault = true;
          } else {
            networkACLs.splice(_.sortedIndex(networkACLs, aclObj, "name"), 0, aclObj);
          }
          return null;
        });
        if (defaultACL) {
          networkACLs.splice(0, 0, defaultACL);
        }
        this.set({
          uid: uid,
          name: subnet_component.get("name"),
          networkACL: networkACLs,
          isAppEdit: this.isAppEdit,
          description: subnet_component.get("description")
        });
        if (this.isAppEdit) {
          subnet = (_ref = CloudResources(constant.RESTYPE.SUBNET, Design.instance().region()).get(subnet_component.get('appId'))) != null ? _ref.toJSON() : void 0;
          subnet = _.clone(subnet);
          routeTable = subnet_component.connectionTargets('RTB_Asso')[0];
          linkedRT = routeTable.get('appId');
          if (routeTable.get('main')) {
            defaultRT = routeTable.get('appId');
          }
          subnet.routeTable = linkedRT ? linkedRT : defaultRT;
          this.set(subnet);
        }
        this.getCidr();
        return null;
      },
      getCidr: function() {
        var cidrDivAry, subnet, subnetCidr;
        subnet = Design.instance().component(this.get("uid"));
        subnetCidr = subnet.get("cidr");
        cidrDivAry = this.genCIDRDivAry(subnet.parent().parent().get("cidr"), subnetCidr);
        this.set("CIDRPrefix", cidrDivAry[0]);
        this.set("CIDR", subnetCidr ? cidrDivAry[1] : "");
        return null;
      },
      genCIDRDivAry: function(vpcCIDR, subnetCIDR) {
        var resultPrefix, resultSuffix, subnetAddrAry, subnetIPAry, subnetSuffix, vpcSuffix;
        if (!subnetCIDR) {
          subnetCIDR = vpcCIDR;
        }
        vpcSuffix = Number(vpcCIDR.split('/')[1]);
        subnetIPAry = subnetCIDR.split('/');
        subnetSuffix = Number(subnetIPAry[1]);
        subnetAddrAry = subnetIPAry[0].split('.');
        if (vpcSuffix > 23) {
          resultPrefix = subnetAddrAry[0] + '.' + subnetAddrAry[1] + '.' + subnetAddrAry[2] + '.';
          resultSuffix = subnetAddrAry[3] + '/' + subnetSuffix;
        } else {
          resultPrefix = subnetAddrAry[0] + '.' + subnetAddrAry[1] + '.';
          resultSuffix = subnetAddrAry[2] + '.' + subnetAddrAry[3] + '/' + subnetSuffix;
        }
        return [resultPrefix, resultSuffix];
      },
      createAcl: function() {
        var ACLModel, acl;
        ACLModel = Design.modelClassForType(constant.RESTYPE.ACL);
        acl = new ACLModel();
        this.setACL(acl.id);
        return acl.id;
      },
      removeAcl: function(acl_uid) {
        Design.instance().component(acl_uid).remove();
        return null;
      },
      setCidr: function(cidr) {
        return Design.instance().component(this.get("uid")).setCidr(cidr);
      },
      setACL: function(acl_uid) {
        Design.instance().component(this.get("uid")).setAcl(acl_uid);
        return null;
      },
      isValidCidr: function(cidr) {
        return Design.instance().component(this.get("uid")).isValidCidr(cidr);
      }
    });
    return new SubnetModel();
  });

}).call(this);

define('workspaces/awseditor/property/subnet/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n  <div class=\"option-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.subnetId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_CIDR", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.cidrBlock)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_AVAILABLE_IP", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.availableIpAddressCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_VPC_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.vpcId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_RT_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.routeTable)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-subnet-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_DETAIL_LBL_NAME", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n      <input class=\"input\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" lastValue=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-subnet-name\" maxlength=\"255\" data-required-rollback=\"true\" data-ignore=\"true\"/>\n    </section>\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n      <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n  </div>\n\n  ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group\">\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-subnet-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_DETAIL_LBL_NAME", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n      <input class=\"input\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" lastValue=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-subnet-name\" maxlength=\"255\" data-required-rollback=\"true\" data-ignore=\"true\"/>\n    </section>\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n      <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n    <section class=\"property-control-group\">\n      <label class=\"left\" for=\"property-cidr-block\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_DETAIL_LBL_CIDR_BLOCK", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n      <div class=\"subnet-cidr-wrapper\">\n        <span class=\"cidr-prefix\" id=\"property-cidr-prefix\">"
    + escapeExpression(((stack1 = (depth0 && depth0.CIDRPrefix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n        <input data-ignore=\"true\" data-ignore-regexp=\"^[0-9./]*$\" class=\"input cidr-rest tooltip\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.CIDR)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" lastValue=\""
    + escapeExpression(((stack1 = (depth0 && depth0.CIDR)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-cidr-block\" data-empty-remove=\"true\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_TIP_CIDR_BLOCK", {hash:{},data:data}))
    + "\"/>\n      </div>\n    </section>\n  </div>\n  ";
  return buffer;
  }

  buffer += "<article data-bind=\"true\">\n  <div class=\"option-group-head expand\" id=\"subnet-property-detail\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_TIT_DETAIL", {hash:{},data:data}))
    + "</div>\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_TIT_ASSOC_ACL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <ul id=\"networkacl-list\" class=\"acl-sg-info-list acl-info-list property-list stack-property-acl-list\"></ul>\n    <a href=\"#\" class=\"add-to-list action-link\" id=\"networkacl-create\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_BTN_CREATE_NEW_ACL", {hash:{},data:data}))
    + "</a>\n  </div>\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/subnet/template/acl',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<li class=\"clearfix\" data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.uid)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n  <div class=\"col1\"> <div class=\"radio\">\n    <input id=\"ppty-acl-"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"ppty-acl-cb\" type=\"radio\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isUsed), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n    <label for=\"ppty-acl-"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></label>\n  </div> </div>\n  <div class=\"col3 tooltip icon-btn-details\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_ACL_TIP_DETAIL", {hash:{},data:data}))
    + "'></div>\n  <div class=\"col2\">\n    <div class=\"col2-1 truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n    <div class=\"col2-2 truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.rule)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_ACL_LBL_RULE", {hash:{},data:data}))
    + ", "
    + escapeExpression(((stack1 = (depth0 && depth0.association)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_ACL_LBL_ASSOC", {hash:{},data:data}));
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isDefault), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n  </div>\n</li>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " | <a class=\"sg-list-delete-btn\" data-name=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-count=\""
    + escapeExpression(((stack1 = (depth0 && depth0.association)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_ACL_BTN_DELETE", {hash:{},data:data}))
    + "</a>";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, (depth0 && depth0.networkACL), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/subnet/view',['../base/view', './template/stack', './template/acl', 'event', "Design", 'i18n!/nls/lang.js'], function(PropertyView, template, acl_template, ide_event, Design, lang) {
    var SubnetView;
    SubnetView = PropertyView.extend({
      events: {
        "change #property-subnet-name": 'onChangeName',
        "change #property-res-desc": 'onChangeDesc',
        "focus #property-cidr-block": 'onFocusCIDR',
        "keypress #property-cidr-block": 'onPressCIDR',
        "blur #property-cidr-block": 'onBlurCIDR',
        'click #networkacl-create': 'createAcl',
        'click .icon-btn-details': 'openAcl',
        "click .ppty-acl-cb": 'changeAcl',
        'click .sg-list-delete-btn': 'deleteAcl'
      },
      render: function() {
        this.$el.html(template(this.model.attributes));
        this.refreshACLList();
        return this.model.attributes.name;
      },
      onChangeName: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "Subnet")) {
          this.model.setName(name);
          return this.setTitle(name);
        }
      },
      onChangeDesc: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      onPressCIDR: function(event) {
        if (event.keyCode === 13) {
          $('#property-cidr-block').blur();
        }
        return null;
      },
      onFocusCIDR: function(event) {
        this.disabledAllOperabilityArea(true);
        return null;
      },
      onBlurCIDR: function(event) {
        var cidrPrefix, cidrSuffix, descContent, error, mainContent, removeInfo, subnetCIDR, that;
        cidrPrefix = $("#property-cidr-prefix").html();
        cidrSuffix = $("#property-cidr-block").val();
        subnetCIDR = cidrPrefix + cidrSuffix;
        removeInfo = 'Remove Subnet';
        if (!cidrSuffix) {
          mainContent = lang.PROP.SUBNET_CIDR_VALIDATION_REQUIRED;
          descContent = lang.PROP.SUBNET_CIDR_VALIDATION_REQUIRED_DESC;
        } else if (!MC.validate('cidr', subnetCIDR)) {
          mainContent = sprintf(lang.PROP.SUBNET_CIDR_VALIDATION_INVALID, subnetCIDR);
          descContent = sprintf(lang.PROP.SUBNET_CIDR_VALIDATION_INVALID_DESC);
        } else {
          error = this.model.isValidCidr(subnetCIDR);
          if (error !== true) {
            mainContent = error.error;
            descContent = error.detail;
            if (error.shouldRemove === false) {
              removeInfo = "";
            }
          }
        }
        if (mainContent) {
          that = this;
          modal(MC.template.setupCIDRConfirm({
            main_content: mainContent,
            desc_content: descContent,
            remove_content: removeInfo
          }), false, null, {
            $source: $(event.target)
          });
          $('.modal-close').click(function() {
            return $('#property-cidr-block').focus();
          });
          return $('#cidr-remove').click(function() {
            Design.instance().component(that.model.get("uid")).remove();
            that.disabledAllOperabilityArea(false);
            return modal.close();
          });
        } else {
          this.model.setCidr(subnetCIDR);
          return this.disabledAllOperabilityArea(false);
        }
      },
      createAcl: function() {
        return this.trigger("OPEN_ACL", this.model.createAcl());
      },
      openAcl: function(event) {
        var id;
        id = $(event.currentTarget).closest("li").attr("data-uid");
        this.trigger("OPEN_ACL", id);
        return null;
      },
      deleteAcl: function(event) {
        var $target, aclName, aclUID, assoCont, dialog_template, that;
        $target = $(event.currentTarget);
        assoCont = parseInt($target.attr('data-count'), 10);
        aclUID = $target.closest("li").attr('data-uid');
        if (assoCont) {
          that = this;
          aclName = $target.attr('data-name');
          dialog_template = MC.template.modalDeleteSGOrACL({
            title: lang.IDE.TITLE_DELETE_NETWORK_ACL,
            main_content: "Are you sure you want to delete " + aclName + "?",
            desc_content: "Subnets associated with " + aclName + " will use DefaultACL."
          });
          return modal(dialog_template, false, function() {
            return $('#modal-confirm-delete').click(function() {
              that.model.removeAcl(aclUID);
              that.refreshACLList();
              return modal.close();
            });
          });
        } else {
          this.model.removeAcl(aclUID);
          return this.refreshACLList();
        }
      },
      changeAcl: function(event) {
        this.model.setACL($(event.currentTarget).closest("li").attr("data-uid"));
        return this.refreshACLList();
      },
      refreshACLList: function() {
        this.model.init(this.model.get('uid'));
        return $('#networkacl-list').html(acl_template(this.model.attributes));
      }
    });
    return new SubnetView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/subnet/app_model',['../base/model', 'constant', 'Design', 'CloudResources'], function(PropertyModel, constant, Design, CloudResources) {
    var SubnetAppModel;
    SubnetAppModel = PropertyModel.extend({
      init: function(uid) {
        var defaultRT, linkedRT, mySubnetComponent, routeTable, subnet, _ref;
        mySubnetComponent = Design.instance().component(uid);
        subnet = (_ref = CloudResources(constant.RESTYPE.SUBNET, Design.instance().region()).get(mySubnetComponent.get('appId'))) != null ? _ref.toJSON() : void 0;
        if (!subnet) {
          return false;
        }
        subnet = _.clone(subnet);
        subnet.name = mySubnetComponent.get('name');
        subnet.description = mySubnetComponent.get('description');
        subnet.acl = this.getACL(uid);
        subnet.uid = uid;
        routeTable = mySubnetComponent.connectionTargets('RTB_Asso')[0];
        linkedRT = routeTable.get('appId');
        if (routeTable.get('main')) {
          defaultRT = routeTable.get('appId');
        }
        subnet.routeTable = linkedRT ? linkedRT : defaultRT;
        this.set(subnet);
        return null;
      },
      getACL: function(uid) {
        var acl;
        acl = Design.instance().component(uid).connectionTargets('AclAsso')[0];
        if (!acl) {
          return null;
        }
        return {
          id: acl.id,
          name: acl.get("name"),
          rule: acl.getRuleCount(),
          association: acl.getAssoCount()
        };
      }
    });
    return new SubnetAppModel();
  });

}).call(this);

define('workspaces/awseditor/property/subnet/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_TIT_ASSOC_ACL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <ul class=\"acl-sg-info-list property-list acl-info-list\">\n      <li>\n        <div class=\"col3 tooltip icon-btn-details\" data-uid=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.acl)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_ACL_TIP_DETAIL", {hash:{},data:data}))
    + "'></div>\n        <div class=\"col2\">\n          <div class=\"col2-1 truncate\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.acl)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n          <div class=\"col2-2 truncate\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.acl)),stack1 == null || stack1 === false ? stack1 : stack1.rule)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_ACL_LBL_RULE", {hash:{},data:data}))
    + ", "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.acl)),stack1 == null || stack1 === false ? stack1 : stack1.association)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_ACL_LBL_ASSOC", {hash:{},data:data}))
    + "</div>\n        </div>\n      </li>\n    </ul>\n  </div>\n  ";
  return buffer;
  }

  buffer += "<article class=\"property-app\">\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_TIT_DETAIL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.subnetId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.name), {hash:{},data:data}))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_CIDR", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.cidrBlock)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_AVAILABLE_IP", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.availableIpAddressCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_VPC_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.vpcId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_APP_RT_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.routeTable)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n  </div>\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.acl), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/subnet/app_view',['../base/view', './template/app'], function(PropertyView, template) {
    var SubnetAppView;
    SubnetAppView = PropertyView.extend({
      events: {
        "click .acl-sg-info-list .icon-btn-details": 'showACLDetail'
      },
      render: function() {
        this.$el.html(template(this.model.toJSON()));
        this.setTitle(this.model.get('name'));
        return null;
      },
      showACLDetail: function(event) {
        this.trigger('OPEN_ACL', $(event.currentTarget).data('uid'));
        return null;
      }
    });
    return new SubnetAppView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/subnet/main',['../base/main', './model', './view', './app_model', './app_view', 'constant'], function(PropertyModule, model, view, app_model, app_view, constant) {
    var SubnetModule;
    app_view.on('OPEN_ACL', function(acl_uid) {
      return PropertyModule.loadSubPanel("ACL", acl_uid);
    });
    view.on('OPEN_ACL', function(acl_uid) {
      PropertyModule.loadSubPanel("ACL", acl_uid);
      return null;
    });
    SubnetModule = PropertyModule.extend({
      handleTypes: constant.RESTYPE.SUBNET,
      onUnloadSubPanel: function(id) {
        if (id === "ACL" && this.view.refreshACLList) {
          return this.view.refreshACLList();
        }
      },
      initStack: function() {
        this.view = view;
        this.model = model;
        this.model.isAppEdit = false;
        return null;
      },
      initApp: function() {
        this.view = app_view;
        this.model = app_model;
        return null;
      },
      initAppEdit: function() {
        this.view = view;
        this.model = model;
        this.model.isAppEdit = true;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/vpc/model',['../base/model', 'Design', 'constant', "CloudResources"], function(PropertyModel, Design, constant, CloudResources) {
    var VPCModel;
    VPCModel = PropertyModel.extend({
      defaults: {
        'isAppEdit': false
      },
      init: function(uid) {
        var AclModel, RtbModel, TYPE_ACL, TYPE_RTB, component, data, dhcp, dhcp_comp, myVPCComponent, vpc, _ref;
        component = Design.instance().component(uid);
        dhcp_comp = component.get("dhcp");
        dhcp = $.extend({}, dhcp_comp.attributes);
        dhcp.none = dhcp_comp.isAuto();
        dhcp["default"] = dhcp_comp.isDefault();
        dhcp.hasDhcp = (!dhcp.none) && (!dhcp["default"]);
        data = {
          uid: uid,
          dnsSupport: component.get("dnsSupport"),
          dnsHosts: component.get("dnsHostnames"),
          defaultTenancy: component.isDefaultTenancy(),
          name: component.get("name"),
          cidr: component.get("cidr"),
          dhcp: dhcp,
          isAppEdit: this.isAppEdit,
          description: component.get("description")
        };
        if (this.isAppEdit) {
          myVPCComponent = Design.instance().component(uid);
          vpc = (_ref = CloudResources(constant.RESTYPE.VPC, Design.instance().region()).get(myVPCComponent.get('appId'))) != null ? _ref.toJSON() : void 0;
          vpc = _.clone(vpc);
          TYPE_RTB = constant.RESTYPE.RT;
          TYPE_ACL = constant.RESTYPE.ACL;
          RtbModel = Design.modelClassForType(TYPE_RTB);
          AclModel = Design.modelClassForType(TYPE_ACL);
          vpc.mainRTB = RtbModel.getMainRouteTable();
          if (vpc.mainRTB) {
            vpc.mainRTB = vpc.mainRTB.get("appId");
            vpc.defaultACL = AclModel.getDefaultAcl();
          }
          if (vpc.defaultACL) {
            vpc.defaultACL = vpc.defaultACL.get("appId");
          }
          this.set(vpc);
        }
        this.set(data);
        return null;
      },
      setCidr: function(newCIDR) {
        if (Design.instance().component(this.get("uid")).setCidr(newCIDR)) {
          this.attributes.cidr = newCIDR;
          return true;
        }
        return false;
      },
      setTenancy: function(tenancy) {
        Design.instance().component(this.get("uid")).setTenancy(tenancy);
        return null;
      },
      setDnsSupport: function(enable) {
        var uid;
        uid = this.get("uid");
        Design.instance().component(uid).set("dnsSupport", enable);
        return null;
      },
      setDnsHosts: function(enable) {
        var uid;
        uid = this.get("uid");
        Design.instance().component(uid).set("dnsHostnames", enable);
        return null;
      },
      setAmazonDns: function(enable) {
        var uid;
        uid = this.get("uid");
        Design.instance().component(uid).get("dhcp").set("amazonDNS", enable);
        return null;
      },
      removeDhcp: function(isDefault) {
        var dhcp, uid;
        uid = this.get("uid");
        dhcp = Design.instance().component(uid).get("dhcp");
        if (isDefault) {
          dhcp.setDefault();
        } else {
          dhcp.setAuto();
        }
        return null;
      },
      setDhcp: function(val) {
        var dhcp, uid;
        uid = this.get("uid");
        dhcp = Design.instance().component(uid).get("dhcp");
        dhcp.setDhcp(val);
        return null;
      },
      setDHCPOptions: function(options, force) {
        var dhcp, uid;
        uid = this.get("uid");
        dhcp = Design.instance().component(uid).get("dhcp");
        dhcp.set(options, force);
        return null;
      }
    });
    return new VPCModel();
  });

}).call(this);

define('workspaces/awseditor/property/vpc/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_VPC_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.vpcId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_CIDR", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.cidrBlock)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_TENANCY", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.instanceTenancy)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_MAIN_RT", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.mainRTB)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_DEFAULT_ACL", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.defaultACL)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n    <section class=\"property-control-group clearfix\">\n      <label class=\"left\" for=\"property-vpc-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_NAME", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n      <input class=\"input vpc-name\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-vpc-name\" maxlength=\"255\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n    </section>\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n      <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n    <section class=\"property-control-group\">\n      <div class=\"checkbox\">\n        <input id=\"property-dns-resolution\" type=\"checkbox\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.dnsSupport), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"dns-resolution\">\n        <label for=\"property-dns-resolution\"></label>\n      </div>\n      <label for=\"property-dns-resolution\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_ENABLE_DNS_RESOLUTION", {hash:{},data:data}))
    + "</label>\n    </section>\n\n    <section class=\"property-control-group\">\n      <div class=\"checkbox\">\n        <input id=\"property-dns-hostname\" type=\"checkbox\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.dnsHosts), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"dns-hostname\">\n        <label for=\"property-dns-hostname\"></label>\n      </div>\n      <label for=\"property-dns-hostname\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_ENABLE_DNS_HOSTNAME_SUPPORT", {hash:{},data:data}))
    + "</label>\n    </section>\n\n    <section class=\"property-control-group\">\n      <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_TIT_DHCP_OPTION", {hash:{},data:data}))
    + "</label>\n      <div id=\"dhcp-dropdown\"></div>\n    </section>\n  </div>\n\n\n  ";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return " checked=\"checked\"";
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group\" data-bind=\"true\">\n    <section class=\"property-control-group clearfix\">\n      <label class=\"left\" for=\"property-vpc-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_NAME", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n      <input class=\"input vpc-name\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-vpc-name\" maxlength=\"255\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n    </section>\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n      <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n    <section class=\"property-control-group clearfix\">\n      <label class=\"left\" for=\"property-cidr-block\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_CIDR_BLOCK", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n      <input class=\"input cidr-block tooltip\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.cidr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-cidr-block\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_TIP_EG_10_0_0_0_16", {hash:{},data:data}))
    + "\" maxlength=\"255\" data-ignore=\"true\" data-required-rollback=\"true\" data-trigger=\"change\" data-type=\"awsCidr\"/>\n    </section>\n\n    <section class=\"property-control-group\">\n      <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_TENANCY", {hash:{},data:data}))
    + "</label>\n      <div class=\"selectbox selectbox-mega\" id=\"property-tenancy\">\n        <div class=\"selection\">";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.defaultTenancy), {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n        <ul class=\"dropdown\" tabindex=\"-1\">\n          <li class=\"item";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.defaultTenancy), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"default\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_TENANCY_LBL_DEFAULT", {hash:{},data:data}))
    + "</li>\n          <li class=\"item";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.defaultTenancy), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"dedicated\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_TENANCY_LBL_DEDICATED", {hash:{},data:data}))
    + "</li>\n        </ul>\n      </div>\n      <div id=\"desc-dedicated\" class=\"property-info\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_SELECTING_DEDICATED_DESC", {hash:{},data:data}))
    + "<a target=\"_blank\" href=\"http://aws.amazon.com/dedicated-instances/\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_SELECTING_DEDICATED_LINK_TEXT", {hash:{},data:data}))
    + "</a></div>\n    </section>\n\n    <section class=\"property-control-group\">\n      <div class=\"checkbox\">\n        <input id=\"property-dns-resolution\" type=\"checkbox\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.dnsSupport), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"dns-resolution\">\n        <label for=\"property-dns-resolution\"></label>\n      </div>\n      <label for=\"property-dns-resolution\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_ENABLE_DNS_RESOLUTION", {hash:{},data:data}))
    + "</label>\n    </section>\n\n\n    <section class=\"property-control-group\">\n      <div class=\"checkbox\">\n        <input id=\"property-dns-hostname\" type=\"checkbox\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.dnsHosts), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"dns-hostname\">\n        <label for=\"property-dns-hostname\"></label>\n      </div>\n      <label for=\"property-dns-hostname\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_ENABLE_DNS_HOSTNAME_SUPPORT", {hash:{},data:data}))
    + "</label>\n    </section>\n\n    <section class=\"property-control-group\">\n        <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_TIT_DHCP_OPTION", {hash:{},data:data}))
    + "</label>\n        <div id=\"dhcp-dropdown\"></div>\n    </section>\n  </div>\n\n  ";
  return buffer;
  }
function program5(depth0,data) {
  
  var stack1;
  stack1 = helpers.i18n.call(depth0, "PROP.VPC_DETAIL_TENANCY_LBL_DEFAULT", {hash:{},data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }

function program7(depth0,data) {
  
  
  return "Dedicated";
  }

function program9(depth0,data) {
  
  
  return " selected";
  }

  buffer += "<article>\n  <div class=\"option-group-head expand\" id=\"vpc-property-detail\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_TIT_DETAIL", {hash:{},data:data}))
    + "</div>\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/vpc/view',['../base/view', './template/stack', 'i18n!/nls/lang.js', 'dhcp', 'UI.modalplus'], function(PropertyView, template, lang, dhcp, modalPlus) {
    var VPCView, mapFilterInput;
    mapFilterInput = function(selector) {
      var $inputs, ipt, result, _i, _len;
      $inputs = $(selector);
      result = [];
      for (_i = 0, _len = $inputs.length; _i < _len; _i++) {
        ipt = $inputs[_i];
        if (ipt.value) {
          result.push(ipt.value);
        }
      }
      return result;
    };
    VPCView = PropertyView.extend({
      events: {
        'change #property-vpc-name': 'onChangeName',
        'change #property-res-desc': 'onChangeDesc',
        'change #property-cidr-block': 'onChangeCidr',
        'change #property-dns-resolution': 'onChangeDnsSupport',
        'change #property-dns-hostname': 'onChangeDnsHostname',
        'OPTION_CHANGE #property-tenancy': 'onChangeTenancy',
        'change .property-control-group-sub .input': 'onChangeDhcpOptions',
        'OPTION_CHANGE #property-netbios-type': 'onChangeDhcpOptions',
        'REMOVE_ROW #property-dhcp-options': 'onChangeDhcpOptions',
        'ADD_ROW .multi-input': 'processParsley'
      },
      render: function() {
        var data;
        data = this.model.toJSON();
        this.$el.html(template(data));
        multiinputbox.update($("#property-domain-server"));
        this.dhcp = new dhcp({
          resModel: this.model
        });
        this.dhcp.off('change');
        this.dhcp.on('change', (function(_this) {
          return function(e) {
            return _this.changeDhcp(e);
          };
        })(this));
        this.dhcp.on('manage', (function(_this) {
          return function() {
            return console.log(_this.dhcp.manager);
          };
        })(this));
        this.$el.find('#dhcp-dropdown').html(this.dhcp.dropdown.el);
        this.initDhcpSelection();
        return data.name;
      },
      initDhcpSelection: function() {
        var currentVal, selection;
        currentVal = this.model.attributes.dhcp.appId;
        if (currentVal === '') {
          selection = {
            isAuto: true
          };
        } else if (currentVal === "default") {
          selection = {
            isDefault: true
          };
        } else {
          selection = {
            id: currentVal
          };
        }
        return this.dhcp.setSelection(selection);
      },
      changeDhcp: function(e) {
        if (e.id === 'default') {
          return this.model.removeDhcp(true);
        } else if (e.id === '') {
          return this.model.removeDhcp(false);
        } else {
          return this.model.setDhcp(e.id);
        }
      },
      onChangeName: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "VPC")) {
          this.model.setName(name);
          this.setTitle(name);
        }
        return null;
      },
      onChangeDesc: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      onChangeCidr: function(event) {
        var cidr, target;
        target = $(event.currentTarget);
        cidr = target.val();
        if (target.parsley('validate')) {
          if (!this.model.setCidr(cidr)) {
            target.val(this.model.get("cidr"));
            notification(lang.NOTIFY.WARN_CANNT_AUTO_ASSIGN_CIDR_FOR_SUBNET);
          }
        }
        return null;
      },
      onChangeTenancy: function(event, newValue) {
        this.model.setTenancy(newValue);
        return null;
      },
      onChangeDnsSupport: function(event) {
        this.model.setDnsSupport(event.target.checked);
        return null;
      },
      onChangeDnsHostname: function(event) {
        this.model.setDnsHosts(event.target.checked);
        return null;
      },
      onChangeAmazonDns: function(event) {
        var $inputbox, $rows, allowRows, useAmazonDns;
        useAmazonDns = $("#property-amazon-dns").is(":checked");
        allowRows = useAmazonDns ? 3 : 4;
        $inputbox = $("#property-domain-server").attr("data-max-row", allowRows);
        $rows = $inputbox.children();
        $inputbox.toggleClass("max", $rows.length >= allowRows);
        this.model.setAmazonDns(useAmazonDns);
        return null;
      },
      onUseDHCP: function(event) {
        $("#property-dhcp-desc").hide();
        $("#property-dhcp-options").show();
        this.model.useDhcp();
        return null;
      },
      onChangeDhcpOptions: function(event) {
        var data;
        if (event && !$(event.currentTarget).closest('[data-bind=true]').parsley('validate')) {
          return;
        }
        data = {
          domainName: $("#property-dhcp-domain").val(),
          domainServers: mapFilterInput("#property-domain-server .input"),
          ntpServers: mapFilterInput("#property-ntp-server .input"),
          netbiosServers: mapFilterInput("#property-netbios-server .input"),
          netbiosType: parseInt($("#property-netbios-type .selection").html(), 10) || 0
        };
        this.model.setDHCPOptions(data);
        return null;
      }
    });
    return new VPCView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/vpc/app_model',['../base/model', "Design", 'constant', 'CloudResources'], function(PropertyModel, Design, constant, CloudResources) {
    var VPCAppModel;
    VPCAppModel = PropertyModel.extend({
      init: function(vpc_uid) {
        var AclModel, RtbModel, TYPE_ACL, TYPE_RTB, appData, dhcp, dhcpData, i, myVPCComponent, vpc, _ref, _ref1, _ref2, _ref3, _ref4;
        myVPCComponent = Design.instance().component(vpc_uid);
        vpc = (_ref = CloudResources(constant.RESTYPE.VPC, Design.instance().region()).get(myVPCComponent.get('appId'))) != null ? _ref.attributes : void 0;
        appData = CloudResources(constant.RESTYPE.DHCP, Design.instance().region());
        if (!vpc) {
          return false;
        }
        vpc = $.extend(true, {}, vpc);
        vpc.name = myVPCComponent.get('name');
        vpc.description = myVPCComponent.get('description');
        TYPE_RTB = constant.RESTYPE.RT;
        TYPE_ACL = constant.RESTYPE.ACL;
        RtbModel = Design.modelClassForType(TYPE_RTB);
        AclModel = Design.modelClassForType(TYPE_ACL);
        vpc.mainRTB = RtbModel.getMainRouteTable();
        if (vpc.mainRTB) {
          vpc.mainRTB = vpc.mainRTB.get("appId");
        }
        vpc.defaultACL = AclModel.getDefaultAcl();
        if (vpc.defaultACL) {
          vpc.defaultACL = vpc.defaultACL.get("appId");
        }
        if (vpc.dhcpOptionsId) {
          if (!appData.get(vpc.dhcpOptionsId)) {
            vpc.default_dhcp = true;
          } else {
            dhcpData = (_ref1 = appData.get(myVPCComponent != null ? (_ref2 = myVPCComponent.toJSON().dhcp) != null ? _ref2.toJSON().appId : void 0 : void 0)) != null ? _ref1.attributes : void 0;
            vpc.dhcpOptionsId = myVPCComponent != null ? (_ref3 = myVPCComponent.toJSON().dhcp) != null ? (_ref4 = _ref3.toJSON()) != null ? _ref4.appId : void 0 : void 0 : void 0;
            dhcp = null;
            if (dhcpData) {
              dhcp = {};
              for (i in dhcpData) {
                dhcp[MC.camelCase(i)] = dhcpData[i];
              }
            }
            vpc.dhcp = dhcp;
          }
        }
        this.set(vpc);
        return null;
      }
    });
    return new VPCAppModel();
  });

}).call(this);

define('workspaces/awseditor/property/vpc/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n  <div class=\"property-control-group\">\n    <p>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DHCP_LBL_DEFAULT", {hash:{},data:data}))
    + "</p>\n  ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.defaultDhcp), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  ";
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <dl class=\"dl-vertical\">\n        <dd>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DHCP_LBL_NONE", {hash:{},data:data}))
    + "</dd>\n    </dl>\n  </div>\n  ";
  return buffer;
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DHCP_OPTION_SET_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.dhcpOptionsId), {hash:{},inverse:self.program(9, program9, data),fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.domainName), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.domainNameServers)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.ntpServers)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.netbiosNameServers)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.netbiosNodeType), {hash:{},inverse:self.noop,fn:self.program(20, program20, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  </dl>\n  ";
  return buffer;
  }
function program7(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = (depth0 && depth0.dhcpOptionsId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program9(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.dhcpOptionsId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DHCP_SPECIFIED_LBL_DOMAIN_NAME", {hash:{},data:data}))
    + "</dt>\n    <dd>";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.domainName), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n    ";
  return buffer;
  }
function program12(depth0,data) {
  
  var buffer = "";
  buffer += "<p>"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</p>";
  return buffer;
  }

function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DHCP_SPECIFIED_LBL_DOMAIN_NAME_SERVER", {hash:{},data:data}))
    + "</dt>\n    <dd>";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.domainNameServers), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </dd>\n    ";
  return buffer;
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DHCP_SPECIFIED_LBL_NTP_SERVER", {hash:{},data:data}))
    + "</dt>\n    <dd>";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.ntpServers), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </dd>\n    ";
  return buffer;
  }

function program18(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DHCP_SPECIFIED_LBL_NETBIOS_NAME_SERVER", {hash:{},data:data}))
    + "</dt>\n    <dd>";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.netbiosNameServers), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </dd>\n    ";
  return buffer;
  }

function program20(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DHCP_SPECIFIED_LBL_NETBIOS_NODE_TYPE", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.dhcp)),stack1 == null || stack1 === false ? stack1 : stack1.netbiosNodeType)),stack1 == null || stack1 === false ? stack1 : stack1[0])),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    ";
  return buffer;
  }

  buffer += "<article class=\"property-app\">\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_TIT_DETAIL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_VPC_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.name), {hash:{},data:data}))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_CIDR", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.cidrBlock)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_DETAIL_LBL_TENANCY", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.instanceTenancy)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_MAIN_RT", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.mainRTB)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_DEFAULT_ACL", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.defaultACL)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n  </div>\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_TIT_DHCP_OPTION", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.autoDhcp), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.defaultDhcp), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/vpc/app_view',['../base/view', './template/app'], function(PropertyView, template) {
    var VPCAppView;
    VPCAppView = PropertyView.extend({
      render: function() {
        var data;
        data = this.model.attributes;
        if (data.dhcpOptionsId === 'default') {
          data.defaultDhcp = true;
          data.autoDhcp = false;
        } else if (!data.dhcpOptionsId || !data.dhcp) {
          data.autoDhcp = true;
          data.defaultDhcp = false;
        } else if (data.dhcpOptionsId[0] !== "@") {
          data.autoDhcp = false;
          data.defaultDhcp = false;
        }
        this.$el.html(template(data));
        return this.model.attributes.name;
      }
    });
    return new VPCAppView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/vpc/main',['../base/main', './model', './view', './app_model', './app_view', 'constant'], function(PropertyModule, model, view, app_model, app_view, constant) {
    var VPCModule;
    VPCModule = PropertyModule.extend({
      handleTypes: constant.RESTYPE.VPC,
      initStack: function() {
        this.model = model;
        this.model.isAppEdit = false;
        this.view = view;
        return null;
      },
      initApp: function() {
        this.model = app_model;
        this.view = app_view;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.model.isAppEdit = true;
        this.view = view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/rtb/model',['../base/model', "Design", 'constant', "CloudResources", 'i18n!/nls/lang.js'], function(PropertyModel, Design, constant, CloudResources, lang) {
    var RTBModel;
    RTBModel = PropertyModel.extend({
      defaults: {
        'isAppEdit': false
      },
      setMainRT: function() {
        Design.instance().component(this.get("uid")).setMain();
        if (this.isAppEdit) {
          this.setMainMessage(this.get("uid"));
          this.set('isMain', Design.instance().component(this.get("uid")).get("main"));
        }
        return null;
      },
      reInit: function() {
        this.init(this.get("uid"));
        return null;
      },
      init: function(uid) {
        var VPCModel, cn, component, data, design, res_type, routes, subnet, theOtherPort, _i, _len, _ref;
        design = Design.instance();
        component = design.component(uid);
        res_type = constant.RESTYPE;
        if (component.node_line) {
          subnet = component.getTarget(res_type.SUBNET);
          component = component.getTarget(res_type.RT);
          if (subnet) {
            this.set({
              title: lang.IDE.TITLE_SUBNET_RT_ASSO,
              association: {
                subnet: subnet.get("name"),
                rtb: component.get("name")
              }
            });
            return;
          }
        }
        VPCModel = Design.modelClassForType(res_type.VPC);
        routes = [];
        data = {
          uid: component.id,
          description: component.get("description"),
          title: component.get("name"),
          isMain: component.get("main"),
          local_route: VPCModel.theVPC().get("cidr"),
          routes: routes,
          isAppEdit: this.isAppEdit
        };
        _ref = component.connections();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cn = _ref[_i];
          if (cn.type !== "RTB_Route") {
            continue;
          }
          theOtherPort = cn.getOtherTarget(res_type.RT);
          routes.push({
            name: theOtherPort.get("name"),
            type: theOtherPort.type,
            ref: cn.id,
            isVgw: theOtherPort.type === res_type.VGW,
            isProp: cn.get("propagate"),
            cidr_set: cn.get("routes")
          });
        }
        routes = _.sortBy(routes, "type");
        if (this.isAppEdit) {
          this.set('vpcId', component.parent().get('appId'));
          this.set('routeTableId', component.get('appId'));
          this.setMainMessage(uid);
        }
        this.set(data);
        return true;
      },
      setMainMessage: function(uid) {
        var appData, asso, aws_rt_is_main, component, now_main_rtb, _i, _len, _ref, _ref1;
        component = Design.instance().component(uid);
        appData = (_ref = CloudResources(constant.RESTYPE.RT, Design.instance().region()).get(component.get('appId'))) != null ? _ref.toJSON() : void 0;
        aws_rt_is_main = false;
        if (appData && appData.associationSet && appData.associationSet.length) {
          _ref1 = appData.associationSet;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            asso = _ref1[_i];
            if (asso.main === true) {
              aws_rt_is_main = true;
            }
          }
        }
        now_main_rtb = Design.modelClassForType(constant.RESTYPE.RT).getMainRouteTable();
        if (aws_rt_is_main && now_main_rtb.id !== component.id) {
          return this.set('main', 'Yes (Set as No after applying updates)');
        } else if (aws_rt_is_main && now_main_rtb.id === component.id) {
          return this.set('main', 'Yes');
        } else if (!aws_rt_is_main && now_main_rtb.id === component.id) {
          return this.set('main', 'No (Set as Yes after applying updates)');
        } else {
          return this.set('main', 'No');
        }
      },
      setPropagation: function(propagate) {
        var cn, component;
        component = Design.instance().component(this.get("uid"));
        cn = _.find(component.connections(), function(cn) {
          return cn.getTarget(constant.RESTYPE.VGW) !== null;
        });
        cn.setPropagate(propagate);
        return null;
      },
      setRoutes: function(routeId, routes) {
        _.each(routes, function(routeCidr, idx) {
          var validCIDR;
          validCIDR = MC.getValidCIDR(routeCidr);
          return routes[idx] = validCIDR;
        });
        Design.instance().component(routeId).set("routes", routes);
        return null;
      },
      isCidrConflict: function(inputValue, cidr) {
        return Design.modelClassForType(constant.RESTYPE.SUBNET).isCidrConflict(inputValue, cidr);
      }
    });
    return new RTBModel();
  });

}).call(this);

define('workspaces/awseditor/property/rtb/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"property-control-group\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_ASSOCIATION", {hash:{},data:data}))
    + " "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.subnet)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_ASSOCIATION_TO", {hash:{},data:data}))
    + " "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.rtb)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"property-control-group\" data-bind=\"true\">\n		<label class=\"left\" for=\"rt-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_NAME", {hash:{},data:data}))
    + "</label>\n		<input class=\"input\" type=\"text\" data-required=\"true\" data-ignore=\"true\" data-required-rollback=\"true\"  value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.title)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"rt-name\">\n	</div>\n\n	<section class=\"property-control-group\" data-bind=\"true\">\n        <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n        <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n	</section>\n\n	";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(7, program7, data),fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n\n\n	<div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_LBL_ROUTE", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\" data-bind=\"true\">\n		<ul class=\"property-list property-list-no-padding route-list\">\n			<li><table class=\"table-no-style\">\n			  <tr class=\"route-target\">\n			    <td class=\"route-label\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_TARGET", {hash:{},data:data}))
    + "</td>\n			    <td class=\"route-target-resource\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_LOCAL", {hash:{},data:data}))
    + "</td>\n			  </tr>\n			  <tr>\n			    <td class=\"route-label\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_DESTINATION", {hash:{},data:data}))
    + "</td>\n			    <td class=\"route-destination-input\">\n			    	<div class=\"route-destination-input multi-input\"><input class=\"input\" disabled=\"disabled\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.local_route)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></div>\n			    </td>\n			  </tr>\n			</table></li>\n\n			";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.routes), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</ul>\n	</div>\n";
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	  <dl class=\"dl-vertical\">\n	    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_ID", {hash:{},data:data}))
    + "</dt>\n	    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.routeTableId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n	    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_LBL_MAIN_RT", {hash:{},data:data}))
    + "</dt>\n	    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.main)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n	    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_VPC_ID", {hash:{},data:data}))
    + "</dt>\n	    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.vpcId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n	  </dl>\n\n	  	";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isMain), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n	";
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = "";
  buffer += "\n	  	<div class=\"tac property-control-group\">\n			<button class=\"btn btn-primary\" id=\"set-main-rt\" style=\"width: 200px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_SET_MAIN", {hash:{},data:data}))
    + "</button>\n			<p class=\"hide\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_LBL_MAIN_RT", {hash:{},data:data}))
    + "</p>\n		</div>\n		";
  return buffer;
  }

function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"tac property-control-group\">\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isMain), {hash:{},inverse:self.program(10, program10, data),fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</div>\n	";
  return buffer;
  }
function program8(depth0,data) {
  
  var buffer = "";
  buffer += "\n			<p>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_LBL_MAIN_RT", {hash:{},data:data}))
    + "</p>\n			";
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = "";
  buffer += "\n			<button class=\"btn btn-primary\" id=\"set-main-rt\" style=\"width: 200px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_SET_MAIN", {hash:{},data:data}))
    + "</button>\n			<p class=\"hide\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_LBL_MAIN_RT", {hash:{},data:data}))
    + "</p>\n			";
  return buffer;
  }

function program12(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<li><table class=\"table-no-style\">\n			  <tr class=\"route-target\">\n			    <td class=\"route-label\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_TARGET", {hash:{},data:data}))
    + "</td>\n			    <td class=\"route-target-resource\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n			  </tr>\n\n			  <tr>\n			    <td class=\"route-label\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_DESTINATION", {hash:{},data:data}))
    + "</td>\n			    <td class=\"route-destination-input\">\n			    	<div class=\"route-destination-input multi-input\" data-ref=\""
    + escapeExpression(((stack1 = (depth0 && depth0.ref)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n\n						";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.cidr_set), {hash:{},inverse:self.program(15, program15, data),fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				    </div>\n\n				    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isVgw), {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			    </td>\n			  </tr>\n			</table></li>\n			";
  return buffer;
  }
function program13(depth0,data) {
  
  var buffer = "";
  buffer += "\n						<div class=\"multi-ipt-row\">\n		          <span class=\"ipt-controls\"><a href=\"#\" class=\"icon-del\"></a><a href=\"#\" class=\"icon-add\"></a></span>\n		          <span class=\"ipt-wrapper\"><input class=\"ip-main-input input\" data-ignore=\"true\" data-ignore-regexp=\"^[0-9./]*$\" data-type=\"cidr\" data-trigger=\"change\" placeholder=\"eg. 0.0.0.0/0\" value=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\" type=\"text\"></span>\n		        </div>\n						";
  return buffer;
  }

function program15(depth0,data) {
  
  
  return "\n						<div class=\"multi-ipt-row\">\n		          <span class=\"ipt-controls\"><a href=\"#\" class=\"icon-del\"></a><a href=\"#\" class=\"icon-add\"></a></span>\n		          <span class=\"ipt-wrapper\"><input class=\"input tooltip\" data-ignore=\"true\" data-ignore-regexp=\"^[0-9./]*$\" placeholder=\"eg. 0.0.0.0/0\" data-empty-remove=\"true\" type=\"text\"></span>\n		        </div>\n			      ";
  }

function program17(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				    <div class=\"property-control-group\">\n							<div class=\"checkbox\">\n								<input id=\"propagate_"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" type=\"checkbox\" class=\"propagation\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isProp), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n								<label for=\"propagate_"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></label>\n							</div>\n							<label for=\"propagate_"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RTB_ALLOW_PROPAGATION", {hash:{},data:data}))
    + "</label>\n						</div>\n						";
  return buffer;
  }
function program18(depth0,data) {
  
  
  return "checked=\"true\"";
  }

  buffer += "<article>\n";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.association), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/rtb/view',['../base/view', './template/stack', 'i18n!/nls/lang.js'], function(PropertyView, template, lang) {
    var RTBView;
    RTBView = PropertyView.extend({
      events: {
        'REMOVE_ROW  .multi-input': 'removeIp',
        'ADD_ROW     .multi-input': 'processParsley',
        'BEFORE_REMOVE_ROW  .multi-input': 'beforeRemoveIp',
        'change #rt-name': 'changeName',
        'click #set-main-rt': 'setMainRT',
        'change .propagation': 'changePropagation',
        "focus .ipt-wrapper .input": 'onFocusCIDR',
        "keypress .ipt-wrapper .input": 'onPressCIDR',
        "blur .ipt-wrapper .input": 'onBlurCIDR',
        'change #property-res-desc': 'onChangeDescription'
      },
      render: function() {
        this.$el.html(template(this.model.attributes));
        return this.model.attributes.title;
      },
      onChangeDescription: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      processParsley: function(event) {
        $(event.currentTarget).find('input').last().focus().removeClass('parsley-validated').removeClass('parsley-error').next('.parsley-error-list').remove();
        return null;
      },
      beforeRemoveIp: function(event) {
        var $nonEmptyInputs;
        $nonEmptyInputs = $(event.currentTarget).find("input").filter(function() {
          return this.value.length;
        });
        if ($nonEmptyInputs.length <= 1 && event.value) {
          return false;
        }
        return null;
      },
      removeIp: function(event) {
        var $target, newIps;
        $target = $(event.currentTarget);
        newIps = _.map($target.find("input"), function(input) {
          return input.value;
        });
        this.model.setRoutes($target.attr("data-ref"), _.uniq(newIps));
        return null;
      },
      changeName: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "Route Table")) {
          this.model.setName(name);
          return this.setTitle(name);
        }
      },
      setMainRT: function() {
        if (this.model.isAppEdit) {
          this.model.setMainRT();
          this.render();
        } else {
          $("#set-main-rt").hide().parent().find("p").show();
          this.model.setMainRT();
        }
        return null;
      },
      changePropagation: function(event) {
        this.model.setPropagation($(event.target).is(":checked"));
        return null;
      },
      onPressCIDR: function(event) {
        if (event.keyCode === 13) {
          return $(event.currentTarget).blur();
        }
      },
      onFocusCIDR: function(event) {
        this.disabledAllOperabilityArea(true);
        return null;
      },
      onBlurCIDR: function(event) {
        var allCidrAry, cidr, dataRef, descContent, dialog_template, idx, inputElem, inputValue, ips, mainContent, parentElem, that, _i, _len;
        inputElem = $(event.currentTarget);
        inputValue = inputElem.val();
        parentElem = inputElem.closest(".multi-input");
        dataRef = parentElem.attr("data-ref");
        ips = [];
        parentElem.find("input").each(function() {
          if (this !== event.currentTarget && this.value) {
            ips.push(this.value);
          }
          return null;
        });
        allCidrAry = _.uniq(ips);
        parentElem.closest("li").siblings().each(function() {
          var otherGroupIps;
          otherGroupIps = [];
          $(this).find("input").each(function() {
            if (this.value) {
              otherGroupIps.push(this.value);
            }
            return null;
          });
          allCidrAry = allCidrAry.concat(_.uniq(otherGroupIps));
          return null;
        });
        if (!inputValue) {
          if (inputElem.closest('.multi-ipt-row').siblings().length === 0) {
            mainContent = lang.PROP.RTB_CIDR_BLOCK_REQUIRED;
            descContent = lang.PROP.RTB_CIDR_BLOCK_REQUIRED_DESC;
          }
        } else if (!MC.validate('cidr', inputValue)) {
          mainContent = sprintf(lang.PROP.RTB_CIDR_BLOCK_INVALID, inputValue);
          descContent = lang.PROP.RTB_CIDR_BLOCK_INVALID_DESC;
        } else {
          for (idx = _i = 0, _len = allCidrAry.length; _i < _len; idx = ++_i) {
            cidr = allCidrAry[idx];
            if (inputValue === cidr) {
              mainContent = sprintf(lang.PROP.RTB_CIDR_BLOCK_CONFLICTS, inputValue);
              descContent = lang.PROP.RTB_CIDR_BLOCK_CONFLICTS_DESC;
              break;
            }
            if (idx === 0 && cidr !== "0.0.0.0/0" && this.model.isCidrConflict(inputValue, cidr)) {
              mainContent = sprintf(lang.PROP.RTB_CIDR_BLOCK_CONFLICTS_LOCAL, inputValue);
              descContent = lang.PROP.RTB_CIDR_BLOCK_CONFLICTS_LOCAL_DESC;
              break;
            }
          }
        }
        if (!mainContent) {
          if (inputValue) {
            ips.push(inputValue);
          }
          this.model.setRoutes(dataRef, _.uniq(ips));
          this.disabledAllOperabilityArea(false);
          return;
        }
        dialog_template = MC.template.setupCIDRConfirm({
          remove_content: lang.PROP.REMOVE_ROUTE,
          main_content: mainContent,
          desc_content: descContent
        });
        that = this;
        modal(dialog_template, false, function() {
          $('.modal-close').click(function() {
            return inputElem.focus();
          });
          return $('#cidr-remove').click(function() {
            Design.instance().component(dataRef).remove();
            that.disabledAllOperabilityArea(false);
            return modal.close();
          });
        }, {
          $source: $(event.target)
        });
        return null;
      }
    });
    return new RTBView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/rtb/app_model',['../base/model', 'constant', 'Design', 'CloudResources'], function(PropertyModel, constant, Design, CloudResources) {
    var RTBAppModel;
    RTBAppModel = PropertyModel.extend({
      processTarget: function(rtb) {
        rtb.routeSet = _.map(rtb.routeSet, function(item) {
          item.target = item.instanceId || item.networkInterfaceId || item.gatewayId;
          if (item.target !== "local") {
            Design.instance().eachComponent(function(component) {
              if (component.get("appId") === item.target) {
                item.target = component.get("name");
                return;
              }
              return null;
            });
          }
          return item;
        });
        return null;
      },
      init: function(rtb_uid) {
        var asso, connectedTo, data, has_main, has_subnet, i, key, propagate, routeTable, rtb, rtbOrConn, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4;
        rtbOrConn = Design.instance().component(rtb_uid);
        if (rtbOrConn.type === constant.RESTYPE.RT) {
          routeTable = rtbOrConn;
        } else {
          data = {};
          connectedTo = rtbOrConn.getOtherTarget(constant.RESTYPE.RT);
          routeTable = rtbOrConn.getTarget(constant.RESTYPE.RT);
          if (connectedTo.type === constant.RESTYPE.SUBNET) {
            data.subnet = connectedTo.get('name');
            has_subnet = true;
          }
          data.rtb = routeTable.get('name');
          rtb_uid = routeTable.id;
          if (has_subnet) {
            this.set('association', data);
            this.set('name', 'Subnet-RT Association');
            return;
          }
        }
        rtb = (_ref = CloudResources(constant.RESTYPE.RT, Design.instance().region()).get(routeTable.get('appId'))) != null ? _ref.toJSON() : void 0;
        if (!rtb) {
          return false;
        }
        rtb = $.extend(true, {}, rtb);
        rtb.name = routeTable.get('name');
        rtb.description = routeTable.get('description');
        has_main = false;
        if (rtb.associationSet && rtb.associationSet.length) {
          _ref1 = rtb.associationSet;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            asso = _ref1[_i];
            if (asso.main === true) {
              has_main = true;
            }
          }
        }
        if (has_main) {
          rtb.main = "Yes";
        } else {
          rtb.main = "No";
        }
        _ref2 = rtb.routeSet;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          i = _ref2[_j];
          if (i.state === "active") {
            i.active = true;
          }
        }
        propagate = {};
        if (rtb.propagatingVgwSet && rtb.propagatingVgwSet.length) {
          _ref3 = rtb.propagatingVgwSet;
          for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
            i = _ref3[_k];
            propagate[i.gatewayId] = true;
          }
        }
        _ref4 = rtb.routeSet;
        for (key = _l = 0, _len3 = _ref4.length; _l < _len3; key = ++_l) {
          value = _ref4[key];
          if (propagate[value.gatewayId]) {
            value.propagate = true;
          }
        }
        this.processTarget(rtb);
        return this.set(rtb);
      }
    });
    return new RTBAppModel();
  });

}).call(this);

define('workspaces/awseditor/property/rtb/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"property-control-group\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_ASSOCIATION", {hash:{},data:data}))
    + " "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.subnet)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_ASSOCIATION_TO", {hash:{},data:data}))
    + " "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.rtb)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n  ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.name), {hash:{},data:data}))
    + "</dd>\n\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_LBL_MAIN_RT", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.main)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_VPC_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.vpcId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n  </dl>\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_LBL_ROUTE", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <table class=\"table table-small\">\n      <thead>\n        <tr>\n          <th></th>\n          <th>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_DESTINATION", {hash:{},data:data}))
    + "</th>\n          <th>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_TARGET", {hash:{},data:data}))
    + "</th>\n          <th></th>\n        </tr>\n      </thead>\n      ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.routeSet), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </table>\n  </div>\n  ";
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <tr>\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.destinationCidrBlock)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n        <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.target)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.propagate), {hash:{},inverse:self.program(11, program11, data),fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </tr>\n      ";
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = "";
  buffer += "\n        <td><i class=\"status status-green tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_TIP_ACTIVE", {hash:{},data:data}))
    + "\"></i></td>\n        ";
  return buffer;
  }

function program7(depth0,data) {
  
  var buffer = "";
  buffer += "\n        <td><i class=\"status status-red tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_TIP_BLACKHOLE", {hash:{},data:data}))
    + "\"></i></td>\n        ";
  return buffer;
  }

function program9(depth0,data) {
  
  var buffer = "";
  buffer += "\n        <td><i class=\"icon-info tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RT_TIP_PROPAGATED", {hash:{},data:data}))
    + "\"></i></td>\n        ";
  return buffer;
  }

function program11(depth0,data) {
  
  
  return "\n        <td></td>\n        ";
  }

  buffer += "<article class=\"property-app\">\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.association), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/rtb/app_view',['../base/view', './template/app'], function(PropertyView, template) {
    var RtbAppView;
    RtbAppView = PropertyView.extend({
      render: function() {
        this.$el.html(template(this.model.attributes));
        return this.model.attributes.name;
      }
    });
    return new RtbAppView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/rtb/main',['../base/main', './model', './view', './app_model', './app_view', 'event', 'constant'], function(PropertyModule, model, view, app_model, app_view, ide_event, constant) {
    var RTBModule;
    RTBModule = PropertyModule.extend({
      handleTypes: [constant.RESTYPE.RT, "RTB_Route", "RTB_Asso"],
      initStack: function() {
        this.model = model;
        this.model.isAppEdit = false;
        this.view = view;
        return null;
      },
      initApp: function() {
        this.model = app_model;
        this.view = app_view;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.model.isAppEdit = true;
        this.view = view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/static/model',["../base/model", "Design", "constant", 'CloudResources'], function(PropertyModel, Design, constant, CloudResources) {
    var StaticModel;
    StaticModel = PropertyModel.extend({
      init: function(id) {
        var appId, component, data, isIGW, _ref;
        component = Design.instance().component(id);
        isIGW = component.type === constant.RESTYPE.IGW;
        this.set("isIGW", isIGW);
        if (this.isApp) {
          this.set("readOnly", true);
          appId = component.get("appId");
          data = (_ref = CloudResources(component.type, Design.instance().region()).get(appId)) != null ? _ref.toJSON() : void 0;
        }
        if (data) {
          if (data.attachments && data.attachments.length) {
            data.attachment_state = data.attachments[0].state;
          } else if (data.attachmentSet && data.attachmentSet.length) {
            data.attachment_state = data.attachmentSet[0].state;
          }
          this.set(data);
          this.set('appId', data.id);
        }
        return null;
      }
    });
    return new StaticModel();
  });

}).call(this);

define('workspaces/awseditor/property/static/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <article class=\"property-app\">\n  <dl class=\"dl-vertical\">\n    <dt>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isIGW), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ID</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.appId), {hash:{},data:data}))
    + "</dd>\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isIGW), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.type), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <dt>VPC</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.vpcId), {hash:{},data:data}))
    + "</dd>\n  </dl>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return "Internet Gateway";
  }

function program4(depth0,data) {
  
  
  return "VPN Gateway";
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-xgw-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    ";
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPC_APP_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-xgw-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ATTACHMENT_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-xgw-"
    + escapeExpression(((stack1 = (depth0 && depth0.attachment_state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.attachment_state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    ";
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dt>type</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.type)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    ";
  return buffer;
  }

function program12(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <article>\n  <div  class=\"property-control-group\">\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isIGW), {hash:{},inverse:self.program(15, program15, data),fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n";
  return buffer;
  }
function program13(depth0,data) {
  
  var buffer = "";
  buffer += "\n    "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.IGW_TXT_DESCRIPTION", {hash:{},data:data}))
    + "\n  ";
  return buffer;
  }

function program15(depth0,data) {
  
  var buffer = "";
  buffer += "\n    "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VGW_TXT_DESCRIPTION", {hash:{},data:data}))
    + "\n  ";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, (depth0 && depth0.readOnly), {hash:{},inverse:self.program(12, program12, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/static/view',['../base/view', './template/stack'], function(PropertyView, template) {
    var StaticView;
    StaticView = PropertyView.extend({
      render: function() {
        this.$el.html(template(this.model.attributes));
        if (this.model.get("isIGW")) {
          return "Internet-gateway";
        } else {
          return "VPN-gateway";
        }
      }
    });
    return new StaticView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/static/main',['../base/main', './model', './view', 'constant'], function(PropertyModule, model, view, constant) {
    var StaticModule;
    StaticModule = PropertyModule.extend({
      handleTypes: [constant.RESTYPE.VGW, constant.RESTYPE.IGW],
      initStack: function() {
        this.model = model;
        this.view = view;
        this.model.isApp = false;
        return null;
      },
      initApp: function() {
        this.model = model;
        this.view = view;
        this.model.isApp = true;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.view = view;
        this.model.isApp = true;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/cgw/model',['../base/model', "Design", 'constant'], function(PropertyModel, Design, constant) {
    var CGWModel;
    CGWModel = PropertyModel.extend({
      init: function(uid) {
        var cgw;
        cgw = Design.instance().component(uid);
        this.set({
          uid: uid,
          name: cgw.get("name"),
          description: cgw.get("description"),
          BGP: cgw.get("bgpAsn"),
          ip: cgw.get("ip")
        });
        return null;
      },
      setIP: function(ip) {
        Design.instance().component(this.get("uid")).set("ip", ip);
        return null;
      },
      setBGP: function(bgp) {
        Design.instance().component(this.get("uid")).set("bgpAsn", bgp);
        return null;
      }
    });
    return new CGWModel();
  });

}).call(this);

define('workspaces/awseditor/property/cgw/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  
  return "checked=\"checked\" ";
  }

function program3(depth0,data) {
  
  
  return "style=\"display:none;\"";
  }

  buffer += "<article id=\"property-cgw\" data-bind=\"true\">\n	<div class=\"property-control-group clearfix\">\n		<label class=\"left\" for=\"property-cgw-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_NAME", {hash:{},data:data}))
    + "</label>\n		<span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n		<input class=\"input\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-cgw-name\" data-ignore=\"true\"/>\n	</div>\n\n	<div class=\"property-control-group\">\n        <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n        <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n	</div>\n\n	<div class=\"property-control-group clearfix\">\n		<label class=\"left\" for=\"property-cgw-ip\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_IPADDR", {hash:{},data:data}))
    + "</label>\n		<span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n		<input class=\"input tooltip\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.ip)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-ignore=\"true\" data-ignore-regexp=\"^[0-9.]*$\" id=\"property-cgw-ip\" data-empty-remove=\"true\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_TIP_THIS_ADDRESS_MUST_BE_STATIC", {hash:{},data:data}))
    + "\"/>\n	</div>\n\n	<div class=\"property-control-group clearfix cgw-routing\">\n		<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_ROUTING", {hash:{},data:data}))
    + "</label>\n		<p></p>\n		<div class=\"radio\">\n			<input id=\"property-routing-static\" type=\"radio\" name=\"routing-type\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.BGP), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "value=\"static\" />\n			<label for=\"property-routing-static\"></label>\n		</div>\n		<label for=\"property-routing-static\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_STATIC", {hash:{},data:data}))
    + "</label>\n	</div>\n\n	<div class=\"property-control-group clearfix cgw-routing\">\n		<div class=\"radio\">\n			<input id=\"property-routing-dynamic\" type=\"radio\" name=\"routing-type\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.BGP), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "value=\"dynamic\" />\n			<label for=\"property-routing-dynamic\"></label>\n		</div>\n		<label for=\"property-routing-dynamic\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_DYNAMIC", {hash:{},data:data}))
    + "</label>\n	</div>\n\n	<div class=\"property-control-group clearfix\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.BGP), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " id=\"property-cgw-bgp-wrapper\">\n		<label class=\"left\" for=\"property-cgw-bgp\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_BGP_ASN", {hash:{},data:data}))
    + "</label>\n		<span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n		<input class=\"input tooltip\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.BGP)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-cgw-bgp\" maxlength=\"5\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_TIP_1TO65534", {hash:{},data:data}))
    + "\" data-type=\"digits\" />\n	</div>\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/cgw/view',['i18n!/nls/lang.js', '../base/view', './template/stack', 'constant', "Design"], function(lang, PropertyView, template, constant, Design) {
    var CGWView;
    CGWView = PropertyView.extend({
      events: {
        "click #property-cgw .cgw-routing input": 'onChangeRouting',
        "change #property-cgw-bgp": 'onChangeBGP',
        "change #property-cgw-name": 'onChangeName',
        "focus #property-cgw-ip": 'onFocusIP',
        "keypress #property-cgw-ip": 'onPressIP',
        "blur #property-cgw-ip": 'onBlurIP',
        'change #property-res-desc': 'onChangeDescription'
      },
      render: function() {
        this.$el.html(template(this.model.toJSON()));
        return this.model.get('name');
      },
      onChangeDescription: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      onChangeRouting: function() {
        $('#property-cgw-bgp-wrapper').toggle($('#property-routing-dynamic').is(':checked'));
        return this.model.setBGP("");
      },
      onChangeBGP: function(event) {
        var $target, region;
        $target = $(event.currentTarget);
        region = Design.instance().region();
        if (!$target.val()) {
          this.model.setBGP("");
          return;
        }
        $target.parsley('custom', function(val) {
          val = +val;
          if (val < 1 || val > 65534) {
            return lang.PARSLEY.MUST_BE_BETWEEN_1_AND_65534;
          }
          if (val === 7224 && region === 'us-east-1') {
            return lang.PARSLEY.ASN_NUMBER_7224_RESERVED;
          }
          if (val === 9059 && region === 'eu-west-1') {
            return lang.PARSLEY.ASN_NUMBER_9059_RESERVED_IN_IRELAND;
          }
        });
        if ($target.parsley('validate')) {
          this.model.setBGP($target.val());
        }
        return null;
      },
      onChangeName: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "Customer Gateway")) {
          this.model.setName(name);
          return this.setTitle(name);
        }
      },
      onPressIP: function(event) {
        if (event.keyCode === 13) {
          return $('#property-cgw-ip').blur();
        }
      },
      onFocusIP: function(event) {
        this.disabledAllOperabilityArea(true);
        return null;
      },
      onBlurIP: function(event) {
        var descContent, dialog_template, haveError, ipAddr, mainContent, that;
        ipAddr = $('#property-cgw-ip').val();
        haveError = true;
        if (!ipAddr) {
          mainContent = lang.PROP.CGW_IP_VALIDATE_REQUIRED;
          descContent = lang.PROP.CGW_IP_VALIDATE_REQUIRED_DESC;
        } else if (!MC.validate('ipv4', ipAddr)) {
          mainContent = sprintf(lang.PROP.CGW_IP_VALIDATE_INVALID, ipAddr);
          descContent = lang.PROP.CGW_IP_VALIDATE_INVALID_DESC;
        } else if (MC.aws.aws.isValidInIPRange(ipAddr, 'private')) {
          mainContent = sprintf(lang.PROP.CGW_IP_VALIDATE_INVALID_CUSTOM, ipAddr);
          descContent = lang.PROP.CGW_IP_VALIDATE_INVALID_CUSTOM_DESC;
        } else {
          haveError = false;
        }
        if (!haveError) {
          this.model.setIP(event.target.value);
          this.disabledAllOperabilityArea(false);
          return;
        }
        dialog_template = MC.template.setupCIDRConfirm({
          remove_content: lang.PROP.CGW_REMOVE_CUSTOM_GATEWAY,
          main_content: mainContent,
          desc_content: descContent
        });
        that = this;
        return modal(dialog_template, false, function() {
          $('.modal-close').click(function() {
            return $('#property-cgw-ip').focus();
          });
          return $('#cidr-remove').click(function() {
            Design.instance().component(that.model.get("uid")).remove();
            that.disabledAllOperabilityArea(false);
            return modal.close();
          });
        }, {
          $source: $(event.target)
        });
      }
    });
    return new CGWView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/cgw/app_model',['../base/model', 'Design', 'constant', 'CloudResources'], function(PropertyModel, Design, constant, CloudResources) {
    var CGWAppModel;
    CGWAppModel = PropertyModel.extend({
      init: function(uid) {
        var cgw, myCGWComponent, _ref;
        myCGWComponent = Design.instance().component(uid);
        cgw = (_ref = CloudResources(constant.RESTYPE.CGW, Design.instance().region()).get(myCGWComponent.get('appId'))) != null ? _ref.toJSON() : void 0;
        if (!cgw) {
          return false;
        }
        cgw = $.extend(true, {}, cgw);
        cgw.uid = uid;
        cgw.name = myCGWComponent.get('name');
        cgw.description = myCGWComponent.get('description');
        this.set(cgw);
        return null;
      }
    });
    return new CGWAppModel();
  });

}).call(this);

define('workspaces/awseditor/property/cgw/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n    ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"property-control-group clearfix\">\n      <label class=\"left\" for=\"property-cgw-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_NAME", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n      <input class=\"input\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-cgw-name\" data-ignore=\"true\"/>\n  </div>\n  <section class=\"property-control-group\" data-bind=\"true\">\n    <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n    <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n  </section>\n  ";
  return buffer;
  }

  buffer += "<article class=\"property-app\">\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_CGW_LBL_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.customerGatewayId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.name), {hash:{},data:data}))
    + "</dd>\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </dl>\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_CGW_LBL_STATE", {hash:{},data:data}))
    + "</dt>\n    <dd><i class=\"status status-xgw-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_IPADDR", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.ipAddress)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_CGW_LBL_TYPE", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.type)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_BGP_ASN", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.bgpAsn)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n  </dl>\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/cgw/app_view',['../base/view', './template/app'], function(PropertyView, template) {
    var CGWAppView;
    CGWAppView = PropertyView.extend({
      events: {
        'change #property-res-desc': 'onChangeDescription',
        "change #property-cgw-name": 'onChangeName'
      },
      render: function() {
        var _ref;
        this.$el.html(template(_.extend({
          isEditable: this.model.isAppEdit
        }, (_ref = this.model) != null ? _ref.toJSON() : void 0)));
        return this.model.get('id');
      },
      onChangeName: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "Customer Gateway")) {
          this.model.setName(name);
          return this.setTitle(name);
        }
      },
      onChangeDescription: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      }
    });
    return new CGWAppView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/cgw/main',['../base/main', './model', './view', './app_model', './app_view', 'constant'], function(PropertyModule, model, view, app_model, app_view, constant) {
    var CGWModule;
    CGWModule = PropertyModule.extend({
      handleTypes: constant.RESTYPE.CGW,
      initStack: function() {
        this.model = model;
        this.view = view;
        return null;
      },
      initApp: function() {
        this.model = app_model;
        this.model.isAppEdit = false;
        this.view = app_view;
        return null;
      },
      initAppEdit: function() {
        this.model = app_model;
        this.model.isAppEdit = true;
        this.view = app_view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/vpn/model',['../base/model', "Design", "constant", 'CloudResources'], function(PropertyModel, Design, constant, CloudResources) {
    var VPNModel, generateDownload;
    generateDownload = function(configs, vpn_data) {
      var defaultCfg, parse_result;
      defaultCfg = "{}";
      if (!vpn_data.customerGatewayConfiguration) {
        return defaultCfg;
      }
      vpn_data = $.xml2json($.parseXML(vpn_data.customerGatewayConfiguration));
      if (!vpn_data) {
        return defaultCfg;
      }
      vpn_data = vpn_data.vpn_connection;
      parse_result = _.map(configs, function(config) {
        var dc_data, dc_filename;
        dc_data = {
          vpnConnectionId: vpn_data['@attributes'].id || "",
          vpnGatewayId: vpn_data.vpn_gateway_id || "",
          customerGatewayId: vpn_data.customer_gateway_id || ""
        };
        dc_data.tunnel = _.map(vpn_data.ipsec_tunnel, function(value, key) {
          var cur_array;
          cur_array = {};
          cur_array.number = key + 1;
          cur_array.ike_protocol_method = value.ike.authentication_protocol || "";
          cur_array.ike_pre_shared_key = value.ike.pre_shared_key || "";
          cur_array.ike_authentication_protocol_algorithm = value.ike.authentication_protocol || "";
          cur_array.ike_encryption_protocol = value.ike.encryption_protocol || "";
          cur_array.ike_lifetime = value.ike.lifetime || "";
          cur_array.ike_mode = value.ike.mode || "";
          cur_array.ike_perfect_forward_secrecy = value.ike.perfect_forward_secrecy || "";
          cur_array.ipsec_protocol = value.ipsec.protocol || "";
          cur_array.ipsec_authentication_protocol = value.ipsec.authentication_protocol || "";
          cur_array.ipsec_encryption_protocol = value.ipsec.encryption_protocol || "";
          cur_array.ipsec_lifetime = value.ipsec.lifetime || "";
          cur_array.ipsec_mode = value.ipsec.mode || "";
          cur_array.ipsec_perfect_forward_secrecy = value.ipsec.perfect_forward_secrecy || "";
          cur_array.ipsec_interval = value.ipsec.dead_peer_detection.interval || "";
          cur_array.ipsec_retries = value.ipsec.dead_peer_detection.retries || "";
          cur_array.tcp_mss_adjustment = value.ipsec.tcp_mss_adjustment || "";
          cur_array.clear_df_bit = value.ipsec.clear_df_bit || "";
          cur_array.fragmentation_before_encryption = value.ipsec.fragmentation_before_encryption || "";
          cur_array.customer_gateway_outside_address = value.customer_gateway.tunnel_outside_address.ip_address || "";
          cur_array.vpn_gateway_outside_address = value.vpn_gateway.tunnel_outside_address.ip_address || "";
          cur_array.customer_gateway_inside_address = value.customer_gateway.tunnel_inside_address.ip_address + '/' + value.customer_gateway.tunnel_inside_address.network_cidr || "";
          cur_array.vpn_gateway_inside_address = value.vpn_gateway.tunnel_inside_address.ip_address + '/' + value.customer_gateway.tunnel_inside_address.network_cidr || "";
          cur_array.next_hop = value.vpn_gateway.tunnel_inside_address.ip_address || "";
          cur_array.isStaticRouting = true;
          if (value.customer_gateway.bgp && value.customer_gateway.bgp.asn) {
            cur_array.isStaticRouting = false;
            cur_array.customer_gateway_bgp_asn = value.customer_gateway.bgp.asn || "";
            cur_array.vpn_gateway_bgp_asn = value.vpn_gateway.bgp.asn || "";
            cur_array.neighbor_ip_address = value.vpn_gateway.tunnel_inside_address.ip_address || "";
            cur_array.customer_gateway_bgp_hold_time = value.customer_gateway.bgp.hold_time || "";
          }
          return cur_array;
        });
        dc_filename = dc_data.vpnConnectionId || 'download_configuration';
        dc_data = MC.template.configurationDownload(dc_data);
        return "{\"download\":true, \"filecontent\":\"" + (Base64.encode(dc_data)) + "\", \"filename\":\"" + dc_filename + "\", \"btnname\":\"" + config.name + "\"}";
      });
      return "[ " + (parse_result.join(',')) + " ]";
    };
    VPNModel = PropertyModel.extend({
      init: function(uid) {
        var cgw, vgw, vpn;
        vpn = Design.instance().component(uid);
        vgw = vpn.getTarget(constant.RESTYPE.VGW);
        cgw = vpn.getTarget(constant.RESTYPE.CGW);
        if (this.isApp || this.isAppEdit) {
          this.getAppData(vpn.get("appId"));
        }
        this.set({
          uid: uid,
          name: "vpn:" + (cgw.get('name')),
          ips: vpn.get("routes"),
          dynamic: cgw.isDynamic()
        });
        return null;
      },
      updateIps: function(ipset) {
        _.each(ipset, function(ipCidr, idx) {
          var validCIDR;
          validCIDR = MC.getValidCIDR(ipCidr);
          ipset[idx] = validCIDR;
        });
        Design.instance().component(this.get("uid")).set("routes", ipset);
        return null;
      },
      getAppData: function(vpnAppId) {
        var vpn, vpncfg, vpncfg_str, _ref;
        vpn = (_ref = CloudResources(constant.RESTYPE.VPN, Design.instance().region()).get(vpnAppId)) != null ? _ref.toJSON() : void 0;
        vpn = _.clone(vpn);
        if (vpn) {
          vpncfg_str = generateDownload([
            {
              "type": "download_configuration",
              "name": "Download Configuration"
            }
          ], vpn);
          vpncfg = JSON.parse(vpncfg_str);
          if (vpncfg && vpncfg.length > 0) {
            this.set("vpncfg", vpncfg[0]);
          }
        }
        if (vpn.vgwTelemetry && vpn.vgwTelemetry.item) {
          vpn.vgwTelemetry = _.map(vpn.vgwTelemetry.item, function(item, idx) {
            item = $.extend(true, {}, item);
            item.index = idx + 1;
            return item;
          });
        }
        vpn.isApp = this.isApp;
        return this.set(vpn);
      },
      isCidrConflict: function(inputValue, cidr) {
        return Design.modelClassForType(constant.RESTYPE.SUBNET).isCidrConflict(inputValue, cidr);
      }
    });
    return new VPNModel();
  });

}).call(this);

define('workspaces/awseditor/property/vpn/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPN_SUMMARY", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_LBL_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.vpnConnectionId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_LBL_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-xgw-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_LBL_TYPE", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.type)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_LBL_ROUTING", {hash:{},data:data}))
    + "</dt>\n      <dd>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.options)),stack1 == null || stack1 === false ? stack1 : stack1.staticRoutesOnly), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n\n      <a class='btn btn-primary vpn-download' href=\"data:text/plain;base64,";
  stack1 = ((stack1 = ((stack1 = (depth0 && depth0.vpncfg)),stack1 == null || stack1 === false ? stack1 : stack1.filecontent)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" download=\"";
  stack1 = ((stack1 = ((stack1 = (depth0 && depth0.vpncfg)),stack1 == null || stack1 === false ? stack1 : stack1.filename)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ".txt\" style=\"padding:8px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_TIT_DOWNLOAD_CONF", {hash:{},data:data}))
    + "</a>\n\n    </dl>\n  </div>\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.vgwTelemetry), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isApp), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.VPN_STACK_STATIC", {hash:{},data:data}));
  }

function program4(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.VPN_STACK_DYNAMIC", {hash:{},data:data}));
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_LBL_TUNNEL", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n        <table class=\"table\">\n            <thead>\n            <tr>\n                <th style=\"width:20px\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_COL_TUNNEL", {hash:{},data:data}))
    + "</th>\n                <th style=\"width:100px\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_COL_IP", {hash:{},data:data}))
    + "</th>\n            </tr>\n            </thead>\n            <tbody>\n            ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.vgwTelemetry), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            </tbody>\n        </table>\n    </div>\n  ";
  return buffer;
  }
function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <tr>\n                <td><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " icon-label tooltip\"\n                       data-tooltip=\"";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.status), "DOWN", {hash:{},inverse:self.program(10, program10, data),fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " since "
    + escapeExpression(((stack1 = (depth0 && depth0.lastStatusChange)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.statusMessage), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n                </td>\n                <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.outsideIpAddress)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n            </tr>\n            ";
  return buffer;
  }
function program8(depth0,data) {
  
  
  return "DOWN";
  }

function program10(depth0,data) {
  
  
  return "UP";
  }

function program12(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "because "
    + escapeExpression(((stack1 = (depth0 && depth0.statusMessage)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  return buffer;
  }

function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.routes)),stack1 == null || stack1 === false ? stack1 : stack1.item), {hash:{},inverse:self.noop,fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  return buffer;
  }
function program15(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_LBL_STATUS_RT", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n        <table class=\"table\">\n            <thead>\n            <tr>\n                <th style=\"width:100px\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_COL_IP_PREFIX", {hash:{},data:data}))
    + "</th>\n                <th style=\"width:100px\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_COL_SOURCE", {hash:{},data:data}))
    + "</th>\n            </tr>\n            </thead>\n            <tbody>\n            ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.routes)),stack1 == null || stack1 === false ? stack1 : stack1.item), {hash:{},inverse:self.noop,fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            </tbody>\n        </table>\n    </div>\n  ";
  return buffer;
  }
function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <tr>\n                <td><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " icon-label tooltip\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.destinationCidrBlock)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n                </td>\n                <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.source)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n            </tr>\n            ";
  return buffer;
  }

function program18(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.dynamic), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program19(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <section class=\"property-control-group\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPN_GATEWAY_VPN_DYNAMIC", {hash:{},data:data}))
    + "</section>\n  ";
  return buffer;
  }

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.dynamic), {hash:{},inverse:self.noop,fn:self.program(22, program22, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  return buffer;
  }
function program22(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.vpnConnectionId), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  <section class=\"property-control-group\">\n    <div class=\"clearfix\">\n      <label class=\"left\" for=\"property-vpc-ips\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPN_LBL_IP_PREFIX", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n    </div>\n    <div id=\"property-vpn-ips\" class=\"multi-input\" data-max-row=\"100\" data-bind=\"true\">\n      ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.ips), {hash:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n  </section>\n";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.vpnConnectionId), {hash:{},inverse:self.noop,fn:self.program(29, program29, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program23(depth0,data) {
  
  var buffer = "";
  buffer += "\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.CGW_APP_VPN_LBL_STATUS_RT", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n  ";
  return buffer;
  }

function program25(depth0,data) {
  
  var buffer = "";
  buffer += "\n      <div class=\"multi-ipt-row\">\n        <span class=\"ipt-controls\"><a href=\"#\" class=\"icon-del\"></a><a href=\"#\" class=\"icon-add\"></a></span>\n        <span class=\"ipt-wrapper\"><input data-ignore=\"true\" data-ignore-regexp=\"^[0-9./]*$\" class=\"input tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPN_TIP_EG_192_168_0_0_16", {hash:{},data:data}))
    + "\" placeholder=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPN_TIP_EG_192_168_0_0_16", {hash:{},data:data}))
    + "\" value=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\" type=\"text\"></span>\n      </div>\n      ";
  return buffer;
  }

function program27(depth0,data) {
  
  var buffer = "";
  buffer += "\n      <div class=\"multi-ipt-row\">\n        <span class=\"ipt-controls\"><a href=\"#\" class=\"icon-del\"></a><a href=\"#\" class=\"icon-add\"></a></span>\n        <span class=\"ipt-wrapper\"><input data-ignore=\"true\" data-empty-remove=\"true\" data-ignore-regexp=\"^[0-9./]*$\" class=\"input tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPN_TIP_EG_192_168_0_0_16", {hash:{},data:data}))
    + "\" placeholder=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VPN_TIP_EG_192_168_0_0_16", {hash:{},data:data}))
    + "\" type=\"text\"></span>\n      </div>\n      ";
  return buffer;
  }

function program29(depth0,data) {
  
  
  return " </div> ";
  }

  buffer += "<article>\n";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.vpnConnectionId), {hash:{},inverse:self.program(18, program18, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isApp), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/vpn/view',['../base/view', './template/stack', 'i18n!/nls/lang.js'], function(PropertyView, template, lang) {
    var VPNView;
    VPNView = PropertyView.extend({
      events: {
        "BEFORE_REMOVE_ROW #property-vpn-ips": 'beforeRemoveIP',
        "REMOVE_ROW #property-vpn-ips": 'removeIP',
        "ADD_ROW #property-vpn-ips": 'addIP',
        "focus #property-vpn-ips input": 'onFocusCIDR',
        "keypress #property-vpn-ips input": 'onPressCIDR',
        "blur #property-vpn-ips input": 'onBlurCIDR'
      },
      render: function() {
        this.$el.html(template(this.model.attributes));
        return this.model.attributes.name;
      },
      addIP: function() {
        $("#property-vpn-ips input").last().focus();
        return null;
      },
      beforeRemoveIP: function(event) {
        var nonEmptyInputs;
        if (event.value) {
          nonEmptyInputs = $("#property-vpn-ips").find("input").filter(function() {
            return this.value.length > 0;
          });
          if (nonEmptyInputs.length < 2) {
            event.preventDefault();
          }
        }
        return null;
      },
      removeIP: function(event, ip) {
        var ips;
        if (!ip) {
          return;
        }
        ips = [];
        $("#property-vpn-ips input").each(function() {
          return ips.push($(this).val());
        });
        this.model.updateIps(ips);
        return null;
      },
      onPressCIDR: function(event) {
        if (event.keyCode === 13) {
          $(event.currentTarget).blur();
        }
        return null;
      },
      onFocusCIDR: function(event) {
        this.disabledAllOperabilityArea(true);
        return null;
      },
      onBlurCIDR: function(event) {
        var allCidrAry, cidr, descContent, dialog_template, inputElem, inputValue, ips, mainContent, that, _i, _len;
        inputElem = $(event.currentTarget);
        inputValue = inputElem.val();
        ips = [];
        $("#property-vpn-ips input").each(function() {
          if (this.value) {
            ips.push(this.value);
          }
          return null;
        });
        allCidrAry = _.uniq(ips);
        if (!inputValue) {
          if (inputElem.parents('.multi-ipt-row').siblings().length === 0) {
            mainContent = lang.PROP.VPN_BLUR_CIDR_REQUIRED;
            descContent = lang.PROP.VPN_BLUR_CIDR_REQUIRED_DESC;
          }
        } else if (!MC.validate('cidr', inputValue)) {
          mainContent = sprintf(lang.PROP.VPN_BLUR_CIDR_NOT_VALID_IP, inputValue);
          descContent = lang.PROP.VPN_BLUR_CIDR_NOT_VALID_IP_DESC;
        } else {
          for (_i = 0, _len = allCidrAry.length; _i < _len; _i++) {
            cidr = allCidrAry[_i];
            if (cidr !== inputValue && this.model.isCidrConflict(inputValue, cidr)) {
              mainContent = sprintf(lang.PROP.VPN_BLUR_CIDR_CONFLICTS_IP, inputValue);
              descContent = lang.PROP.VPN_BLUR_CIDR_CONFLICTS_IP_DESC;
              break;
            }
          }
        }
        if (!mainContent) {
          this.model.updateIps(allCidrAry);
          this.disabledAllOperabilityArea(false);
          return;
        }
        dialog_template = MC.template.setupCIDRConfirm({
          remove_content: lang.PROP.VPN_REMOVE_CONNECTION,
          main_content: mainContent,
          desc_content: descContent
        });
        that = this;
        return modal(dialog_template, false, function() {
          $('.modal-close').click(function() {
            return inputElem.focus();
          });
          return $('#cidr-remove').click(function() {
            Design.instance().component(that.model.get("uid")).remove();
            that.disabledAllOperabilityArea(false);
            return modal.close();
          });
        }, {
          $source: $(event.target)
        });
      }
    });
    return new VPNView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/vpn/main',['../base/main', './model', './view', 'constant', 'event'], function(PropertyModule, model, view, constant, ide_event) {
    var VPNModule;
    VPNModule = PropertyModule.extend({
      handleTypes: constant.RESTYPE.VPN,
      initStack: function() {
        this.view = view;
        this.model = model;
        this.model.isApp = false;
        this.model.isAppEdit = false;
        return null;
      },
      initApp: function() {
        this.view = view;
        this.model = model;
        this.model.isApp = true;
        this.model.isAppEdit = false;
        return null;
      },
      initAppEdit: function() {
        this.view = view;
        this.model = model;
        this.model.isApp = false;
        this.model.isAppEdit = true;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/eni/model',['../base/model', 'constant', "Design", 'i18n!/nls/lang.js', 'CloudResources'], function(PropertyModel, constant, Design, lang, CloudResources) {
    var ENIModel;
    ENIModel = PropertyModel.extend({
      defaults: {
        'uid': null,
        'isAppEdit': false
      },
      init: function(uid) {
        var component, data;
        component = Design.instance().component(uid);
        data = {
          uid: uid,
          name: component.get("name"),
          desc: component.get("description"),
          sourceDestCheck: component.get("sourceDestCheck"),
          isAppEdit: this.isAppEdit,
          isGroupMode: this.isGroupMode,
          attached: component.connections("EniAttachment").length > 0,
          description: component.get("description")
        };
        this.set(data);
        this.getIpList();
        if (this.isAppEdit) {
          this.getEniGroup(uid);
        }
        return null;
      },
      getIpList: function() {
        var ips;
        ips = Design.instance().component(this.get("uid")).getIpArray();
        ips[0].unDeletable = true;
        if (this.isAppEdit) {
          ips[0].editable = false;
        }
        this.set("ips", ips);
        return null;
      },
      setEniDesc: function(value) {
        Design.instance().component(this.get("uid")).set("description", value);
        return null;
      },
      setSourceDestCheck: function(value) {
        Design.instance().component(this.get("uid")).set("sourceDestCheck", value);
        return null;
      },
      attachEip: function(eip_index, attach) {
        Design.instance().component(this.get("uid")).setIp(eip_index, null, null, attach);
        this.attributes.ips[eip_index].hasEip = attach;
        if (attach) {
          Design.modelClassForType(constant.RESTYPE.IGW).tryCreateIgw();
        }
        return null;
      },
      removeIp: function(index) {
        Design.instance().component(this.get("uid")).removeIp(index);
        return null;
      },
      getEniGroup: function(eni_uid) {
        var appData, count, eni, eniComp, existingLength, group, idx, index, member, members, name, resource_list, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
        eniComp = Design.instance().component(eni_uid);
        resource_list = CloudResources(constant.RESTYPE.ENI, Design.instance().region());
        appData = (_ref = resource_list.get(eniComp.get('appId'))) != null ? _ref.toJSON() : void 0;
        name = eniComp.get("name");
        group = [
          {
            appId: eniComp.get("appId"),
            name: name + "-0",
            desc: eniComp.get("description"),
            status: appData ? appData.status : "Unknown",
            sourceDestCheck: eniComp.get("sourceDestCheck") ? "enabled" : "disabled"
          }
        ];
        count = eniComp.serverGroupCount();
        if (eniComp.groupMembers().length > count - 1) {
          members = eniComp.groupMembers().slice(0, count - 1);
        } else {
          members = eniComp.groupMembers();
        }
        for (index = _i = 0, _len = members.length; _i < _len; index = ++_i) {
          member = members[index];
          group.push({
            name: name + "-" + (index + 1),
            appId: member.appId,
            status: (resource_list != null ? (_ref1 = resource_list.get(member.appId)) != null ? _ref1.toJSON() : void 0 : void 0) ? (_ref2 = resource_list.get(member.appId)) != null ? _ref2.toJSON().status : void 0 : "Unknown",
            isNew: !member.appId,
            isOld: member.appId && (index + 1 >= count)
          });
        }
        while (group.length < count) {
          group.push({
            name: name + "-" + group.length,
            isNew: true,
            status: "Unknown"
          });
        }
        existingLength = 0;
        _ref3 = eniComp.groupMembers();
        for (idx = _j = 0, _len1 = _ref3.length; _j < _len1; idx = ++_j) {
          eni = _ref3[idx];
          if (eni.appId) {
            existingLength = idx + 1;
          } else {
            break;
          }
        }
        existingLength += 1;
        if (group.length > 1) {
          this.set('group', group);
          if (existingLength > count) {
            group.increment = "-" + (existingLength - count);
          } else if (existingLength < count) {
            group.increment = "+" + (count - existingLength);
          }
        } else {
          this.set('group', group[0]);
        }
        this.set('readOnly', false);
        return null;
      },
      addIp: function() {
        var comp, ips;
        comp = Design.instance().component(this.get("uid"));
        comp.addIp();
        ips = comp.getIpArray();
        ips[0].unDeletable = true;
        this.set("ips", ips);
        return null;
      },
      isValidIp: function(ip) {
        return Design.instance().component(this.get("uid")).isValidIp(ip);
      },
      canAddIP: function() {
        return Design.instance().component(this.get("uid")).canAddIp();
      },
      setIp: function(idx, ip, autoAssign) {
        Design.instance().component(this.get("uid")).setIp(idx, ip, autoAssign);
        return null;
      }
    });
    return new ENIModel();
  });

}).call(this);

define('workspaces/awseditor/property/eni/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n<article class=\"property-control-group\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_LBL_ATTACH_WARN", {hash:{},data:data}))
    + "</article>\n";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n<article>\n  <div id=\"prop-appedit-eni-list\" class=\"expand\"></div>\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_LBL_DETAIL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n<!-- ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " -->\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n      <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n    <section class=\"property-control-group\">\n      <div class=\"checkbox\">\n        <input id=\"property-eni-source-check\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.sourceDestCheck), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " />\n        <label for=\"property-eni-source-check\"></label>\n      </div>\n      <label for=\"property-eni-source-check\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_SOURCE_DEST_CHECK", {hash:{},data:data}))
    + "</label>\n    </section>\n\n    <section class=\"property-control-group\">\n      <div class=\"network-list-wrap\">\n        <div class=\"network-list-header\">\n          "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_IP_ADDRESS", {hash:{},data:data}))
    + "\n          <button id=\"property-eni-ip-add\" class=\"right btn btn-blue btn-small tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_TIP_ADD_IP_ADDRESS", {hash:{},data:data}))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_ADD_IP", {hash:{},data:data}))
    + "</button>\n        </div>\n        <ul class=\"network-list\" id=\"property-eni-list\" data-bind=\"true\">\n        </ul>\n      </div>\n    </section>\n  </div>\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n  <div class=\"option-group sg-group\"></div>\n</article>\n\n";
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-eni-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n      <textarea id=\"property-eni-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.desc)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n";
  return buffer;
  }

function program6(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

  stack1 = helpers.unless.call(depth0, (depth0 && depth0.attached), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/eni/template/eni_list',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.program(7, program7, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<div class=\"option-group-head ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.readOnly), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_NETWORK_INTERFACE_SUMMARY", {hash:{},data:data}))
    + "</div>\n<div class=\"option-group\">\n  <dl class=\"dl-vertical\">\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_DEVICE_NAME", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_ID", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.appId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_STATE", {hash:{},data:data}))
    + "</dt>\n    <dd><i class=\"status status-"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.description), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_SOURCE_DEST_CHECK_DISP", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.sourceDestCheck)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n  </dl>\n<div>\n\n";
  return buffer;
  }
function program3(depth0,data) {
  
  
  return "expand";
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n    <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.desc)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    ";
  return buffer;
  }

function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<div class=\"option-group-head ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.readOnly), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_NETWORK_INTERFACE_GROUP_MEMBERS", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">("
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span><span class=\"appedit-head-meta appedit-head-meta-add\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.group)),stack1 == null || stack1 === false ? stack1 : stack1.increment)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n<ul class=\"option-group property-list\">\n  ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.group), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n";
  return buffer;
  }
function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <li>\n      <i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " icon-label tooltip\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.appId), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isNew), {hash:{},inverse:self.program(13, program13, data),fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </li>\n  ";
  return buffer;
  }
function program9(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"subtitle\">("
    + escapeExpression(((stack1 = (depth0 && depth0.appId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span>";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "";
  buffer += "<div class=\"subtitle subtitle-launch\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_CREATE_AFTER_APPLYING_UPDATES", {hash:{},data:data}))
    + "</div>\n      ";
  return buffer;
  }

function program13(depth0,data) {
  
  var buffer = "", stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isOld), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      ";
  return buffer;
  }
function program14(depth0,data) {
  
  var buffer = "";
  buffer += "<div class=\"subtitle subtitle-terminate\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_DELETE_AFTER_APPLYING_UPDATES", {hash:{},data:data}))
    + "</div>";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, (depth0 && depth0.group), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/eni/view',['../base/view', './template/stack', './template/eni_list', 'i18n!/nls/lang.js'], function(PropertyView, template, list_template, lang) {
    var ENIView, noop;
    noop = function() {
      return null;
    };
    ENIView = PropertyView.extend({
      events: {
        'change #property-res-desc': 'onChangeDesc',
        "change #property-eni-source-check": "setEniSourceDestCheck",
        'click .toggle-eip': 'setEip',
        'click #property-eni-ip-add': "addIp",
        'click #property-eni-list .icon-remove': "removeIp",
        'keyup .input-ip': 'syncIPList'
      },
      render: function() {
        this.$el.html(template(this.model.attributes));
        this.refreshIpList();
        $("#prop-appedit-eni-list").html(list_template(this.model.attributes));
        this.bindIpItemValidate();
        return this.model.attributes.name;
      },
      setEniDesc: function(event) {
        this.model.setEniDesc(event.target.value);
        return null;
      },
      onChangeDesc: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      setEniSourceDestCheck: function(event) {
        this.model.setSourceDestCheck(event.target.checked);
        return null;
      },
      addIp: function() {
        if ($("#property-eni-ip-add").hasClass("disabled")) {
          return;
        }
        this.model.addIp();
        this.refreshIpList();
        return null;
      },
      setEip: function(event) {
        var $target, attach, index, tooltip;
        $target = $(event.currentTarget);
        index = $target.closest("li").index();
        attach = !$target.hasClass("associated");
        if (attach) {
          tooltip = lang.PROP.INSTANCE_IP_MSG_4;
        } else {
          tooltip = lang.PROP.INSTANCE_IP_MSG_3;
        }
        $target.toggleClass("associated", attach).data("tooltip", tooltip);
        this.model.attachEip(index, attach);
        return null;
      },
      removeIp: function(event) {
        var $li, index;
        $li = $(event.currentTarget).closest("li");
        index = $li.index();
        $li.remove();
        this.model.removeIp(index);
        this.updateIPAddBtnState(true);
        return null;
      },
      syncIPList: function(event) {
        var $target, autoAssign, ip, ipItems, ipVal;
        ipItems = $('#property-eni-list .input-ip-item');
        $target = $(event.currentTarget);
        if (!$target.parsley('validate')) {
          return;
        }
        ipVal = $target.val();
        ip = $target.siblings(".input-ip-prefix").text() + ipVal;
        autoAssign = ipVal === "x" || ipVal === "x.x";
        this.model.setIp($target.closest(".input-ip-item").index(), ip, autoAssign);
        return null;
      },
      refreshIpList: function(event) {
        $('#property-eni-list').html(MC.template.propertyIpList(this.model.attributes.ips));
        this.updateIPAddBtnState();
        this.bindIpItemValidate();
        return null;
      },
      bindIpItemValidate: function() {
        var that;
        that = this;
        return $('.input-ip').each(function() {
          var $item;
          $item = $(this);
          return $item.parsley("custom", function(val) {
            var currentInputIP, inputValue, inputValuePrefix, ipIPFormatCorrect, prefixAry, result, validDOM;
            validDOM = $item;
            inputValue = val;
            inputValuePrefix = validDOM.siblings(".input-ip-prefix").text();
            currentInputIP = inputValuePrefix + inputValue;
            prefixAry = inputValuePrefix.split('.');
            ipIPFormatCorrect = false;
            if (prefixAry.length === 4) {
              if (inputValue === 'x') {
                ipIPFormatCorrect = true;
              } else if (MC.validate('ipaddress', inputValuePrefix + inputValue)) {
                ipIPFormatCorrect = true;
              }
            } else {
              if (inputValue === 'x.x') {
                ipIPFormatCorrect = true;
              } else if (MC.validate('ipaddress', inputValuePrefix + inputValue)) {
                ipIPFormatCorrect = true;
              }
            }
            if (!ipIPFormatCorrect) {
              return 'Invalid IP address';
            } else {
              result = that.model.isValidIp(currentInputIP);
              if (result !== true) {
                return result;
              }
            }
          });
        });
      },
      updateIPAddBtnState: function(enabled) {
        var tooltip;
        if (enabled === void 0) {
          enabled = this.model.canAddIP();
        }
        if (enabled === true) {
          tooltip = "Add IP Address";
        } else {
          if (_.isString(enabled)) {
            tooltip = enabled;
          } else {
            tooltip = "Cannot add IP address";
          }
          enabled = false;
        }
        $("#property-eni-ip-add").toggleClass("disabled", !enabled).data("tooltip", tooltip);
        return null;
      }
    });
    return new ENIView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/eni/app_model',['../base/model', 'Design', 'constant', "CloudResources"], function(PropertyModel, Design, constant, CloudResources) {
    var EniAppModel;
    EniAppModel = PropertyModel.extend({
      init: function(uid) {
        var allEni, appData, e, eni, eni_comp, formated_group, group, i, index, m, mIndex, memberIndex, myEniComponent, myEniComponentJSON, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        group = [];
        myEniComponent = Design.instance().component(uid);
        if (!myEniComponent) {
          allEni = Design.modelClassForType('AWS.VPC.NetworkInterface').allObjects();
          for (_i = 0, _len = allEni.length; _i < _len; _i++) {
            e = allEni[_i];
            if (e.get('appId') === uid) {
              myEniComponent = e;
              myEniComponentJSON = e != null ? e.toJSON() : void 0;
              break;
            } else {
              _ref = e.groupMembers();
              for (mIndex in _ref) {
                m = _ref[mIndex];
                if (m.appId === uid) {
                  memberIndex = +mIndex + 1;
                  myEniComponent = e;
                  myEniComponentJSON = m;
                  break;
                }
              }
            }
          }
        } else {
          myEniComponentJSON = myEniComponent != null ? myEniComponent.toJSON() : void 0;
        }
        appData = CloudResources(constant.RESTYPE.ENI, Design.instance().region());
        if (this.isGroupMode) {
          group = [myEniComponentJSON].concat(myEniComponent.groupMembers());
        } else {
          group.push(myEniComponentJSON);
        }
        formated_group = [];
        for (index in group) {
          eni_comp = group[index];
          if ((_ref1 = appData.get(eni_comp.appId)) != null ? _ref1.toJSON() : void 0) {
            eni = $.extend(true, {}, appData.get(eni_comp.appId).toJSON());
          } else {
            eni = {
              privateIpAddressesSet: []
            };
          }
          _ref2 = eni.privateIpAddressesSet;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            i = _ref2[_j];
            i.primary = i.primary === true;
          }
          eni.id = eni_comp.appId;
          eni.name = eni_comp.name ? "" + eni_comp.name + "-0" : "" + (myEniComponent.get('name')) + "-" + (memberIndex || index);
          eni.description = myEniComponent.get('description');
          eni.idx = memberIndex || index;
          eni.sourceDestCheck = eni.sourceDestCheck ? 'enabled' : 'disabled';
          formated_group.push(eni);
        }
        if (this.isGroupMode) {
          this.set('group', _.sortBy(formated_group, 'idx'));
          this.set('readOnly', true);
          this.set('isGroupMode', true);
          this.set('name', myEniComponent.get('name'));
        } else {
          eni = formated_group[0];
          eni.readOnly = true;
          eni.isGroupMode = false;
          eni.id = uid;
          eni.uid = myEniComponent ? myEniComponent.id : uid;
          this.set(eni);
        }
        return null;
      }
    });
    return new EniAppModel();
  });

}).call(this);

define('workspaces/awseditor/property/eni/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_NETWORK_INTERFACE_DETAIL", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_DEVICE_NAME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.networkInterfaceId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_STATE", {hash:{},data:data}))
    + "</dt>\n      <dd><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.description), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_SOURCE_DEST_CHECK_DISP", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.sourceDestCheck)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n    <div class=\"hidden-details\">\n      <a href=\"#\" class=\"toggle-details js-toggle-dropdown\" data-toggle=\"self-only\"><span class=\"details-off\">+ "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_SHOW_DETAIL", {hash:{},data:data}))
    + "</span><span class=\"details-on\">- "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_HIDE_DETAIL", {hash:{},data:data}))
    + "</span></a>\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_VPC_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.vpcId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_SUBNET_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.subnetId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.attachment), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_MAC_ADDRESS", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.macAddress)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.publicDnsName), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.privateDnsName), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.ownerId), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </dl>\n    </div>\n\n    <table class=\"table\">\n      <tr>\n        <th>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_IP_ADDRESS", {hash:{},data:data}))
    + "</th>\n        <th>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PUBLIC_IP", {hash:{},data:data}))
    + "</th>\n      </tr>\n      ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.privateIpAddressesSet), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </table>\n  </div>\n\n\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n  <div class=\"option-group sg-group\"></div>\n\n  ";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      ";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_ATTACHMENT_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attachment)),stack1 == null || stack1 === false ? stack1 : stack1.attachmentId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_Attachment_OWNER", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attachment)),stack1 == null || stack1 === false ? stack1 : stack1.instanceOwnerId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_Attachment_STATE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attachment)),stack1 == null || stack1 === false ? stack1 : stack1.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PUBLIC_DNS", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.publicDnsName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_PRIVATE_DNS", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.privateDnsName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_IP_OWNER", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.ownerId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program12(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <tr>\n        <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.privateIpAddress)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.primary), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</td>\n        <td>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.publicIp), {hash:{},inverse:self.program(17, program17, data),fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</td>\n      </tr>\n      ";
  return buffer;
  }
function program13(depth0,data) {
  
  var buffer = "";
  buffer += "<span>("
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENI_PRIMARY", {hash:{},data:data}))
    + ")</span>";
  return buffer;
  }

function program15(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.association)),stack1 == null || stack1 === false ? stack1 : stack1.publicIp)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program17(depth0,data) {
  
  
  return "-";
  }

  buffer += "<article class=\"property-app\">\n  <div id=\"prop-appedit-eni-list\" class=\"expand\"></div>\n\n  ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isGroupMode), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/eni/app_view',['../base/view', './template/app', './template/eni_list'], function(PropertyView, template, list_template) {
    var EniAppView;
    EniAppView = PropertyView.extend({
      render: function() {
        this.$el.html(template(this.model.attributes));
        if (this.model.isGroupMode) {
          $("#prop-appedit-eni-list").html(list_template(this.model.attributes));
        }
        return this.model.attributes.name;
      }
    });
    return new EniAppView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/eni/main',["../base/main", "./model", "./view", "./app_model", "./app_view", "../sglist/main", 'event', "constant"], function(PropertyModule, model, view, app_model, app_view, sglist_main, ide_event, constant) {
    var EniModule, ideEvents;
    ideEvents = {};
    ideEvents[ide_event.PROPERTY_REFRESH_ENI_IP_LIST] = function() {
      this.model.getIpList();
      this.view.refreshIpList();
      return null;
    };
    EniModule = PropertyModule.extend({
      ideEvents: ideEvents,
      handleTypes: [constant.RESTYPE.ENI, "component_eni_group"],
      onUnloadSubPanel: function(id) {
        sglist_main.onUnloadSubPanel(id);
        return null;
      },
      initStack: function() {
        this.model = model;
        this.model.isAppEdit = false;
        this.model.isGroupMode = false;
        this.view = view;
        return null;
      },
      afterLoadStack: function() {
        if (!this.model.attributes.association) {
          return sglist_main.loadModule(this.model);
        }
      },
      initApp: function() {
        this.model = app_model;
        this.model.isGroupMode = this.handle === "component_eni_group";
        this.view = app_view;
        return null;
      },
      afterLoadApp: function() {
        if (!this.model.isGroupMode) {
          sglist_main.loadModule(this.model);
        }
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.model.isAppEdit = true;
        this.view = view;
        return null;
      },
      afterLoadAppEdit: function() {
        sglist_main.loadModule(this.model);
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/acl/model',['../base/model', "Design", 'constant', 'i18n!/nls/lang.js'], function(PropertyModel, Design, constant, lang) {
    var ACLModel, icmpCodeMap, icmpTypeMap;
    icmpTypeMap = {
      "0": "Echo Reply(0)",
      "3": "Destination Unreachable(3)",
      "4": "Source Quench(4)",
      "5": "Redirect Message(5)",
      "6": "Alternate Host Address(6)",
      "8": "Echo Request(8)",
      "9": "Router Advertisement(9)",
      "10": "Router Solicitation(10)",
      "11": "Time Exceeded(11)",
      "12": "Parameter Problem: Bad IP header(12)",
      "13": "Timestamp(13)",
      "14": "Timestamp Reply(14)",
      "15": "Information Request(15)",
      "16": "Information Reply(16)",
      "17": "Address Mask Request(17)",
      "18": "Address Mask Reply(18)",
      "30": "Traceroute(30)",
      "31": "Datagram Conversion Error(31)",
      "32": "Mobile Host Redirect(32)",
      "33": "Where Are You(33)",
      "34": "Here I Am(34)",
      "35": "Mobile Registration Request(35)",
      "36": "Mobile Registration Reply(36)",
      "37": "Domain Name Request(37)",
      "38": "Domain Name Reply(38)",
      "39": "SKIP Algorithm Discovery Protocol(39)",
      "40": "Photuris Security Failures(40)",
      "-1": "All(-1)"
    };
    icmpCodeMap = {
      "3": {
        "-1": "All(-1)",
        "0": "destination network unreachable(0)",
        "1": "destination host unreachable(1)",
        "2": "destination protocol unreachable(2)",
        "3": "destination port unreachable(3)",
        "4": "fragmentation required and DF flag set(4)",
        "5": "source route failed(5)",
        "6": "destination network unknown(6)",
        "7": "destination host unknown(7)",
        "8": "source host isolated(8)",
        "9": "network administratively prohibited(9)",
        "10": "host administratively prohibited(10)",
        "11": "network unreachable for TOS(11)",
        "12": "host unreachable for TOS(12)",
        "13": "communication administratively prohibited(13)"
      },
      "5": {
        "-1": "All(-1)",
        "0": "redirect datagram for the network(0)",
        "1": "redirect datagram for the host(1)",
        "2": "redirect datagram for the TOS & network(2)",
        "3": "redirect datagram for the TOS & host(3)"
      },
      "11": {
        "-1": "All(-1)",
        "0": "TTL expired transit(0)",
        "1": "fragmentation reasembly time exceeded(1)"
      },
      "12": {
        "-1": "All(-1)",
        "0": "pointer indicates the error(0)",
        "1": "missing a required option(1)",
        "2": "bad length(2)"
      }
    };
    ACLModel = PropertyModel.extend({
      init: function(uid) {
        var aclObj, assos;
        aclObj = Design.instance().component(uid);
        assos = _.map(aclObj.connectionTargets("AclAsso"), function(subnet) {
          return {
            name: subnet.get('name'),
            cidr: subnet.get('cidr')
          };
        });
        this.set({
          uid: uid,
          isDefault: aclObj.isDefault(),
          appId: aclObj.get("appId"),
          name: aclObj.get("name"),
          vpcId: Design.modelClassForType(constant.RESTYPE.VPC).theVPC().get("appId"),
          rules: null,
          isApp: this.isApp,
          associations: _.sortBy(assos, name)
        });
        this.getRules();
        this.sortRules();
        return null;
      },
      getRules: function() {
        var isApp, isDefault, rules;
        rules = $.extend(true, [], Design.instance().component(this.get("uid")).get("rules"));
        isDefault = this.get("isDefault");
        isApp = this.isApp;
        _.each(rules, function(rule) {
          var codeStr, err, typeCodeStrAry, typeStr;
          if (!rule.port) {
            rule.port = "All";
          }
          if (rule.number === 32767) {
            rule.number = "*";
            rule.readOnly = true;
          } else if ((rule.number === 100 && isDefault) || isApp) {
            rule.readOnly = true;
          }
          switch (rule.protocol) {
            case -1:
              rule.protocol = "ALL";
              break;
            case 1:
              rule.protocol = "ICMP";
              break;
            case 6:
              rule.protocol = "TCP";
              break;
            case 17:
              rule.protocol = "UDP";
          }
          rule.tooltip = 'Port';
          try {
            if (rule.protocol === 'ICMP') {
              typeCodeStrAry = rule.port.split('/');
              typeStr = '';
              if (typeCodeStrAry[0]) {
                typeStr = icmpTypeMap[typeCodeStrAry[0]];
              }
              codeStr = '';
              if (typeCodeStrAry[1]) {
                if (icmpCodeMap[typeCodeStrAry[0]]) {
                  codeStr = icmpCodeMap[typeCodeStrAry[0]][typeCodeStrAry[1]];
                } else {
                  codeStr = "All(-1)";
                }
              }
              if (typeStr && !codeStr) {
                rule.tooltip = 'Type: ' + typeStr;
              } else if (typeStr && codeStr) {
                rule.tooltip = 'Type: ' + typeStr + ', ' + 'Code: ' + codeStr;
              }
            } else {
              rule.tooltip = 'Port: ' + rule.port;
            }
          } catch (_error) {
            err = _error;
            console.log('ERR: icmp code type parse faild.');
          }
          return null;
        });
        return this.set("rules", rules);
      },
      sortRules: function() {
        var compare, key;
        key = this.get("sortKey") || "number";
        if (key === "number") {
          compare = function(a, b) {
            var a_n, b_n;
            a_n = parseInt(a.number, 10) || -1;
            b_n = parseInt(b.number, 10) || -1;
            if (a_n > b_n) {
              return 1;
            }
            if (a_n === b_n) {
              return 0;
            }
            if (a_n < b_n) {
              return -1;
            }
          };
        } else {
          compare = function(a, b) {
            if (a[key] > b[key]) {
              return 1;
            }
            if (a[key] === b[key]) {
              return 0;
            }
            if (a[key] < b[key]) {
              return -1;
            }
          };
        }
        this.attributes.rules = this.attributes.rules.sort(compare);
        return null;
      },
      setSortOption: function(key) {
        this.set("sortKey", key);
        this.sortRules();
        return null;
      },
      removeAclRule: function(ruleId) {
        return Design.instance().component(this.get("uid")).removeRule(ruleId);
      },
      addAclRule: function(ruleObj) {
        Design.instance().component(this.get("uid")).addRule(ruleObj);
        this.getRules();
        this.sortRules();
        this.trigger("REFRESH_RULE_LIST");
        return null;
      },
      checkRuleNumber: function(rulenumber) {
        var rule;
        rulenumber = parseInt(rulenumber, 10);
        if (!((0 < rulenumber && rulenumber < 32768))) {
          return lang.PARSLEY.VALID_RULE_NUMBER_1_TO_32767;
        }
        if (this.get("isDefault") && rulenumber === 100) {
          return lang.PARSLEY.RULE_NUMBER_100_HAS_EXISTED;
        }
        rule = _.find(Design.instance().component(this.get("uid")).get("rules"), function(r) {
          return r.number === rulenumber;
        });
        if (rule) {
          return sprintf(lang.PARSLEY.RULENUMBER_ALREADY_EXISTS, rulenumber);
        }
        return true;
      }
    });
    return new ACLModel();
  });

}).call(this);

define('workspaces/awseditor/property/acl/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <section class=\"property-control-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_APP_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.appId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_APP_IS_DEFAULT", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.isDefault)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_APP_VPC_ID", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.vpcId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n  </section>\n  ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <section class=\"property-control-group\" data-bind=\"true\">\n    <label class=\"left\" for=\"property-acl-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_LBL_NAME", {hash:{},data:data}))
    + "</label>\n    <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_REQUIRED", {hash:{},data:data}))
    + "</span>\n    <input class=\"input\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isDefault), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " id=\"property-acl-name\" maxlength=\"255\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n  </section>\n  ";
  return buffer;
  }
function program4(depth0,data) {
  
  
  return "disabled=\"disabled\"";
  }

function program6(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <a href=\"#\" class=\"icon-add add-rule tooltip action-link\" id=\"acl-add-rule-icon\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_BTN_CREATE_NEW_RULE", {hash:{},data:data}))
    + "'></a>\n    ";
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<li>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " ("
    + escapeExpression(((stack1 = (depth0 && depth0.cidr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</li>";
  return buffer;
  }

  buffer += "<article>\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.appId), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n\n  <div class=\"option-group-head acl-header expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_TIT_RULE", {hash:{},data:data}))
    + "\n    <span class=\"property-head-num-wrap\">(<span id=\"acl-rule-count\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rules)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>)</span>\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isApp), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n  <div class=\"option-group\">\n    <div class=\"rule-list-sort property-control-group\">\n      <h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_RULE_SORT_BY", {hash:{},data:data}))
    + "</h5>\n      <div class=\"selectbox\" id=\"acl-sort-rule-select\">\n        <div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_RULE_SORT_BY_NUMBER", {hash:{},data:data}))
    + "</div>\n        <ul class=\"dropdown\" tabindex=\"-1\">\n          <li data-id=\"number\" class=\"item selected\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_RULE_SORT_BY_NUMBER", {hash:{},data:data}))
    + "</li>\n          <li data-id=\"action\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_RULE_SORT_BY_ACTION", {hash:{},data:data}))
    + "</li>\n          <li data-id=\"direction\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_RULE_SORT_BY_DIRECTION", {hash:{},data:data}))
    + "</li>\n          <li data-id=\"source/destination\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_RULE_SORT_BY_SRC_DEST", {hash:{},data:data}))
    + "</li>\n        </ul>\n      </div>\n    </div>\n    <ul class=\"property-list acl-rule-list\" id=\"acl-rule-list\">"
    + escapeExpression(((stack1 = (depth0 && depth0.acl_list)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</ul>\n  </div>\n\n  <div class=\"option-group-head acl-header expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_TIT_ASSOC", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"acl-assn-count\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.associations)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>)</span>\n  </div>\n\n  <ul class=\"option-group property-list\">";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.associations), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</ul>\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/acl/template/rule_item',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<li data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n  <div class=\"acl-rule-number\"><span class=\"tooltip\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_TIP_RULE_NUMBER", {hash:{},data:data}))
    + "'>"
    + escapeExpression(((stack1 = (depth0 && depth0.number)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n\n  <div class=\"acl-rule-details\">\n    <div class=\"rule-list-row\">\n      <div class=\"acl-rule-allow-cb tooltip icon-"
    + escapeExpression(((stack1 = (depth0 && depth0.action)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-tooltip='";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.action), "deny", {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "'></div>\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.egress), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      <span class=\"tooltip\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_TIP_CIDR_BLOCK", {hash:{},data:data}))
    + "'>"
    + escapeExpression(((stack1 = (depth0 && depth0.cidr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n    </div>\n    <div class=\"rule-list-row\">\n      <div><span class=\"rule-protocol tooltip\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_TIP_PROTOCOL", {hash:{},data:data}))
    + "'>"
    + escapeExpression(((stack1 = (depth0 && depth0.protocol)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n      <div class=\"tooltip\" data-tooltip='"
    + escapeExpression(((stack1 = (depth0 && depth0.tooltip)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "'>"
    + escapeExpression(((stack1 = (depth0 && depth0.port)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n    </div>\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.readOnly), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n</li>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var stack1;
  stack1 = helpers.i18n.call(depth0, "PROP.ACL_TIP_ACTION_DENY", {hash:{},data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }

function program4(depth0,data) {
  
  var stack1;
  stack1 = helpers.i18n.call(depth0, "PROP.ACL_TIP_ACTION_ALLOW", {hash:{},data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"icon-outbound tooltip\" data-tooltip='";
  stack1 = helpers.i18n.call(depth0, "PROP.ACL_TIP_OUTBOUND", {hash:{},data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "'></span>\n      ";
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"icon-inbound tooltip\" data-tooltip='";
  stack1 = helpers.i18n.call(depth0, "PROP.ACL_TIP_INBOUND", {hash:{},data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "'></span>\n      ";
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = "";
  buffer += "<a class=\"icon-remove rule-remove-icon tooltip\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ACL_TIP_REMOVE_RULE", {hash:{},data:data}))
    + "'></a>";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/acl/template/dialog',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				<li class=\"item tooltip\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.cidr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"><div class=\"main truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div></li>\n			";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "";
  buffer += "\n			  <li class=\"item\" data-id=\"custom\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PROTOCOL_CUSTOM", {hash:{},data:data}))
    + "</li>\n			  <li class=\"item\" data-id=\"all\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PROTOCOL_ALL", {hash:{},data:data}))
    + "</li>\n			  ";
  return buffer;
  }

  buffer += "<div id=\"modal-acl-rule\" data-bind=\"true\">\n  <div class=\"modal-header\"><h3>"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_TITLE_ADD", {hash:{},data:data}))
    + "</h3><i class=\"modal-close\">&times;</i></div>\n  <div class=\"modal-body\" style=\"width:450px;\">\n	<div class=\"modal-control-group clearfix\">\n	  <label class=\"label-short\" for=\"modal-acl-number\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_RULE_NUMBER", {hash:{},data:data}))
    + "</label>\n	  <div class=\"prefix-input left\">\n  		<label for=\"modal-acl-number\">#</label>\n  		<input class=\"input\" type=\"text\" id=\"modal-acl-number\" required data-ignore=\"true\" data-ignore-regexp=\"^[0-9]*$\" data-required=\"true\" autofocus>\n	  </div>\n	</div>\n	<div class=\"modal-control-group clearfix\">\n		<label class=\"label-short\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_ACTION", {hash:{},data:data}))
    + "</label>\n		<div class=\"radio-group-horizontal\">\n			<div class=\"radio\">\n				<input type=\"radio\" id=\"acl-add-model-action-allow\" checked=\"checked\" name=\"acl-add-model-action-select\"/>\n				<label for=\"acl-add-model-action-allow\"></label>\n			</div>\n			<label class=\"radio-label\" for=\"acl-add-model-action-allow\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_ACTION_ALLOW", {hash:{},data:data}))
    + "</label>\n		</div>\n		<div class=\"radio-group-horizontal\">\n			<div class=\"radio\">\n				<input type=\"radio\" id=\"acl-add-model-action-deny\" name=\"acl-add-model-action-select\"/>\n				<label for=\"acl-add-model-action-deny\"></label>\n			</div>\n			<label class=\"radio-label\" for=\"acl-add-model-action-deny\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_ACTION_DENY", {hash:{},data:data}))
    + "</label>\n		</div>\n	</div>\n	<div class=\"modal-control-group clearfix\">\n		<label class=\"label-short\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_DIRECTION", {hash:{},data:data}))
    + "</label>\n		<div class=\"radio-group-horizontal\">\n			<div class=\"radio\">\n				<input type=\"radio\" id=\"acl-add-model-direction-inbound\" checked=\"checked\" name=\"acl-add-model-direction-select\"/>\n				<label for=\"acl-add-model-direction-inbound\"></label>\n			</div>\n			<label class=\"radio-label\" for=\"acl-add-model-direction-inbound\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_INBOUND", {hash:{},data:data}))
    + "</label>\n		</div>\n		<div class=\"radio-group-horizontal\">\n			<div class=\"radio\">\n				<input type=\"radio\" id=\"acl-add-model-direction-outbound\" name=\"acl-add-model-direction-select\"/>\n				<label for=\"acl-add-model-direction-outbound\"></label>\n			</div>\n			<label class=\"radio-label\" for=\"acl-add-model-direction-outbound\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_OUTBOUND", {hash:{},data:data}))
    + "</label>\n		</div>\n	</div>\n	<div class=\"modal-control-group acl-source-dest clearfix\">\n	  <label class=\"label-short\" id=\"acl-add-model-bound-label\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_SOURCE", {hash:{},data:data}))
    + "</label>\n		<div class=\"selectbox\" id=\"acl-add-model-source-select\">\n			<div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PROTOCOL_CUSTOM", {hash:{},data:data}))
    + "</div>\n			<ul class=\"dropdown\">\n			<li class=\"item tooltip selected\" data-id=\"custom\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PROTOCOL_CUSTOM", {hash:{},data:data}))
    + "</li>\n			";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.subnets), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			</ul>\n	  </div>\n	  <input class=\"input\" type=\"text\" id=\"modal-acl-source-input\" data-ignore=\"true\" data-ignore-regexp=\"^[0-9./]*$\" data-required=\"true\" placeholder='"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PLACEHOLD_SOURCE", {hash:{},data:data}))
    + "' >\n	</div>\n\n	<div class=\"modal-control-group clearfix\">\n	  <label class=\"label-short\" >"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_PROTOCOL", {hash:{},data:data}))
    + "</label>\n		  <div class=\"selectbox modal-protocol-select\" id=\"modal-protocol-select\"  data-protocal-type=\"tcp\">\n			<div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PROTOCOL_TCP", {hash:{},data:data}))
    + "</div>\n			<ul class=\"dropdown scroll-wrap scrollbar-auto-hide context-wrap\" tabindex=\"-1\">\n			  <div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n			  <li class=\"selected item\" data-id=\"tcp\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PROTOCOL_TCP", {hash:{},data:data}))
    + "</li>\n			  <li class=\"item\" data-id=\"udp\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PROTOCOL_UDP", {hash:{},data:data}))
    + "</li>\n			  <li class=\"item\" data-id=\"icmp\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PROTOCOL_ICMP", {hash:{},data:data}))
    + "</li>\n			  ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.classic), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			</ul>\n		  </div>\n\n	  <div id=\"sg-protocol-select-result\">\n		  <div class=\"sg-protocol-option-input show\" id=\"sg-protocol-tcp\">\n			<input class=\"input\" type=\"text\" placeholder='"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PLACEHOLD_PORT_RANGE", {hash:{},data:data}))
    + "' required data-ignore=\"true\" data-ignore-regexp=\"^[0-9-]*$\" data-required=\"true\"/>\n		  </div>\n		  <div class=\"sg-protocol-option-input\" id=\"sg-protocol-udp\">\n			<input class=\"input\" type=\"text\" placeholder='"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_PLACEHOLD_PORT_RANGE", {hash:{},data:data}))
    + "' required data-ignore=\"true\" data-ignore-regexp=\"^[0-9-]*$\" data-required=\"true\"/>\n		  </div>\n		  <div class=\"sg-protocol-option-input\" id=\"sg-protocol-icmp\">\n			<div class=\"selectbox\" id=\"protocol-icmp-main-select\" data-protocal-main=\"0\"  data-protocal-sub=\"-1\">\n			  <div class=\"selection\">Echo Reply(0)</div>\n			  <div class=\"dropdown scroll-wrap scrollbar-auto-hide context-wrap\" style=\"height:300px;\">\n				<div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n				<ul tabindex=\"-1\" class=\"scroll-content\">\n				  <li class=\"item selected\" data-id=\"0\">Echo Reply(0)</li>\n				  <li class=\"item\" data-id=\"3\">Destination Unreachable(3) ...</li>\n				  <li class=\"item\" data-id=\"4\">Source Quench(4)</li>\n				  <li class=\"item\" data-id=\"5\">Redirect Message(5) ...</li>\n				  <li class=\"item\" data-id=\"6\">Alternate Host Address(6)</li>\n				  <li class=\"item\" data-id=\"8\">Echo Request(8)</li>\n				  <li class=\"item\" data-id=\"9\">Router Advertisement(9)</li>\n				  <li class=\"item\" data-id=\"10\">Router Solicitation(10)</li>\n				  <li class=\"item\" data-id=\"11\">Time Exceeded(11) ...</li>\n				  <li class=\"item\" data-id=\"12\">Parameter Problem: Bad IP header(12) ...</li>\n				  <li class=\"item\" data-id=\"13\">Timestamp(13)</li>\n				  <li class=\"item\" data-id=\"14\">Timestamp Reply(14)</li>\n				  <li class=\"item\" data-id=\"15\">Information Request(15)</li>\n				  <li class=\"item\" data-id=\"16\">Information Reply(16)</li>\n				  <li class=\"item\" data-id=\"17\">Address Mask Request(17)</li>\n				  <li class=\"item\" data-id=\"18\">Address Mask Reply(18)</li>\n				  <li class=\"item\" data-id=\"30\">Traceroute(30)</li>\n				  <li class=\"item\" data-id=\"31\">Datagram Conversion Error(31)</li>\n				  <li class=\"item\" data-id=\"32\">Mobile Host Redirect(32)</li>\n				  <li class=\"item\" data-id=\"33\">Where Are You(33)</li>\n				  <li class=\"item\" data-id=\"34\">Here I Am(34)</li>\n				  <li class=\"item\" data-id=\"35\">Mobile Registration Request(35)</li>\n				  <li class=\"item\" data-id=\"36\">Mobile Registration Reply(36)</li>\n				  <li class=\"item\" data-id=\"37\">Domain Name Request(37)</li>\n				  <li class=\"item\" data-id=\"38\">Domain Name Reply(38)</li>\n				  <li class=\"item\" data-id=\"39\">SKIP Algorithm Discovery Protocol(39)</li>\n				  <li class=\"item\" data-id=\"40\">Photuris Security Failures(40)</li>\n				  <li class=\"item\" data-id=\"-1\">All(-1)</li>\n				</ul>\n			  </div>\n		  </div>\n		  <div class=\"selectbox protocol-icmp-sub-select\" id=\"protocol-icmp-sub-select-3\">\n			<div class=\"selection\">All(-1)</div>\n			<div class=\"dropdown scroll-wrap scrollbar-auto-hide context-wrap\" style=\"height:300px;\">\n				<div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n				<ul class=\"scroll-content\" tabindex=\"-1\">\n				  <li class=\"item selected\" data-id=\"-1\">All(-1)</li>\n				  <li class=\"item\" data-id=\"0\">destination network unreachable(0)</li>\n				  <li class=\"item\" data-id=\"1\">destination host unreachable(1)</li>\n				  <li class=\"item\" data-id=\"2\">destination protocol unreachable(2)</li>\n				  <li class=\"item\" data-id=\"3\">destination port unreachable(3)</li>\n				  <li class=\"item\" data-id=\"4\">fragmentation required and DF flag set(4)</li>\n				  <li class=\"item\" data-id=\"5\">source route failed(5)</li>\n				  <li class=\"item\" data-id=\"6\">destination network unknown(6)</li>\n				  <li class=\"item\" data-id=\"7\">destination host unknown(7)</li>\n				  <li class=\"item\" data-id=\"8\">source host isolated(8)</li>\n				  <li class=\"item\" data-id=\"9\">network administratively prohibited(9)</li>\n				  <li class=\"item\" data-id=\"10\">host administratively prohibited(10)</li>\n				  <li class=\"item\" data-id=\"11\">network unreachable for TOS(11)</li>\n				  <li class=\"item\" data-id=\"12\">host unreachable for TOS(12)</li>\n				  <li class=\"item\" data-id=\"13\">communication administratively prohibited(13)</li>\n				</ul>\n			</div>\n		  </div>\n		  <div class=\"selectbox protocol-icmp-sub-select\" id=\"protocol-icmp-sub-select-5\">\n			<div class=\"selection\">All(-1)</div>\n			<ul class=\"dropdown\" tabindex=\"-1\">\n			  <li class=\"selected item\" data-id=\"-1\">All(-1)</li>\n			  <li class=\"item\" data-id=\"0\">redirect datagram for the network(0)</li>\n			  <li class=\"item\" data-id=\"1\">redirect datagram for the host(1)</li>\n			  <li class=\"item\" data-id=\"2\">redirect datagram for the TOS & network(2)</li>\n			  <li class=\"item\" data-id=\"3\">redirect datagram for the TOS & host(3)</li>\n			</ul>\n		  </div>\n		  <div class=\"selectbox protocol-icmp-sub-select\" id=\"protocol-icmp-sub-select-11\">\n			<div class=\"selection\">All(-1)</div>\n			<ul class=\"dropdown\" tabindex=\"-1\">\n			  <li class=\"item selected\" data-id=\"-1\">All(-1)</li>\n			  <li class=\"item\" data-id=\"0\">TTL expired transit(0)</li>\n			  <li class=\"item\" data-id=\"1\">fragmentation reasembly time exceeded(1)</li>\n			</ul>\n		  </div>\n		  <div class=\"selectbox protocol-icmp-sub-select\" id=\"protocol-icmp-sub-select-12\">\n			<div class=\"selection\">All(-1)</div>\n			<ul class=\"dropdown\" role=\"menu\">\n			  <li class=\"item selected\" data-id=\"-1\">All(-1)</li>\n			  <li class=\"item\" data-id=\"0\">pointer indicates the error(0)</li>\n			  <li class=\"item\" data-id=\"1\">missing a required option(1)</li>\n			  <li class=\"item\" data-id=\"2\">bad length(2)</li>\n			</ul>\n		  </div>\n		  </div>\n		  <div class=\"sg-protocol-option-input\" id=\"sg-protocol-custom\">\n				<input class=\"input\" type=\"string\" value=\"1\" min=\"1\" max=\"255\" required=\"\" required data-ignore=\"true\" data-ignore-regexp=\"^[0-9-]*$\" data-required=\"true\">\n		  </div>\n		  <div class=\"sg-protocol-option-input\" id=\"sg-protocol-all\" required data-ignore=\"true\" data-ignore-regexp=\"^[0-9-]*$\"> "
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_LBL_PORT_RANGE_ALL", {hash:{},data:data}))
    + " </div>\n	  </div>\n	  <ul class=\"simple-protocol-select\">\n			<li>SSH</li>\n			<li>SMTP</li>\n			<li>DNS</li>\n			<li>HTTP</li>\n			<li>POP3</li>\n			<li>IMAP</li>\n			<li>LDAP</li>\n			<li>HTTPS</li>\n			<li>SMTPS</li>\n			<li>IMAPS</li>\n			<li>POP3S</li>\n			<li>MS SQL</li>\n			<li>MYSQL</li>\n			<li>RDP</li>\n		</ul>\n	</div>\n\n  </div>\n  <div class=\"modal-footer\">\n	<button class=\"btn btn-blue\" id=\"acl-modal-rule-save-btn\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_BTN_SAVE", {hash:{},data:data}))
    + "</button>\n	<button class=\"btn btn-silver modal-close\">"
    + escapeExpression(helpers.i18n.call(depth0, "POP_ACLRULE_BTN_CANCEL", {hash:{},data:data}))
    + "</button>\n  </div>\n</div>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/acl/view',['../base/view', 'Design', 'constant', './template/stack', './template/rule_item', './template/dialog', 'i18n!/nls/lang.js'], function(PropertyView, Design, constant, htmlTpl, ruleTpl, rulePopupTpl, lang) {
    var ACLView;
    ACLView = PropertyView.extend({
      events: {
        'change #property-acl-name': 'aclNameChanged',
        'click #acl-add-rule-icon': 'showCreateRuleModal',
        'OPTION_CHANGE #acl-sort-rule-select': 'sortAclRule',
        'click .acl-rule-details .rule-remove-icon': 'removeAclRule'
      },
      render: function() {
        this.$el.html(htmlTpl(this.model.attributes));
        this.refreshRuleList();
        return this.model.attributes.name;
      },
      aclNameChanged: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "ACL")) {
          this.model.setName(name);
          return this.setTitle(name);
        }
      },
      sortAclRule: function(event) {
        var sg_rule_list, sortType;
        sg_rule_list = $('#acl-rule-list');
        sortType = $(event.target).find('.selected').attr('data-id');
        this.model.setSortOption(sortType);
        this.refreshRuleList();
        return null;
      },
      refreshRuleList: function() {
        $('#acl-rule-list').html(ruleTpl(this.model.attributes.rules));
        $('#acl-rule-count').text(this.model.attributes.rules.length);
        return null;
      },
      removeAclRule: function(event) {
        var $target, ruleId;
        $target = $(event.currentTarget).closest("li");
        ruleId = $target.attr("data-uid");
        if (this.model.removeAclRule(ruleId)) {
          $target.remove();
        }
        return null;
      },
      showCreateRuleModal: function() {
        var SubnetModel, data;
        SubnetModel = Design.modelClassForType(constant.RESTYPE.SUBNET);
        data = {
          classic: false,
          subnets: _.map(SubnetModel.allObjects(), function(subnet) {
            return {
              name: subnet.get("name"),
              cidr: subnet.get("cidr")
            };
          })
        };
        modal(rulePopupTpl(data));
        $("#acl-modal-rule-save-btn").on("click", _.bind(this.saveRule, this));
        $("#acl-add-model-source-select").on("OPTION_CHANGE", this.modalRuleSourceSelected);
        $("#modal-protocol-select").on("OPTION_CHANGE", this.modalRuleProtocolSelected);
        $("#protocol-icmp-main-select").on("OPTION_CHANGE", this.modalRuleICMPSelected);
        $("#acl-add-model-direction-outbound").on("change", this.changeBoundInModal);
        $("#acl-add-model-direction-inbound").on("change", this.changeBoundInModal);
        $('.simple-protocol-select li').on('click', this.clickSimpleProtocolSelect);
        return false;
      },
      saveRule: function() {
        var $custom_source_dom, $protocol_dom, $rule_number_dom, icmpCode, icmpType, needValidate, number, port, protocol, result, source, validateMap;
        $rule_number_dom = $('#modal-acl-number');
        number = $('#modal-acl-number').val();
        result = this.model.checkRuleNumber(number);
        $rule_number_dom.parsley('custom', function(val) {
          if (_.isString(result)) {
            return result;
          } else {
            return null;
          }
        });
        if (!$rule_number_dom.parsley('validate')) {
          return;
        }
        source = $('#acl-add-model-source-select').find('.selected').attr('data-id');
        if (source === "custom") {
          $custom_source_dom = $('#modal-acl-source-input');
          $custom_source_dom.parsley('custom', function(val) {
            if (!MC.validate('cidr', val)) {
              return lang.PARSLEY.MUST_BE_CIDR_BLOCK;
            }
            return null;
          });
          if (!$custom_source_dom.parsley('validate')) {
            return;
          }
          source = $custom_source_dom.val();
        }
        $protocol_dom = $('#modal-protocol-select').find('.selected');
        protocol = $protocol_dom.attr('data-id');
        validateMap = {
          'tcp': {
            dom: $('#sg-protocol-tcp input'),
            method: function(val) {
              var portAry;
              portAry = [];
              portAry = MC.validate.portRange(val);
              if (!portAry) {
                return 'Must be a valid format of port range.';
              }
              if (!MC.validate.portValidRange(portAry)) {
                return 'Port range needs to be a number or a range of numbers between 0 and 65535.';
              }
              return null;
            }
          },
          'udp': {
            dom: $('#sg-protocol-udp input'),
            method: function(val) {
              var portAry;
              portAry = [];
              portAry = MC.validate.portRange(val);
              if (!portAry) {
                return 'Must be a valid format of port range.';
              }
              if (!MC.validate.portValidRange(portAry)) {
                return 'Port range needs to be a number or a range of numbers between 0 and 65535.';
              }
              return null;
            }
          },
          'custom': {
            dom: $('#sg-protocol-custom input'),
            method: function(val) {
              if (!MC.validate.port(val)) {
                return 'Must be a valid format of port.';
              }
              return null;
            }
          }
        };
        if (validateMap[protocol]) {
          needValidate = validateMap[protocol];
          needValidate.dom.parsley('custom', needValidate.method);
          if (!needValidate.dom.parsley('validate')) {
            return;
          }
        }
        if (protocol === 'tcp') {
          port = $('#sg-protocol-' + protocol + ' input').val();
          protocol = "6";
        } else if (protocol === 'udp') {
          port = $('#sg-protocol-' + protocol + ' input').val();
          protocol = '17';
        } else if (protocol === 'icmp') {
          icmpType = $('#protocol-icmp-main-select').find('.selected').attr('data-id');
          icmpCode = $('#protocol-icmp-sub-select-' + icmpType).find('.selected').attr('data-id') || "-1";
          protocol = '1';
          port = icmpType + "/" + icmpCode;
        } else if (protocol === 'custom') {
          protocol = $('#sg-protocol-' + protocol + ' input').val();
          port = "";
        } else if (protocol === 'all') {
          protocol = '-1';
          port = '';
        }
        this.model.addAclRule({
          number: number,
          action: $('#acl-add-model-action-allow').is(':checked') ? "allow" : "deny",
          egress: $('#acl-add-model-direction-outbound').is(':checked'),
          cidr: source,
          protocol: protocol,
          port: port
        });
        modal.close();
        return null;
      },
      modalRuleSourceSelected: function(event) {
        var value;
        value = $.trim($(event.target).find('.selected').attr('data-id'));
        if (value === 'custom') {
          $('#modal-acl-source-input').show();
          return $('#acl-add-model-source-select .selection').width(68);
        } else {
          $('#modal-acl-source-input').hide();
          return $('#acl-add-model-source-select .selection').width(322);
        }
      },
      modalRuleProtocolSelected: function(event) {
        var icmpSelectElem, icmpSelectedValue, protocolSelectElem, selectedValue;
        protocolSelectElem = $(event.target);
        selectedValue = protocolSelectElem.find('.selected').attr('data-id');
        if (selectedValue) {
          $('#sg-protocol-custom').hide();
          $('#sg-protocol-all').hide();
          $('#sg-protocol-select-result .sg-protocol-option-input').hide();
          $('#sg-protocol-' + selectedValue).show();
          icmpSelectElem = $('#protocol-icmp-main-select');
          icmpSelectedValue = icmpSelectElem.find('.selected').attr('data-id');
          if (icmpSelectedValue !== '3' && icmpSelectedValue !== '5' && icmpSelectedValue !== '11' && icmpSelectedValue !== '12') {
            $('.protocol-icmp-sub-select').hide();
          }
        }
        return null;
      },
      modalRuleICMPSelected: function(event) {
        var icmpSelectElem, selectedValue, subSelectElem;
        icmpSelectElem = $(event.target);
        selectedValue = icmpSelectElem.find('.selected').attr('data-id');
        subSelectElem = $('#protocol-icmp-sub-select-' + selectedValue);
        $('.protocol-icmp-sub-select').hide();
        subSelectElem.show();
        return null;
      },
      changeBoundInModal: function(event) {
        var inbound;
        inbound = $('#acl-add-model-direction-inbound').prop('checked');
        if (inbound) {
          return $('#acl-add-model-bound-label').text(lang.IDE.POP_ACLRULE_LBL_SOURCE);
        } else {
          return $('#acl-add-model-bound-label').text(lang.IDE.POP_ACLRULE_LBL_DEST);
        }
      },
      clickSimpleProtocolSelect: function(event) {
        var protocolMap, protocolName, protocolPort, toggleToProtocol;
        protocolName = $(event.currentTarget).text();
        toggleToProtocol = function(protocolName) {
          var protocolNameLowerCase, selectBox;
          protocolNameLowerCase = protocolName.toLowerCase();
          selectBox = $('#modal-protocol-select');
          selectBox.find('li.item').removeClass('selected');
          selectBox.find('li.item[data-id=' + protocolNameLowerCase + ']').addClass('selected');
          selectBox.find('.selection').text(protocolName);
          return selectBox.trigger('OPTION_CHANGE');
        };
        protocolMap = {
          'SSH': 22,
          'SMTP': 25,
          'DNS': 53,
          'HTTP': 80,
          'POP3': 110,
          'IMAP': 143,
          'LDAP': 289,
          'HTTPS': 443,
          'SMTPS': 465,
          'IMAPS': 993,
          'POP3S': 995,
          'MS SQL': 1433,
          'MYSQL': 3306,
          'RDP': 3389
        };
        protocolPort = protocolMap[protocolName];
        if (protocolName === 'DNS') {
          toggleToProtocol('UDP');
          return $('#sg-protocol-udp input').val(protocolPort);
        } else {
          toggleToProtocol('TCP');
          return $('#sg-protocol-tcp input').val(protocolPort);
        }
      }
    });
    return new ACLView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/acl/main',["../base/main", './model', './view', 'event'], function(PropertyModule, model, view) {
    var AclModule;
    model.on('REFRESH_RULE_LIST', function() {
      return view.refreshRuleList();
    });
    AclModule = PropertyModule.extend({
      subPanelID: "ACL",
      initStack: function() {
        this.model = model;
        this.model.isApp = false;
        this.view = view;
        return null;
      },
      initApp: function() {
        this.model = model;
        this.model.isApp = true;
        this.view = view;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.model.isApp = false;
        this.view = view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/launchconfig/model',['../base/model', 'constant', 'Design', "CloudResources"], function(PropertyModel, constant, Design, CloudResources) {
    var LaunchConfigModel;
    LaunchConfigModel = PropertyModel.extend({
      initialize: function() {
        var me;
        me = this;
        return this.on('EC2_KPDOWNLOAD_RETURN', function(result) {
          var keypairname, region_name;
          region_name = result.param[3];
          keypairname = result.param[4];
          if (me.get("keyName") !== keypairname) {
            return;
          }

          /*
           * The EC2_KPDOWNLOAD_RETURN event won't fire when the result.is_error
           * is true. According to bugs in service models.
           */
          me.trigger("KP_DOWNLOADED", result.resolved_data);
          return null;
        });
      },
      init: function(uid) {
        var agentData, data, design, kp, rootDevice;
        this.lc = Design.instance().component(uid);
        if (!this.lc) {
          return false;
        }
        data = this.lc.toJSON();
        data.uid = uid;
        data.isEditable = this.isAppEdit;
        data.app_view = Design.instance().modeIsAppView();
        this.set(data);
        this.set("displayAssociatePublicIp", true);
        this.set("monitorEnabled", true);
        this.set("can_set_ebs", this.lc.isEbsOptimizedEnabled());
        this.getInstanceType();
        this.getAmi();
        this.getKeyPair();
        design = Design.instance();
        agentData = design.get('agent');
        this.set("stackAgentEnable", agentData.enabled);
        if (this.isApp) {
          this.getAppLaunch(uid);
          kp = this.lc.connectionTargets('KeypairUsage')[0];
          this.set('keyName', kp && kp.get("appId") || this.lc.get('keyName'));
          rootDevice = this.lc.getBlockDeviceMapping();
          if (rootDevice.length === 1) {
            this.set("rootDevice", rootDevice[0]);
          }
          return;
        }
        return null;
      },
      getInstanceType: function(uid, data) {
        var instanceType, region, view_instance_type;
        instanceType = this.lc.get('instanceType');
        region = Design.instance().region();
        view_instance_type = _.map(this.lc.getInstanceType(), function(value) {
          var configs;
          configs = App.model.getInstanceTypeConfig(region);
          if (!configs) {
            return {};
          }
          configs = configs[value].formated_desc;
          return {
            main: configs[0],
            ecu: configs[1],
            core: configs[2],
            mem: configs[3],
            name: value,
            selected: instanceType === value
          };
        });
        this.set("instance_type", view_instance_type);
        return null;
      },
      setEbsOptimized: function(value) {
        return this.lc.set('ebsOptimized', value);
      },
      setCloudWatch: function(value) {
        return this.lc.set('monitoring', value);
      },
      setUserData: function(value) {
        return this.lc.set('userData', value);
      },
      setPublicIp: function(value) {
        this.lc.set("publicIp", value);
        if (value) {
          return Design.modelClassForType(constant.RESTYPE.IGW).tryCreateIgw();
        }
      },
      setInstanceType: function(value) {
        this.lc.setInstanceType(value);
        return this.lc.isEbsOptimizedEnabled();
      },
      getAmi: function() {
        var ami, ami_id, comp, data, deviceType, rdEbs, rdName, rootDevice;
        ami_id = this.get("imageId");
        comp = Design.instance().component(this.get("uid"));
        ami = this.lc.getAmi();
        if (!ami) {
          data = {
            name: ami_id + " is not available.",
            icon: "ami-not-available.png",
            unavailable: true
          };
        } else {
          data = {
            name: ami.name || ami.description || ami.id,
            icon: ami.osType + "." + ami.architecture + "." + ami.rootDeviceType + ".png"
          };
        }
        this.set('instance_ami', data);
        if (ami && ami.blockDeviceMapping && !$.isEmptyObject(ami.blockDeviceMapping)) {
          rdName = ami.rootDeviceName;
          rdEbs = ami.blockDeviceMapping[rdName];
          if (rdName && !rdEbs) {
            _.each(ami.blockDeviceMapping, function(value, key) {
              if (rdName.indexOf(key) !== -1 && !rdEbs) {
                rdEbs = value;
                rdName = key;
                return null;
              }
            });
            null;
          }
          deviceType = comp.get("rdType");
          rootDevice = {
            name: rdName,
            size: parseInt(comp.get("rdSize"), 10),
            iops: comp.get("rdIops"),
            isStandard: deviceType === 'standard',
            isIo1: deviceType === 'io1',
            isGp2: deviceType === 'gp2'
          };
          if (rootDevice.size < 10) {
            rootDevice.iops = "";
            rootDevice.iopsDisabled = true;
          }
          this.set("rootDevice", rootDevice);
        }
        this.set("min_volume_size", comp.getAmiRootDeviceVolumeSize());
        return null;
      },
      getKeyPair: function() {
        var selectedKP;
        selectedKP = Design.instance().component(this.get("uid")).connectionTargets("KeypairUsage")[0];
        if (selectedKP) {
          this.set("keypair", selectedKP.getKPList());
        }
        return null;
      },
      addKP: function(kp_name) {
        var KpModel, kp, _i, _len, _ref;
        KpModel = Design.modelClassForType(constant.RESTYPE.KP);
        _ref = KpModel.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          kp = _ref[_i];
          if (kp.get("name") === kp_name) {
            return false;
          }
        }
        kp = new KpModel({
          name: kp_name
        });
        return kp.id;
      },
      deleteKP: function(kp_uid) {
        Design.instance().component(kp_uid).remove();
        return null;
      },
      setKP: function(kp_uid) {
        var design, instance;
        design = Design.instance();
        instance = design.component(this.get("uid"));
        design.component(kp_uid).assignTo(instance);
        return null;
      },
      isSGListReadOnly: function() {
        if (this.get('appId')) {
          return true;
        }
      },
      getAppLaunch: function(uid) {
        var lc_data, _ref;
        lc_data = (_ref = CloudResources(constant.RESTYPE.LC, Design.instance().region()).get(this.lc.get('appId'))) != null ? _ref.toJSON() : void 0;
        this.set("ebsOptimized", this.lc.get("ebsOptimized") + "");
        this.set('name', this.lc.get('name'));
        this.set('lc', lc_data);
        this.set('uid', uid);
        return null;
      },
      getStateData: function() {
        return Design.instance().component(this.get("uid")).getStateData();
      },
      setIops: function(iops) {
        Design.instance().component(this.get("uid")).set("rdIops", iops);
        return null;
      },
      setVolumeType: function(type) {
        Design.instance().component(this.get("uid")).set("rdType", type);
        return null;
      },
      setVolumeSize: function(size) {
        Design.instance().component(this.get("uid")).set("rdSize", size);
        return null;
      }
    });
    return new LaunchConfigModel();
  });

}).call(this);

define('workspaces/awseditor/property/launchconfig/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, self=this, functionType="function", escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  
  return "style=\"color:red;\"";
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<section class=\"property-control-group\">\n			<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TYPE", {hash:{},data:data}))
    + "</label>\n			<div class=\"selectbox selectbox-mega\" id=\"instance-type-select\">\n				<div class=\"selection\"></div>\n				<ul class=\"dropdown\">\n					";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.instance_type), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				</ul>\n			</div>\n		</section>\n		";
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n					<li class=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "tooltip item\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.main)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n						<div class=\"main  truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.main)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n						<div class=\"sub\"><span>"
    + escapeExpression(((stack1 = (depth0 && depth0.ecu)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span> <span>"
    + escapeExpression(((stack1 = (depth0 && depth0.core)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span> <span>"
    + escapeExpression(((stack1 = (depth0 && depth0.mem)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n					</li>\n					";
  return buffer;
  }
function program5(depth0,data) {
  
  
  return "selected ";
  }

function program7(depth0,data) {
  
  
  return "hide";
  }

function program9(depth0,data) {
  
  
  return "\n				<input id=\"property-instance-ebs-optimized\" type=\"checkbox\" value=\"None\" checked=\"true\" name=\"ebs-optimized\" />\n				";
  }

function program11(depth0,data) {
  
  
  return "\n				<input id=\"property-instance-ebs-optimized\" type=\"checkbox\" value=\"None\" name=\"ebs-optimized\" />\n				";
  }

function program13(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<section class=\"property-control-group\">\n				<div class=\"checkbox\">\n					<input id=\"property-instance-public-ip\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.publicIp), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"None\" name=\"property-instance-public-ip\" />\n					<label for=\"property-instance-public-ip\"></label>\n				</div>\n				<label for=\"property-instance-public-ip\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ENI_AUTO_PUBLIC_IP", {hash:{},data:data}))
    + "</label>\n			</section>\n		";
  return buffer;
  }
function program14(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

function program16(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.monitoring), {hash:{},inverse:self.noop,fn:self.program(17, program17, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program17(depth0,data) {
  
  
  return "checked=\"true\"";
  }

function program19(depth0,data) {
  
  
  return "disabled=\"disabled\"";
  }

function program21(depth0,data) {
  
  var buffer = "";
  buffer += "\n			<div class=\"property-info\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_USERDATA_DISABLED_TO_INSTALL_VISUALOPS", {hash:{},data:data}))
    + "</div>\n			";
  return buffer;
  }

function program23(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				<label for=\"property-instance-user-data\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_USER_DATA", {hash:{},data:data}))
    + "</label>\n				<textarea id=\"property-instance-user-data\">"
    + escapeExpression(((stack1 = (depth0 && depth0.userData)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n			";
  return buffer;
  }

function program25(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"option-group-head\">Root Device</div>\n	<div class=\"option-group\">\n    <section class=\"property-control-group\">\n      <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_DEVICE_NAME", {hash:{},data:data}))
    + "</label>\n      <div>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n    </section>\n    <section class=\"property-control-group\">\n      <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SIZE", {hash:{},data:data}))
    + "</label>\n      <div class=\"ranged-number-input\">\n          <label for=\"volume-size-ranged\"></label>\n          <input id=\"volume-size-ranged\" type=\"text\" class=\"input\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.size)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"volume-size-ranged\" data-ignore=\"true\" maxlength=\"4\" data-required=\"true\" data-required=\"true\" data-type=\"number\"/>\n      <label for=\"volume-size-ranged\" >GB</label>\n      </div>\n    </section>\n\n    <section class=\"property-control-group\">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE", {hash:{},data:data}))
    + "</label>\n        <div id=\"volume-type-radios\">\n          <div>\n             <div class=\"radio\">\n                  <input id=\"radio-standard\" type=\"radio\" name=\"volume-type\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.isStandard), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"standard\" />\n                  <label for=\"radio-standard\"></label>\n              </div>\n              <label for=\"radio-standard\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE_STANDARD", {hash:{},data:data}))
    + "</label>\n          </div>\n          <div>\n             <div class=\"radio\">\n                  <input id=\"radio-gp2\" type=\"radio\" name=\"volume-type\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.isGp2), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"gp2\" />\n                  <label for=\"radio-gp2\"></label>\n              </div>\n              <label for=\"radio-gp2\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE_GP2", {hash:{},data:data}))
    + "</label>\n          </div>\n          <div ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.iopsDisabled), {hash:{},inverse:self.noop,fn:self.program(26, program26, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_MSG_WARN", {hash:{},data:data}))
    + "\">\n            <div class=\"radio\">\n              <input id=\"radio-io1\" type=\"radio\" name=\"volume-type\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.isIo1), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.iopsDisabled), {hash:{},inverse:self.noop,fn:self.program(28, program28, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"io1\" />\n              <label for=\"radio-io1\"></label>\n            </div>\n            <label for=\"radio-io1\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE_IO1", {hash:{},data:data}))
    + "</label>\n          </div>\n        </div>\n    </section>\n\n    <section class=\"property-control-group\" id=\"iops-group\" ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.isIo1), {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n        <label>IOPS</label>\n        <div class=\"ranged-number-input\">\n          <label for=\"iops-ranged\"></label>\n          <input id=\"iops-ranged\" type=\"text\" class=\"input\" min=\"100\" max=\"2000\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n        </div>\n    </section>\n\n<!--     <section class=\"property-control-group\">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ENCRYPTED", {hash:{},data:data}))
    + "</label>\n        <div>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.encrypted), {hash:{},inverse:self.program(34, program34, data),fn:self.program(32, program32, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n    </section> -->\n\n	</div>\n  ";
  return buffer;
  }
function program26(depth0,data) {
  
  
  return "class=\"tooltip\"";
  }

function program28(depth0,data) {
  
  
  return "disabled";
  }

function program30(depth0,data) {
  
  
  return "style=\"display:none\"";
  }

function program32(depth0,data) {
  
  
  return "Yes";
  }

function program34(depth0,data) {
  
  
  return "No";
  }

  buffer += "<article>\n\n	<div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LC_TITLE", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\">\n		<section class=\"property-control-group\" data-bind=\"true\">\n			<label class=\"left\" for=\"property-instance-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LC_NAME", {hash:{},data:data}))
    + "</label>\n			<span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n			<input class=\"input launch-configuration-name\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"property-instance-name\" id=\"property-instance-name\" maxlength=\"240\" data-required-rollback=\"true\" data-ignore=\"true\"/>\n		</section>\n        <section class=\"property-control-group\" data-bind=\"true\">\n            <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n            <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n        </section>\n		<section class=\"property-control-group\">\n			<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI", {hash:{},data:data}))
    + "</label>\n			<div id=\"property-ami\" class=\"property-block-wrap clearfix\" data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.imageId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n				<img class=\"property-ami-icon left\" src=\"/assets/images/ide/ami/"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.instance_ami)),stack1 == null || stack1 === false ? stack1 : stack1.icon)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" / >\n				<div class=\"property-ami-label\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.instance_ami)),stack1 == null || stack1 === false ? stack1 : stack1.unavailable), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.instance_ami)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n			</div>\n		</section>\n		";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.instance_type)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		<section class=\"property-control-group ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.can_set_ebs), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n			<div class=\"checkbox\">\n				";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.ebsOptimized), {hash:{},inverse:self.program(11, program11, data),fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				<label for=\"property-instance-ebs-optimized\"></label>\n			</div>\n			<label for=\"property-instance-ebs-optimized\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_EBS_OPTIMIZED", {hash:{},data:data}))
    + "</label>\n		</section>\n		<section class=\"property-control-group\">\n			<label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_KEY_PAIR", {hash:{},data:data}))
    + "</label>\n			<i class=\"icon-info tooltip default-kp-info\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "POP_INSTANCE_KEYPAIR_INFO_TIP", {hash:{},data:data}))
    + "\"></i>\n            <div id=\"kp-placeholder\"></div>\n		</section>\n		";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.displayAssociatePublicIp), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</div>\n\n	<div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ADVANCED_DETAIL", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\">\n		<section class=\"property-control-group\">\n			<div class=\"checkbox\">\n				<input id=\"property-instance-enable-cloudwatch\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.monitorEnabled), {hash:{},inverse:self.program(19, program19, data),fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"None\" name=\"property-instance-enable-cloudwatch\" />\n				<label for=\"property-instance-enable-cloudwatch\"></label>\n			</div>\n			<label for=\"property-instance-enable-cloudwatch\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_CW_ENABLED", {hash:{},data:data}))
    + "</label>\n\n			<p class=\"";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.monitoring), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " property-info\" id=\"property-cloudwatch-warn\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_CW_WARN", {hash:{},data:data}))
    + "<a target=\"_blank\" href=\"http://aws.amazon.com/cloudwatch\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_WATCH_LINK_TEXT", {hash:{},data:data}))
    + "</a></p>\n		</section>\n		<section class=\"property-control-group\">\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.stackAgentEnable), {hash:{},inverse:self.program(23, program23, data),fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</section>\n	</div>\n\n	";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.rootDevice), {hash:{},inverse:self.noop,fn:self.program(25, program25, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n	<div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n  <div class=\"option-group sg-group\"></div>\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/launchconfig/view',['../base/view', './template/stack', 'event', 'constant', 'i18n!/nls/lang.js', 'kp_dropdown'], function(PropertyView, template, ide_event, constant, lang, kp) {
    var LanchConfigView;
    LanchConfigView = PropertyView.extend({
      events: {
        'change .launch-configuration-name': 'lcNameChange',
        'change #property-res-desc': 'onChangeDescription',
        'change .instance-type-select': 'instanceTypeSelect',
        'change #property-instance-ebs-optimized': 'ebsOptimizedSelect',
        'change #property-instance-enable-cloudwatch': 'cloudwatchSelect',
        'change #property-instance-user-data': 'userdataChange',
        'change #property-instance-public-ip': 'publicIpChange',
        'OPTION_CHANGE #instance-type-select': "instanceTypeSelect",
        'OPTION_CHANGE #keypair-select': "setKP",
        'EDIT_UPDATE #keypair-select': "addKP",
        "EDIT_FINISHED #keypair-select": "updateKPSelect",
        'click #property-ami': 'openAmiPanel',
        'click #volume-type-radios input': 'changeVolumeType',
        'keyup #iops-ranged': 'changeIops',
        'keyup #volume-size-ranged': 'sizeChanged'
      },
      onChangeDescription: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      changeVolumeType: function(event) {
        var $this, iops, type, volumeSize;
        $this = $(event.currentTarget);
        if ($this.is(":disabled")) {
          return;
        }
        type = $this.val();
        $("#iops-group").toggle(type === "io1");
        if (type === "io1") {
          volumeSize = parseInt($('#volume-size-ranged').val(), 10);
          iops = volumeSize * 10;
          $("#iops-ranged").val(iops).keyup();
        } else {
          this.model.setIops("");
          $("#iops-ranged").val("");
        }
        this.model.setVolumeType(type);
        return null;
      },
      changeIops: function() {
        if ($('#iops-ranged').parsley('validate')) {
          this.model.setIops($('#iops-ranged').val());
        }
        return null;
      },
      sizeChanged: function(event) {
        var $iops, iops, iopsDisabled, volumeSize;
        if (!$('#volume-size-ranged').parsley('validate')) {
          return;
        }
        volumeSize = parseInt($('#volume-size-ranged').val(), 10);
        this.model.setVolumeSize(volumeSize);
        if (volumeSize < 10) {
          this.model.setIops("");
          iopsDisabled = true;
        }
        $iops = $('#volume-type-radios').children("div").last().toggleClass("tooltip", iopsDisabled).find('input');
        if (iopsDisabled) {
          $iops.attr("disabled", "disabled");
          $("#radio-standard").click();
          $("#iops-group").hide();
        } else {
          $iops.removeAttr('disabled');
        }
        iops = parseInt($("#iops-ranged").val(), 10) || 0;
        if (iops) {
          if (iops > volumeSize * 10) {
            iops = volumeSize * 10;
            $("#iops-ranged").val(iops);
          }
          $("#iops-ranged").keyup();
        }
        return null;
      },
      render: function() {
        var instanceModel, kpDropdown, me;
        this.$el.html(template(this.model.attributes));
        instanceModel = Design.instance().component(this.model.get('uid'));
        kpDropdown = new kp({
          resModel: instanceModel
        });
        this.addSubView(kpDropdown);
        this.$('#kp-placeholder').html(kpDropdown.render().el);
        me = this;
        $('#volume-size-ranged').parsley('custom', function(val) {
          val = +val;
          if (!val || val > 1024 || val < me.model.attributes.min_volume_size) {
            return sprintf(lang.PARSLEY.VOLUME_SIZE_OF_ROOTDEVICE_MUST_IN_RANGE, me.model.attributes.min_volume_size);
          }
        });
        $('#iops-ranged').parsley('custom', function(val) {
          var volume_size;
          val = +val;
          volume_size = parseInt($('#volume-size-ranged').val(), 10);
          if (val > 4000 || val < 100) {
            return lang.PARSLEY.IOPS_MUST_BETWEEN_100_4000;
          } else if (val > 10 * volume_size) {
            return lang.PARSLEY.IOPS_MUST_BE_LESS_THAN_10_TIMES_OF_VOLUME_SIZE;
          }
        });
        return this.model.attributes.name;
      },
      publicIpChange: function(event) {
        this.model.setPublicIp(event.currentTarget.checked);
        return null;
      },
      lcNameChange: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "LaunchConfiguration")) {
          this.model.setName(name);
          this.setTitle(name);
        }
        return null;
      },
      instanceTypeSelect: function(event, value) {
        var $ebs, has_ebs;
        has_ebs = this.model.setInstanceType(value);
        $ebs = $("#property-instance-ebs-optimized");
        $ebs.closest(".property-control-group").toggle(has_ebs);
        if (!has_ebs) {
          return $ebs.prop("checked", false);
        }
      },
      ebsOptimizedSelect: function(event) {
        this.model.setEbsOptimized(event.target.checked);
        return null;
      },
      cloudwatchSelect: function(event) {
        this.model.setCloudWatch(event.target.checked);
        return $("#property-cloudwatch-warn").toggle($("#property-instance-enable-cloudwatch").is(":checked"));
      },
      userdataChange: function(event) {
        return this.model.setUserData(event.target.value);
      },
      setKP: function(event, id) {
        return this.model.setKP(id);
      },
      addKP: function(event, id) {
        var result;
        result = this.model.addKP(id);
        if (!result) {
          notification("error", lang.NOTIFY.WARN_KEYPAIR_NAME_ALREADY_EXISTS);
          return result;
        }
      },
      updateKPSelect: function() {
        return $("#keypair-select").find(".item:last-child").append('<span class="icon-remove"></span>');
      },
      openAmiPanel: function(event) {
        this.trigger("OPEN_AMI", $("#property-ami").attr("data-uid"));
        return null;
      },
      deleteKP: function(event) {
        var $li, data, me, removeKP, selected, using;
        me = this;
        $li = $(event.currentTarget).closest("li");
        selected = $li.hasClass("selected");
        using = using === "true" ? true : selected;
        removeKP = function() {
          $li.remove();
          if (selected) {
            $("#keypair-select").find(".item").eq(0).click();
          }
          return me.model.deleteKP($li.attr("data-id"));
        };
        if (using) {
          data = {
            title: lang.IDE.TITLE_DELETE_KEYPAIR,
            confirm: "Delete",
            color: "red",
            body: sprintf(lang.PROP.LC_DELETE_CUSTUME_KEY_PAIR_CONFIRM, $li.text())
          };
          modal(MC.template.modalApp(data));
          $("#btn-confirm").one("click", function() {
            removeKP();
            return modal.close();
          });
        } else {
          removeKP();
        }
        return false;
      },
      disableUserDataInput: function(flag) {
        var $userDataInput;
        $userDataInput = $('#property-instance-user-data');
        if (flag === true) {
          $userDataInput.attr('disabled', 'disabled');
          return $userDataInput.addClass('tooltip').attr('data-tooltip', lang.PROP.INSTANCE_USER_DATA_DISABLE);
        } else if (flag === false) {
          $userDataInput.removeAttr('disabled');
          return $userDataInput.removeClass('tooltip').removeAttr('data-tooltip');
        }
      }
    });
    return new LanchConfigView();
  });

}).call(this);

define('workspaces/awseditor/property/launchconfig/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group\" data-bind=\"true\">\n      <label class=\"left\" for=\"property-instance-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LC_NAME", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n      <input class=\"input launch-configuration-name\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"property-instance-name\" id=\"property-instance-name\" maxlength=\"240\" data-required-rollback=\"true\" data-ignore=\"true\"/>\n    </section>\n    <section class=\"property-control-group\">\n      <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n      <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n    ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n      ";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.keyName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      ";
  return buffer;
  }

function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_ROOT_DEVICE", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <article class=\"property-app\">\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_DEVICE_NAME", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.DeviceName), {hash:{},data:data}))
    + "</dd>\n      </dl>\n      <dl class=\"dl-vertical\">\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_TYPE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.readableVt.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.VolumeType), {hash:{},data:data}))
    + "</dd>\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.SnapshotId), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SIZE", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.VolumeSize), {hash:{},data:data}))
    + " GB</dd>\n<!--         <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_ENCRYPTED", {hash:{},data:data}))
    + "</dt>\n        <dd>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.encrypted), {hash:{},inverse:self.program(12, program12, data),fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd> -->\n        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.Iops), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </dl>\n    </article>\n  </div>\n  ";
  return buffer;
  }
function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.VOLUME_SNAPSHOT_ID", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.SnapshotId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

function program10(depth0,data) {
  
  
  return "Yes";
  }

function program12(depth0,data) {
  
  
  return "No";
  }

function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>IOPS</dt>\n        <dd>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.rootDevice)),stack1 == null || stack1 === false ? stack1 : stack1.Ebs)),stack1 == null || stack1 === false ? stack1 : stack1.Iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        ";
  return buffer;
  }

  buffer += "<article class=\"property-app\" data-bind=\"true\">\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LC_TITLE", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    <dl class=\"dl-vertical\">\n      ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LC_CREATE_TIME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.timeStr.call(depth0, ((stack1 = (depth0 && depth0.lc)),stack1 == null || stack1 === false ? stack1 : stack1.CreatedTime), {hash:{},data:data}))
    + "</dd>\n    </dl>\n\n\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_AMI", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.imageId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_TYPE", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.instanceType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_KEY_PAIR", {hash:{},data:data}))
    + "</dt>\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.app_view), {hash:{},inverse:self.program(5, program5, data),fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </dl>\n\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_EBS_OPTIMIZED", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.ebsOptimized)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<dd>\n    </dl>\n  </div>\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.rootDevice), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n  <div class=\"option-group sg-group\"></div>\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/launchconfig/app_view',['../base/view', './template/app'], function(PropertyView, template) {
    var LCAppView;
    LCAppView = PropertyView.extend({
      events: {
        'change #property-instance-enable-cloudwatch': 'cloudwatchSelect',
        'change #property-instance-user-data': 'userdataChange',
        'change #property-res-desc': 'onChangeDescription',
        'change .launch-configuration-name': 'lcNameChange'
      },
      kpModalClosed: false,
      render: function() {
        var data;
        data = _.extend({
          isEditable: this.model.isAppEdit
        }, this.model.toJSON());
        this.$el.html(template(data));
        return data.name;
      },
      onChangeDescription: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      lcNameChange: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "LaunchConfiguration")) {
          this.model.setName(name);
          this.setTitle(name);
        }
        return null;
      },
      cloudwatchSelect: function(event) {
        this.model.setCloudWatch(event.target.checked);
        return $("#property-cloudwatch-warn").toggle($("#property-instance-enable-cloudwatch").is(":checked"));
      },
      userdataChange: function(event) {
        return this.model.setUserData(event.target.value);
      },
      elbNameChange: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "Launch Configuration")) {
          this.model.setName(name);
          return this.setTitle(name);
        }
      }
    });
    return new LCAppView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/launchconfig/main',["../base/main", "./model", "./view", "./app_view", "../sglist/main", "constant", "event"], function(PropertyModule, model, view, app_view, sglist_main, constant, ide_event) {
    var LCModule;
    model.on("KP_DOWNLOADED", function(data, option) {
      return app_view.updateKPModal(data, option);
    });
    app_view.on("OPEN_AMI", function(id) {
      return PropertyModule.loadSubPanel("STATIC", id);
    });
    view.on("OPEN_AMI", function(id) {
      return PropertyModule.loadSubPanel("STATIC", id);
    });
    LCModule = PropertyModule.extend({
      handleTypes: constant.RESTYPE.LC,
      onUnloadSubPanel: function(id) {
        sglist_main.onUnloadSubPanel(id);
        return null;
      },
      initStack: function() {
        this.model = model;
        this.model.isApp = false;
        this.view = view;
        return null;
      },
      afterLoadStack: function() {
        sglist_main.loadModule(this.model);
        return null;
      },
      initApp: function() {
        this.model = model;
        this.model.isApp = true;
        this.model.isAppEdit = false;
        this.view = app_view;
        return null;
      },
      initAppEdit: function() {
        this.model = model;
        this.model.isApp = true;
        this.model.isAppEdit = true;
        this.view = app_view;
        return null;
      },
      afterLoadApp: function() {
        sglist_main.loadModule(this.model);
        return null;
      },
      afterLoadAppEdit: function() {
        sglist_main.loadModule(this.model);
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/property/asg/model',['../base/model', 'constant', 'Design'], function(PropertyModel, constant, Design) {
    var ASGConfigModel;
    ASGConfigModel = PropertyModel.extend({
      init: function(uid) {
        var component, data, lc, n;
        component = Design.instance().component(uid);
        if (component.type === "ExpandedAsg") {
          component = component.get("originalAsg");
          uid = component.id;
        }
        data = component != null ? component.toJSON() : void 0;
        data.uid = uid;
        this.set(data);
        lc = component.getLc();
        if (!lc) {
          this.set("emptyAsg", true);
          return;
        }
        this.set("has_elb", !!lc.connections("ElbAmiAsso").length);
        this.set("isEC2HealthCheck", component.isEC2HealthCheckType());
        n = component.getNotification();
        this.set("notification", n);
        this.set("has_notification", n.instanceLaunch || n.instanceLaunchError || n.instanceTerminate || n.instanceTerminateError || n.test);
        this.notiObject = component.getNotiObject();
        this.set("policies", _.map(data.policies, function(p) {
          data = $.extend(true, {}, p.attributes);
          data.alarmData.period = Math.round(data.alarmData.period / 60);
          return data;
        }));
        return null;
      },
      setHealthCheckType: function(type) {
        return Design.instance().component(this.get("uid")).set("healthCheckType", type);
      },
      setASGMin: function(value) {
        return Design.instance().component(this.get("uid")).set("minSize", value);
      },
      setASGMax: function(value) {
        return Design.instance().component(this.get("uid")).set("maxSize", value);
      },
      setASGDesireCapacity: function(value) {
        return Design.instance().component(this.get("uid")).set("capacity", value);
      },
      setASGCoolDown: function(value) {
        return Design.instance().component(this.get("uid")).set("cooldown", value);
      },
      setHealthCheckGrace: function(value) {
        return Design.instance().component(this.get("uid")).set("healthCheckGracePeriod", value);
      },
      setNotification: function(notification) {
        var n;
        n = Design.instance().component(this.get("uid")).setNotification(notification);
        this.notiObject = n;
        return null;
      },
      removeTopic: function() {
        var n;
        n = Design.instance().component(this.get("uid")).setNotification(notification);
        return n != null ? n.removeTopic() : void 0;
      },
      getNotificationTopicName: function() {
        return Design.instance().component(this.get("uid")).getNotificationTopicName();
      },
      setNotificationTopic: function(appId, name) {
        return Design.instance().component(this.get("uid")).setNotificationTopic(appId, name);
      },
      setTerminatePolicy: function(policies) {
        Design.instance().component(this.get("uid")).set("terminationPolicies", policies);
        this.set("terminationPolicies", policies);
        return null;
      },
      delPolicy: function(uid) {
        Design.instance().component(uid).remove();
        return null;
      },
      isDupPolicyName: function(policy_uid, name) {
        return _.some(Design.instance().component(this.get("uid")).get("policies"), function(p) {
          if (p.id !== policy_uid && p.get('name') === name) {
            return true;
          }
        });
      },
      defaultScalingPolicyName: function() {
        var component, count, currentNames, name, policies;
        component = Design.instance().component(this.get("uid"));
        if (component.type === "ExpandedAsg") {
          component = component.get("originalAsg");
        }
        policies = component.get("policies");
        count = policies.length;
        name = "" + this.attributes.name + "-policy-" + count;
        currentNames = _.map(policies, function(policy) {
          return policy.get('name');
        });
        while (__indexOf.call(currentNames, name) >= 0) {
          name = "" + this.attributes.name + "-policy-" + (++count);
        }
        return name;
      },
      getPolicy: function(uid) {
        var data;
        data = $.extend(true, {}, Design.instance().component(uid).attributes);
        data.alarmData.period = Math.round(data.alarmData.period / 60);
        return data;
      },
      setPolicy: function(policy_detail) {
        var PolicyModel, alarmData, asg, policy;
        asg = Design.instance().component(this.get("uid"));
        if (asg.type === "ExpandedAsg") {
          asg = asg.get('originalAsg');
        }
        if (!policy_detail.uid) {
          PolicyModel = Design.modelClassForType(constant.RESTYPE.SP);
          policy = new PolicyModel(policy_detail);
          asg.addScalingPolicy(policy);
          policy_detail.uid = policy.id;
          this.get("policies").push(policy.toJSON());
        } else {
          policy = Design.instance().component(policy_detail.uid);
          alarmData = policy_detail.alarmData;
          policy.setAlarm(alarmData);
          delete policy_detail.alarmData;
          policy.set(policy_detail);
          policy_detail.alarmData = alarmData;
        }
        if (policy_detail.sendNotification && policy_detail.topic) {
          policy.setTopic(policy_detail.topic.appId, policy_detail.topic.name);
        }
        return null;
      }
    });
    return new ASGConfigModel();
  });

}).call(this);

define('workspaces/awseditor/property/asg/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n  <div class=\"property-control-group\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_MSG_DROP_LC", {hash:{},data:data}))
    + "</div>\n  ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_DETAILS", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\" data-bind=\"true\">\n		<section class=\"property-control-group\">\n			<label class=\"left\" for=\"property-asg-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</label>\n			<span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_REQUIRED", {hash:{},data:data}))
    + "</span>\n			<input class=\"input\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-asg-name\" maxlength=\"255\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n		</section>\n\n		<section class=\"property-control-group\" data-bind=\"true\">\n	        <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n	        <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n		</section>\n\n		<section class=\"property-control-group clearfix\">\n			<div class=\"left property-asg-size\">\n				<label class=\"left\" for=\"property-asg-min\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_MIN_SIZE", {hash:{},data:data}))
    + "</label>\n				<input class=\"input\" type=\"text\" id=\"property-asg-min\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.minSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-type=\"digits\" data-ignore=\"true\" data-required-rollback=\"true\">\n			</div>\n			<div class=\"right property-asg-size\">\n				<label class=\"left\" for=\"property-asg-max\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_MAX_SIZE", {hash:{},data:data}))
    + "</label>\n				<input class=\"input\" type=\"text\" id=\"property-asg-max\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.maxSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-type=\"digits\" data-ignore=\"true\" data-required-rollback=\"true\">\n			</div>\n	  </section>\n\n		<section class=\"property-control-group property-asg-size\">\n			<label class=\"left\" for=\"property-asg-capacity\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_DESIRE_CAPACITY", {hash:{},data:data}))
    + "</label>\n			<input class=\"input\" type=\"text\" id=\"property-asg-capacity\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.capacity)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-type=\"digits\" data-ignore=\"true\">\n		</section>\n\n		<section class=\"property-control-group\">\n			<label class=\"left\" for=\"property-asg-cooldown\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_COOL_DOWN", {hash:{},data:data}))
    + "</label>\n			<input class=\"input input-short\" type=\"text\" id=\"property-asg-cooldown\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.cooldown)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-type=\"digits\" max=\"86400\">\n			<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_UNIT_SECONDS", {hash:{},data:data}))
    + "</span>\n		</section>\n\n		<section class=\"property-control-group clearfix\">\n			<label clas=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_HEALTH_CHECK_TYPE", {hash:{},data:data}))
    + "</label>\n			<div class=\"asg-radio-group\">\n				<div class=\"radio\">\n					<input id=\"property-asg-ec2\" type=\"radio\" value=\"ec2\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isEC2HealthCheck), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"property-asg-hc-option\" />\n					<label for=\"property-asg-ec2\"></label>\n				</div>\n				<label for=\"property-asg-ec2\">EC2</label>\n			</div>\n			<div ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.has_elb), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n				<div class=\"radio\">\n					<input id=\"property-asg-elb\" type=\"radio\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.has_elb), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"elb\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isEC2HealthCheck), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"property-asg-hc-option\" />\n					<label for=\"property-asg-elb\"></label>\n				</div>\n				<label for=\"property-asg-elb\">ELB</label>\n                <p id=\"property-asg-elb-warn\" class=\"hide property-info\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isEC2HealthCheck), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ELB_WARN", {hash:{},data:data}))
    + "</p>\n			</div>\n		</section>\n\n		<section class=\"property-control-group\">\n			<label class=\"left\" for=\"property-asg-healthcheck\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_HEALTH_CHECK_CRACE_PERIOD", {hash:{},data:data}))
    + "</label>\n			<input class=\"input input-short\" type=\"text\" id=\"property-asg-healthcheck\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.healthCheckGracePeriod)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-type=\"digits\" data-ignore=\"true\">\n			<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_UNIT_SECONDS", {hash:{},data:data}))
    + "</span>\n		</section>\n	</div>\n\n	<div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\">\n		<section class=\"property-control-group pos-r property-term-p\">\n			<h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TERMINATION_POLICY", {hash:{},data:data}))
    + "</h5>\n			<div class=\"termination-policy-brief\">"
    + escapeExpression(((stack1 = (depth0 && depth0.term_policy_brief)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n			<div class=\"asg-p-action\"><i class=\"icon-edit tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TERMINATION_EDIT", {hash:{},data:data}))
    + "\" id=\"property-asg-term-edit\"></i></div>\n		</section>\n\n		<ul id=\"property-asg-policies\" class=\"property-list\">\n			<li class=\"pos-r hide\">\n        <h5 class=\"property-asg-policy-name name\"></h5>\n				<span class=\"asg-p-metric asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ALARM_METRIC", {hash:{},data:data}))
    + "\"></span>\n        <span class=\"asg-p-eval asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_THRESHOLD", {hash:{},data:data}))
    + "\"></span>\n        <span class=\"asg-p-periods asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_PERIOD", {hash:{},data:data}))
    + "\"></span>\n        <span class=\"asg-p-trigger asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ACTION", {hash:{},data:data}))
    + "\"></span>\n        <span class=\"asg-p-adjust asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ADJUSTMENT", {hash:{},data:data}))
    + "\"></span>\n        <div class=\"asg-p-action\">\n	        <i class=\"icon-edit tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_EDIT", {hash:{},data:data}))
    + "\"></i>\n	        <i class=\"icon-remove icon-del tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_REMOVE", {hash:{},data:data}))
    + "\"></i>\n        </div>\n      </li>\n      ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.policies), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n		</ul>\n		<div class=\"property-control-group tac\">\n			<button class=\"btn btn-blue ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.can_add_policy), {hash:{},inverse:self.noop,fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" id=\"property-asg-policy-add\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TIP_YOU_CAN_ONLY_ADD_25_SCALING_POLICIES", {hash:{},data:data}))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_BTN_ADD_SCALING_POLICY", {hash:{},data:data}))
    + "</button>\n		</div>\n	</div>\n\n	<div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_NOTIFICATION", {hash:{},data:data}))
    + "</div>\n	<div class=\"option-group\" id=\"property-asg-sns\">\n		<div class=\"property-control-group property-asg-notification-wrap\">\n			<p>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SEND_NOTIFICATION", {hash:{},data:data}))
    + "</p>\n			<div><div class=\"checkbox\">\n				<input id=\"property-asg-sns1\" type=\"checkbox\" data-key=\"instanceLaunch\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.instanceLaunch), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n				<label for=\"property-asg-sns1\"></label>\n			</div>\n			<label for=\"property-asg-sns1\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SUCCESS_INSTANCES_LAUNCH", {hash:{},data:data}))
    + "</label></div>\n\n			<div><div class=\"checkbox\">\n				<input id=\"property-asg-sns2\" type=\"checkbox\" data-key=\"instanceLaunchError\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.instanceLaunchError), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n				<label for=\"property-asg-sns2\"></label>\n			</div>\n			<label for=\"property-asg-sns2\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_FAILED_INSTANCES_LAUNCH", {hash:{},data:data}))
    + "</label></div>\n\n			<div><div class=\"checkbox\">\n				<input id=\"property-asg-sns3\" type=\"checkbox\" data-key=\"instanceTerminate\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.instanceTerminate), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n				<label for=\"property-asg-sns3\"></label>\n			</div>\n			<label for=\"property-asg-sns3\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SUCCESS_INSTANCES_TERMINATE", {hash:{},data:data}))
    + "</label></div>\n\n			<div><div class=\"checkbox\">\n				<input id=\"property-asg-sns4\" type=\"checkbox\" data-key=\"instanceTerminateError\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.instanceTerminateError), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n				<label for=\"property-asg-sns4\"></label>\n			</div>\n			<label for=\"property-asg-sns4\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_FAILED_INSTANCES_TERMINATE", {hash:{},data:data}))
    + "</label></div>\n\n			<div><div class=\"checkbox\">\n				<input id=\"property-asg-sns5\" type=\"checkbox\" data-key=\"test\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.test), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n				<label for=\"property-asg-sns5\"></label>\n			</div>\n			<label for=\"property-asg-sns5\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_VALIDATE_SNS", {hash:{},data:data}))
    + "</label></div>\n\n		</div>\n\n		<div class=\"property-control-group sns-group\" style=\"display:none;\">\n			<label for=\"sns-placeholder\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SELECT_SNS_TOPIC", {hash:{},data:data}))
    + "</label>\n			<div id=\"sns-placeholder\"></div>\n		</div>\n\n	</div>\n	";
  return buffer;
  }
function program4(depth0,data) {
  
  
  return "checked=\"true\"";
  }

function program6(depth0,data) {
  
  var buffer = "";
  buffer += "data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_HAS_ELB_WARN", {hash:{},data:data}))
    + "\" class=\"asg-radio-group tooltip\"";
  return buffer;
  }

function program8(depth0,data) {
  
  
  return "class=\"asg-radio-group\"";
  }

function program10(depth0,data) {
  
  
  return "disabled=\"disabled\"";
  }

function program12(depth0,data) {
  
  
  return " style=\"display: block\"";
  }

function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <li class=\"pos-r\" data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n        <h5 class=\"property-asg-policy-name name\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_NAME", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h5>\n      	<span class=\"asg-p-metric asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ALARM_METRIC", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.metricName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n        <span class=\"asg-p-eval asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_THRESHOLD", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.comparisonOperator)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.threshold)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + escapeExpression(((stack1 = (depth0 && depth0.unit)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n        <span class=\"asg-p-periods asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_PERIOD", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.evaluationPeriods)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "x"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.period)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "m</span>\n        <span class=\"asg-p-trigger asg-p-tag asg-p-trigger-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ACTION", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n        <span class=\"asg-p-adjust asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ADJUSTMENT", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.adjustment)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(((stack1 = (depth0 && depth0.adjustmentType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n        <div class=\"asg-p-action\">\n	        <i class=\"icon-edit tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_EDIT", {hash:{},data:data}))
    + "\"></i>\n	        <i class=\"icon-remove icon-del tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_REMOVE", {hash:{},data:data}))
    + "\"></i>\n        </div>\n      </li>\n      ";
  return buffer;
  }

function program16(depth0,data) {
  
  
  return "disabled tooltip";
  }

function program18(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

  buffer += "<article>\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.emptyAsg), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/asg/template/policy',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  
  return "readonly";
  }

function program3(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

  buffer += "<div class=\"scroll-wrap\" style=\"max-height:500px;\" id=\"asg-termination-policy\" data-bind=\"true\">\n	<div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n	<div class=\"modal-body scroll-content\" id=\"property-asg-policy\" data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.uid)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n\n		<label for=\"asg-policy-name\" class=\"modal-text-major\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_NAME", {hash:{},data:data}))
    + "</label>\n		<input type=\"text\" class=\"input\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"asg-policy-name\" data-required-rollback=\"true\" data-ignore=\"true\" maxlength=\"255\" data-required=\"true\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isOld), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n\n\n		<section class=\"modal-control-group\">\n			<h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ALARM", {hash:{},data:data}))
    + "</h5>\n			<div class=\"control-sentence\">\n				<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_WHEN", {hash:{},data:data}))
    + "</span>\n\n				<div class=\"selectbox\" id=\"asg-policy-metric\">\n					<div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_CPU", {hash:{},data:data}))
    + "</div>\n					<ul class=\"dropdown\" tabindex=\"-1\">\n						<li data-id=\"CPUUtilization\" class=\"item selected\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_CPU", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"DiskReadBytes\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_DISC_READS", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"DiskReadOps\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_DISK_READ_OPERATIONS", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"DiskWriteBytes\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_DISK_WRITES", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"DiskWriteOps\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_DISK_WRITE_OPERATIONS", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"NetworkIn\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_NETWORK_IN", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"NetworkOut\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_NETWORK_OUT", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"StatusCheckFailed\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_STATUS_CHECK_FAILED_ANY", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"StatusCheckFailed_Instance\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_STATUS_CHECK_FAILED_INSTANCE", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"StatusCheckFailed_System\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_STATUS_CHECK_FAILED_SYSTEM", {hash:{},data:data}))
    + "</li>\n					</ul>\n				</div>\n\n				<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_IS", {hash:{},data:data}))
    + "</span>\n\n				<div class=\"selectbox\" id=\"asg-policy-eval\">\n					<div class=\"selection\">&gt;=</div>\n					<ul class=\"dropdown\" tabindex=\"-1\">\n						<li data-id=\">\" class=\"item\">&gt;</li>\n						<li data-id=\">=\" class=\"item selected\">&gt;=</li>\n						<li data-id=\"<\" class=\"item\">&lt;</li>\n						<li data-id=\"<=\" class=\"item\">&lt;=</li>\n					</ul>\n				</div>\n\n				<input type=\"text\" class=\"input\" id=\"asg-policy-threshold\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.threshold)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" placeholder=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_THRESHOLD", {hash:{},data:data}))
    + "\" data-ignore=\"true\" data-ignore-regexp=\"^[0-9]*\\.?[0-9]*$\" data-required=\"true\">\n\n				<span id=\"asg-policy-unit\">"
    + escapeExpression(((stack1 = (depth0 && depth0.unit)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n\n				<br />\n\n				<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_FOR", {hash:{},data:data}))
    + "</span>\n\n				<input type=\"text\" class=\"input\" id=\"asg-policy-periods\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.evaluationPeriods)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-required=\"true\" data-ignore=\"true\" data-type=\"digits\">\n\n				<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_PERIOD", {hash:{},data:data}))
    + "</span>\n\n				<input type=\"text\" class=\"input\" id=\"asg-policy-second\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.period)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-required=\"true\" data-ignore=\"true\" data-type=\"digits\">\n\n				<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_SECONDS", {hash:{},data:data}))
    + "</span>\n\n				<br />\n\n				<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_START_SCALING", {hash:{},data:data}))
    + "</span>\n\n				<div class=\"selectbox\" id=\"asg-policy-trigger\">\n					<div class=\"selection\">ALARM</div>\n					<ul class=\"dropdown\" tabindex=\"-1\">\n						<li data-id=\"ALARM\" class=\"item selected\">ALARM</li>\n						<li data-id=\"INSUFFICIANT_DATA\" class=\"item\">INSUFFICIANT_DATA</li>\n						<li data-id=\"OK\" class=\"item\">OK</li>\n					</ul>\n				</div>\n\n				<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_STATE", {hash:{},data:data}))
    + "</span>\n			</div>\n		</section>\n\n		<section class=\"modal-control-group\">\n			<h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_SCALING_ACTIVITY", {hash:{},data:data}))
    + "</h5>\n			<div class=\"control-sentence\">\n				<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADJUSTMENT", {hash:{},data:data}))
    + "</span>\n				<div class=\"selectbox\" id=\"asg-policy-adjust-type\">\n					<div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADJUSTMENT_CHANGE", {hash:{},data:data}))
    + "</div>\n					<ul class=\"dropdown\" tabindex=\"-1\">\n						<li data-id=\"ChangeInCapacity\" class=\"item selected\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADJUSTMENT_CHANGE", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"ExactCapacity\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADJUSTMENT_EXACT", {hash:{},data:data}))
    + "</li>\n						<li data-id=\"PercentChangeInCapacity\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADJUSTMENT_PERCENT", {hash:{},data:data}))
    + "</li>\n					</ul>\n				</div>\n				<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADJUSTMENT_OF", {hash:{},data:data}))
    + "</span>\n				<input type=\"text\" class=\"input tooltip\" id=\"asg-policy-adjust\" data-required=\"true\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.adjustment)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" placeholder=\"e.g. -1\" data-ignore=\"true\" data-ignore-regexp=\"^-?[0-9]*$\">\n				<span class=\"hide pecentcapcity\">%</span>\n				<span>.</span>\n			</div>\n		</section>\n\n		<h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED", {hash:{},data:data}))
    + "</h5>\n		<div class=\"asg-policy-advanced\">\n			<section id=\"asg-policy-statistics\" class=\"modal-control-group\">\n				<h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_ALARM_OPTION", {hash:{},data:data}))
    + "</h5>\n				<div class=\"clearfix\">\n					<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_STATISTIC", {hash:{},data:data}))
    + "</label>\n					<div class=\"selectbox\" id=\"asg-policy-statistics\">\n						<div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_STATISTIC_AVG", {hash:{},data:data}))
    + "</div>\n						<ul class=\"dropdown\" tabindex=\"-1\">\n							<li data-id=\"Average\" class=\"item selected\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_STATISTIC_AVG", {hash:{},data:data}))
    + "</li>\n							<li data-id=\"Minimum\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_STATISTIC_MIN", {hash:{},data:data}))
    + "</li>\n							<li data-id=\"Maximum\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_STATISTIC_MAX", {hash:{},data:data}))
    + "</li>\n							<li data-id=\"SampleCount\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_STATISTIC_SAMPLE", {hash:{},data:data}))
    + "</li>\n							<li data-id=\"Sum\" class=\"item\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_STATISTIC_SUM", {hash:{},data:data}))
    + "</li>\n						</ul>\n					</div>\n				</div>\n			</section>\n\n			<section id=\"asg-policy-scaling\" class=\"modal-control-group\">\n				<h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_SCALING_OPTION", {hash:{},data:data}))
    + "</h5>\n				<div class=\"clearfix\">\n					<label for=\"asg-policy-cooldown\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_COOLDOWN_PERIOD", {hash:{},data:data}))
    + "</label>\n					<input type=\"text\" class=\"input tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_TIP_COOLDOWN_PERIOD", {hash:{},data:data}))
    + "\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.cooldown)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"5\" placeholder=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_DEFAULT_COOL_DOWN", {hash:{},data:data}))
    + "\" data-ignore=\"true\" data-type=\"digits\" id=\"asg-policy-cooldown\">\n					<span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_UNIT_SECONDS", {hash:{},data:data}))
    + "</span>\n				</div>\n\n				<div id=\"asg-policy-step-wrapper\" class=\"hide clearfix pecentcapcity\">\n					<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_MIN_ADJUST_STEP", {hash:{},data:data}))
    + "</label>\n					<input type=\"text\" class=\"input tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ADD_POLICY_ADVANCED_TIP_MIN_ADJUST_STEP", {hash:{},data:data}))
    + "\" id=\"asg-policy-step\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.minAdjustStep)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-ignore=\"true\" maxlength=\"5\" data-type=\"digits\">\n				</div>\n			</section>\n\n			<section class=\"modal-control-group\">\n				<h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_NOTIFICATION", {hash:{},data:data}))
    + "</h5>\n				<div class=\"checkbox\">\n					<input id=\"asg-policy-notify\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.sendNotification), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n					<label for=\"asg-policy-notify\"></label>\n				</div>\n				<label id=\"asg-policy-notify-label\" for=\"asg-policy-notify\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SEND_NOTIFICATION_D", {hash:{},data:data}))
    + "</label>\n\n				<div class=\"sns-policy-field\">\n					<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SELECT_SNS_TOPIC", {hash:{},data:data}))
    + "</label>\n					<div class=\"policy-sns-placeholder\"></div>\n				</div>\n\n			</section>\n		</div>\n	</div>\n</div>\n</div>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/asg/template/term',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, self=this, functionType="function", escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n          <li ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.checked), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n            <div class=\"checkbox\">\n              <input id=\"property-asg-term"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.checked), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n              <label for=\"property-asg-term"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></label>\n            </div>\n            <label for=\"property-asg-term"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"list-name\" data-name=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.text)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</label>\n            <span class=\"drag-handle tooltip icon-sort\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TERMINATION_MSG_DRAG", {hash:{},data:data}))
    + "\"></span>\n          </li>\n          ";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return "class=\"enabled\"";
  }

function program4(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

  buffer += "<div style=\"width:420px\">\n   <div class=\"modal-header\">\n      <h3>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TERMINATION_EDIT", {hash:{},data:data}))
    + "</h3>\n      <i class=\"modal-close\">&times;</i>\n   </div>\n   <div class=\"modal-body\" id=\"property-asg-term\">\n\n      <p class=\"modal-text-minor\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TERMINATION_TEXT_WARN", {hash:{},data:data}))
    + "</p>\n      <div class=\"drag-sort-list-wrap\">\n        <ul class=\"drag-sort-list\" id=\"property-term-list\">\n          ";
  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </ul>\n\n        <ul class=\"drag-sort-list\">\n          <li ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.useDefault), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n            <div class=\"checkbox\">\n              <input id=\"property-asg-term-def\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.useDefault), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n              <label for=\"property-asg-term-def\"></label>\n            </div>\n            <span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DEFAULT", {hash:{},data:data}))
    + "</span>\n          </li>\n        </ul>\n      </div>\n   </div>\n   <div class=\"modal-footer\">\n      <button id=\"property-asg-term-done\" class=\"btn btn-blue\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_DONE", {hash:{},data:data}))
    + "</button>\n      <button class=\"btn modal-close btn-silver\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_CANCEL", {hash:{},data:data}))
    + "</button>\n   </div>\n</div>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/asg/view',['../base/view', './template/stack', './template/policy', './template/term', 'i18n!/nls/lang.js', 'sns_dropdown', 'UI.modalplus'], function(PropertyView, template, policy_template, term_template, lang, snsDropdown, modalplus) {
    var InstanceView, adjustMap, adjustTooltip, adjustdefault, metricMap, unitMap;
    metricMap = {
      "CPUUtilization": lang.PROP.ASG_POLICY_CPU,
      "DiskReadBytes": lang.PROP.ASG_POLICY_DISC_READS,
      "DiskReadOps": lang.PROP.ASG_POLICY_DISK_READ_OPERATIONS,
      "DiskWriteBytes": lang.PROP.ASG_POLICY_DISK_WRITES,
      "DiskWriteOps": lang.PROP.ASG_POLICY_DISK_WRITE_OPERATIONS,
      "NetworkIn": lang.PROP.ASG_POLICY_NETWORK_IN,
      "NetworkOut": lang.PROP.ASG_POLICY_NETWORK_OUT,
      "StatusCheckFailed": lang.PROP.ASG_POLICY_STATUS_CHECK_FAILED_ANY,
      "StatusCheckFailed_Instance": lang.PROP.ASG_POLICY_STATUS_CHECK_FAILED_INSTANCE,
      "StatusCheckFailed_System": lang.PROP.ASG_POLICY_STATUS_CHECK_FAILED_SYSTEM
    };
    adjustMap = {
      "ChangeInCapacity": lang.PROP.ASG_ADD_POLICY_ADJUSTMENT_CHANGE,
      "ExactCapacity": lang.PROP.ASG_ADD_POLICY_ADJUSTMENT_EXACT,
      "PercentChangeInCapacity": lang.PROP.ASG_ADD_POLICY_ADJUSTMENT_PERCENT
    };
    adjustdefault = {
      "ChangeInCapacity": lang.PROP.EG_MINUS_1,
      "ExactCapacity": lang.PROP.EG_5,
      "PercentChangeInCapacity": lang.PROP.EG_MINUS_30
    };
    adjustTooltip = {
      "ChangeInCapacity": lang.PROP.ASG_ADJUST_TOOLTIP_CHANGE,
      "ExactCapacity": lang.PROP.ASG_ADJUST_TOOLTIP_EXACT,
      "PercentChangeInCapacity": lang.PROP.ASG_ADJUST_TOOLTIP_PERCENT
    };
    unitMap = {
      CPUUtilization: "%",
      DiskReadBytes: "B",
      DiskWriteBytes: "B",
      NetworkIn: "B",
      NetworkOut: "B"
    };
    InstanceView = PropertyView.extend({
      events: {
        "click #property-asg-term-edit": "showTermPolicy",
        "click #property-asg-sns input[type=checkbox]": "setNotification",
        "change #property-asg-elb": "setHealthyCheckELBType",
        "change #property-asg-ec2": "setHealthyCheckEC2Type",
        "change #property-asg-name": "setASGName",
        "change #property-asg-min": "setSizeGroup",
        "change #property-asg-max": "setSizeGroup",
        "change #property-asg-capacity": "setSizeGroup",
        "change #property-asg-cooldown": "setASGCoolDown",
        "change #property-asg-healthcheck": "setHealthCheckGrace",
        "click #property-asg-policy-add": "addScalingPolicy",
        "click #property-asg-policies .icon-edit": "editScalingPolicy",
        "click #property-asg-policies .icon-del": "delScalingPolicy",
        'change #property-res-desc': 'onChangeDescription'
      },
      render: function() {
        var data, p, _i, _len, _ref;
        this.createSnsNotiDropdown(this.model.getNotificationTopicName());
        data = this.model.toJSON();
        _ref = data.policies;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          p.unit = unitMap[p.alarmData.metricName];
          p.alarmData.metricName = metricMap[p.alarmData.metricName];
          p.adjustmentType = adjustMap[p.adjustmentType];
        }
        data.term_policy_brief = this.getTerminationPoliciesText(data.terminationPolicies);
        data.can_add_policy = data.policies.length < 25;
        this.$el.html(template(data));
        this.processNotiTopic(null, true);
        return data.name;
      },
      getTerminationPoliciesText: function(policies) {
        return _.map(policies, function(p) {
          return p;
        }).join(" > ");
      },
      createSnsNotiDropdown: function(selection) {
        var params;
        params = selection ? {
          selection: selection
        } : {};
        this.snsNotiDropdown = new snsDropdown(params);
        this.snsNotiDropdown.on('change', this.model.setNotificationTopic, this.model);
        this.addSubView(this.snsNotiDropdown);
        return this.snsNotiDropdown;
      },
      onChangeDescription: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      wheatherHasNoti: function() {
        var n, _ref;
        n = (_ref = this.model.notiObject) != null ? _ref.toJSON() : void 0;
        return n && (n.instanceLaunch || n.instanceLaunchError || n.instanceTerminate || n.instanceTerminateError || n.test);
      },
      processNotiTopic: function(originHasNoti, render) {
        var hasNoti;
        hasNoti = this.wheatherHasNoti();
        if (render && hasNoti) {
          this.$('#sns-placeholder').html(this.snsNotiDropdown.render().el);
          return this.$('.sns-group').show();
        } else if (!originHasNoti && hasNoti) {
          this.$('#sns-placeholder').html(this.snsNotiDropdown.render(true).el);
          return this.$('.sns-group').show();
        } else if (originHasNoti && !hasNoti) {
          this.createSnsNotiDropdown();
          this.model.removeTopic();
          return this.$('.sns-group').hide();
        }
      },
      processPolicyTopic: function(display, policyObject, needInit) {
        var dropdown, selection;
        selection = policyObject ? policyObject.getTopicName() : null;
        dropdown = new snsDropdown({
          selection: selection
        });
        this.addSubView(dropdown);
        if (display) {
          $('.policy-sns-placeholder').html(dropdown.render(needInit).el);
          return $('.sns-policy-field').show();
        } else {
          dropdown = new snsDropdown();
          return $('.sns-policy-field').hide();
        }
      },
      setASGCoolDown: function(event) {
        var $target;
        $target = $(event.target);
        $target.parsley('custom', function(val) {
          if (_.isNumber(+val) && +val > 86400) {
            return lang.PARSLEY.MAX_VALUE_86400;
          }
          return null;
        });
        if ($target.parsley('validate')) {
          return this.model.setASGCoolDown($target.val());
        }
      },
      setASGName: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "ASG")) {
          this.model.setName(name);
          return this.setTitle(name);
        }
      },
      setSizeGroup: function(event) {
        var $capacity, $max, $min, that;
        that = this;
        $min = this.$el.find('#property-asg-min');
        $max = this.$el.find('#property-asg-max');
        $capacity = this.$el.find('#property-asg-capacity');
        $min.parsley('custom', function(val) {
          if (+val > +$max.val()) {
            return lang.PARSLEY.MINIMUM_SIZE_MUST_BE_LESSTHAN_MAXIMUM_SIZE;
          }
          return that.constantCheck(val);
        });
        $max.parsley('custom', function(val) {
          if (+val < +$min.val()) {
            return lang.PARSLEY.MAXIMUM_SIZE_MUST_BE_MORETHAN_MINIMUM_SIZE;
          }
          return that.constantCheck(val);
        });
        $capacity.parsley('custom', function(val) {
          if (+val < +$min.val() || +val > +$max.val()) {
            return lang.PARSLEY.DESIRED_CAPACITY_IN_ALLOW_SCOPE;
          }
          return that.constantCheck(val);
        });
        if ($(event.currentTarget).parsley('validateForm')) {
          this.model.setASGMin($min.val());
          this.model.setASGMax($max.val());
          return this.model.setASGDesireCapacity($capacity.val());
        }
      },
      constantCheck: function(val) {
        val = +val;
        if (val < 1) {
          return sprintf(lang.PARSLEY.VALUE_MUST_BE_GREATERTHAN_VAR, 1);
        }
        if (val > 65534) {
          return sprintf(lang.PARSLEY.VALUE_MUST_BE_LESSTHAN_VAR, 65534);
        }
        return null;
      },
      setHealthCheckGrace: function(event) {
        var $target;
        $target = $(event.currentTarget);
        $target.parsley('custom', function(val) {
          val = +val;
          if (val < 0 || val > 86400) {
            return sprintf(lang.PARSLEY.VALUE_MUST_IN_ALLOW_SCOPE, 0, 86400);
          }
        });
        if ($target.parsley('validate')) {
          return this.model.setHealthCheckGrace($target.val());
        }
      },
      showTermPolicy: function() {
        var checked, data, p, policy, self, _i, _j, _len, _len1, _ref, _ref1;
        data = [];
        checked = {};
        _ref = this.model.get("terminationPolicies");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          policy = _ref[_i];
          if (policy === "Default") {
            data.useDefault = true;
          } else {
            data.push({
              name: policy,
              checked: true,
              text: policy
            });
            checked[policy] = true;
          }
        }
        _ref1 = ['OldestInstance', 'NewestInstance', 'OldestLaunchConfiguration', 'ClosestToNextInstanceHour'];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          if (!checked[p]) {
            data.push({
              name: p,
              checked: false,
              text: p
            });
          }
        }
        modal(term_template(data), true);
        self = this;
        $("#property-asg-term").on("click", "input", function() {
          var $checked, $this;
          $checked = $("#property-asg-term").find("input:checked");
          if ($checked.length === 0) {
            return false;
          }
          $this = $(this);
          checked = $this.is(":checked");
          return $this.closest("li").toggleClass("enabled", checked);
        });
        $("#property-asg-term-done").on("click", function() {
          self.onEditTermPolicy();
          return modal.close();
        });
        $("#property-asg-term").on("mousedown", ".drag-handle", function() {
          return $(this).trigger("mouseleave");
        });
        return $("#property-term-list").sortable({
          handle: '.drag-handle'
        });
      },
      onEditTermPolicy: function() {
        var data;
        data = [];
        $("#property-term-list .list-name").each(function() {
          var $this;
          $this = $(this);
          if ($this.closest("li").hasClass("enabled")) {
            data.push($this.data('name'));
          }
          return null;
        });
        if ($("#property-asg-term-def").is(":checked")) {
          data.push("Default");
        }
        $(".termination-policy-brief").text(this.getTerminationPoliciesText(data));
        return this.model.setTerminatePolicy(data);
      },
      delScalingPolicy: function(event) {
        var $li, uid;
        $li = $(event.currentTarget).closest("li");
        uid = $li.data("uid");
        $li.remove();
        $("#property-asg-policy-add").removeClass("tooltip disabled");
        return this.model.delPolicy(uid);
      },
      updateScalingPolicy: function(data) {
        var $li, $policies, adjusttype, metric, unit;
        metric = metricMap[data.alarmData.metricName];
        adjusttype = adjustMap[data.adjustmentType];
        unit = unitMap[data.alarmData.metricName] || "";
        if (!data.uid) {
          console.error("Cannot find scaling policy uid");
          return;
        }
        $policies = $("#property-asg-policies");
        $li = $policies.children("[data-uid='" + data.uid + "']");
        if ($li.length === 0) {
          $li = $policies.children(".hide").clone().attr("data-uid", data.uid).removeClass("hide").appendTo($policies);
          $("#property-asg-policy-add").toggleClass("tooltip disabled", $("#property-asg-policies").children().length >= 26);
        }
        $li.find(".name").html(data.name);
        $li.find(".asg-p-metric").html(metric);
        $li.find(".asg-p-eval").html(data.alarmData.comparisonOperator + " " + data.alarmData.threshold + unit);
        $li.find(".asg-p-periods").html(data.alarmData.evaluationPeriods + "x" + Math.round(data.alarmData.period / 60) + "m");
        $li.find(".asg-p-trigger").html(data.state).attr("class", "asg-p-trigger asg-p-tag asg-p-trigger-" + data.state);
        return $li.find(".asg-p-adjust").html(data.adjustment + " " + data.adjustmentType);
      },
      editScalingPolicy: function(event) {
        var $item, $selectbox, $selected, data, item, key, selectMap, uid, value, _i, _len, _ref;
        uid = $(event.currentTarget).closest("li").data("uid");
        data = this.model.getPolicy(uid);
        data.uid = uid;
        data.title = lang.PROP.ASG_ADD_POLICY_TITLE_EDIT;
        this.showScalingPolicy(data);
        selectMap = {
          metric: data.alarmData.metricName,
          "eval": data.alarmData.comparisonOperator,
          trigger: data.state,
          "adjust-type": data.adjustmentType,
          statistics: data.alarmData.statistic
        };
        for (key in selectMap) {
          value = selectMap[key];
          $selectbox = $("#asg-policy-" + key);
          $selected = null;
          _ref = $selectbox.find(".item");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            $item = $(item);
            if ($item.data("id") === value) {
              $selected = $item;
              break;
            }
          }
          if ($selected) {
            $selectbox.find(".selected").removeClass("selected");
            $selectbox.find(".selection").html($selected.addClass("selected").html());
          }
        }
        return $(".pecentcapcity").toggle($("#asg-policy-adjust-type").find(".selected").data("id") === "PercentChangeInCapacity");
      },
      addScalingPolicy: function(event) {
        if ($(event.currentTarget).hasClass("disabled")) {
          return false;
        }
        this.showScalingPolicy();
        return false;
      },
      openPolicyModal: function(data) {
        var modalPlus, options, that;
        options = {
          template: policy_template(data),
          title: lang.PROP.ASG_ADD_POLICY_TITLE_ADD + ' ' + lang.PROP.ASG_ADD_POLICY_TITLE_CONTENT,
          width: '480px',
          compact: true,
          confirm: {
            text: lang.PROP.LBL_DONE
          }
        };
        modalPlus = new modalplus(options);
        that = this;
        return modalPlus.on('confirm', function() {
          var result;
          result = $("#asg-termination-policy").parsley("validate");
          if (result === false) {
            return false;
          }
          that.onPolicyDone();
          return modalPlus.close();
        }, this);
      },
      showScalingPolicy: function(data) {
        var policyObject, self;
        if (!data) {
          data = {
            title: lang.PROP.ASG_ADD_POLICY_TITLE_ADD,
            name: this.model.defaultScalingPolicyName(),
            minAdjustStep: 1,
            alarmData: {
              evaluationPeriods: 2,
              period: 5
            }
          };
        }
        if (data.uid) {
          policyObject = Design.instance().component(data.uid);
        }
        if (data.alarmData && data.alarmData.metricName) {
          data.unit = unitMap[data.alarmData.metricName];
        } else {
          data.unit = '%';
        }
        this.openPolicyModal(data);
        self = this;
        $("#asg-policy-name").parsley('custom', function(name) {
          var uid;
          uid = $("#property-asg-policy").data("uid");
          if (self.model.isDupPolicyName(uid, name)) {
            return lang.PARSLEY.DUPLICATED_POLICY_NAME;
          }
        });
        $("#asg-policy-periods").on("change", function() {
          var val;
          val = parseInt($(this).val(), 10);
          if (!val || val < 1) {
            $(this).val("1");
          }
          if (val > 86400) {
            return $(this).val(86400);
          }
        });
        $("#asg-policy-second").on("change", function() {
          var val;
          val = parseInt($(this).val(), 10);
          if (!val || val < 1) {
            $(this).val("1");
          }
          if (val > 1440) {
            return $(this).val(1440);
          }
        });
        $("#asg-policy-adjust-type").on("OPTION_CHANGE", function() {
          var type;
          type = $(this).find(".selected").data("id");
          if (type === 'PercentChangeInCapacity') {
            $(".pecentcapcity").toggle(true);
            if ($('#asg-policy-step').val() === '') {
              $('#asg-policy-step').val(1);
            }
          } else {
            $(".pecentcapcity").toggle(false);
          }
          return $("#asg-policy-adjust").attr("placeholder", adjustdefault[type]).data("tooltip", adjustTooltip[type]).trigger("change");
        });
        $("#asg-policy-adjust").on("change", function() {
          var type, val;
          type = $("#asg-policy-adjust-type").find(".selected").data("id");
          val = parseInt($(this).val(), 10);
          if (type === "ExactCapacity") {
            if (!val || val < 1) {
              $(this).val("1");
            }
          } else if (type === "PercentChangeInCapacity") {
            if (!val) {
              $(this).val("0");
            } else if (val < -100) {
              $(this).val("-100");
            }
          }
          if (val < -65534) {
            $(this).val(-65534);
          } else if (val > 65534) {
            $(this).val(65534);
          }
          return $("#").data("tooltip", adjustTooltip[type]).trigger("change");
        });
        $("#asg-policy-cooldown").on("change", function() {
          var $this, val;
          $this = $("#asg-policy-cooldown");
          val = parseInt($this.val(), 10);
          if (isNaN(val)) {
            return;
          }
          if (val < 0) {
            val = 0;
          } else if (val > 86400) {
            val = 86400;
          }
          return $this.val(val);
        });
        $("#asg-policy-step").on("change", function() {
          var $this, val;
          $this = $("#asg-policy-step");
          val = parseInt($this.val(), 10);
          if (isNaN(val)) {
            return;
          }
          if (val < 0) {
            val = 0;
          } else if (val > 65534) {
            val = 65534;
          }
          return $this.val(val);
        });
        $("#asg-policy-threshold").on("change", function() {
          var metric, val;
          metric = $("#asg-policy-metric .selected").data("id");
          val = parseInt($(this).val(), 10);
          if (metric === "CPUUtilization") {
            if (isNaN(val) || val < 1) {
              return $(this).val("1");
            } else if (val > 100) {
              return $(this).val("100");
            }
          }
        });
        this.processPolicyTopic($('#asg-policy-notify').prop('checked'), policyObject, false);
        $("#asg-policy-notify").off("click").on("click", function(evt) {
          evt.stopPropagation();
          self.processPolicyTopic(evt.target.checked, policyObject, true);
          return null;
        });
        $("#asg-policy-metric").on("OPTION_CHANGE", function() {
          $("#asg-policy-unit").html(unitMap[$(this).find(".selected").data("id")] || "");
          return $('#asg-policy-threshold').val('');
        });
        return null;
      },
      onPolicyDone: function() {
        var data, selectedTopicData;
        data = {
          uid: $("#property-asg-policy").data("uid"),
          name: $("#asg-policy-name").val(),
          cooldown: $("#asg-policy-cooldown").val(),
          minAdjustStep: "",
          adjustment: $("#asg-policy-adjust").val(),
          adjustmentType: $("#asg-policy-adjust-type .selected").data("id"),
          state: $("#asg-policy-trigger .selected").data("id"),
          sendNotification: $("#asg-policy-notify").is(":checked"),
          alarmData: {
            metricName: $("#asg-policy-metric .selected").data("id"),
            comparisonOperator: $("#asg-policy-eval .selected").data("id"),
            period: $("#asg-policy-second").val() * 60,
            evaluationPeriods: $("#asg-policy-periods").val(),
            statistic: $("#asg-policy-statistics .selected").data("id"),
            threshold: $("#asg-policy-threshold").val()
          }
        };
        if (data.adjustmentType === 'PercentChangeInCapacity') {
          data.minAdjustStep = $("#asg-policy-step").val();
        }
        if (data.sendNotification) {
          selectedTopicData = $('.policy-sns-placeholder .selected').data();
          if (selectedTopicData && selectedTopicData.id && selectedTopicData.name) {
            data.topic = {
              appId: selectedTopicData.id,
              name: selectedTopicData.name
            };
          }
        }
        this.model.setPolicy(data);
        this.updateScalingPolicy(data);
        return null;
      },
      setNotification: function() {
        var checkMap, hasChecked, originHasNoti;
        checkMap = {};
        hasChecked = false;
        $("#property-asg-sns input[type = checkbox]").each(function() {
          var checked;
          checked = $(this).is(":checked");
          checkMap[$(this).attr("data-key")] = checked;
          if (checked) {
            hasChecked = true;
          }
          return null;
        });
        if (hasChecked) {
          $("#property-asg-sns-info").show();
        } else {
          $("#property-asg-sns-info").hide();
        }
        originHasNoti = this.wheatherHasNoti();
        this.model.setNotification(checkMap);
        return this.processNotiTopic(originHasNoti);
      },
      setHealthyCheckELBType: function(event) {
        this.model.setHealthCheckType('ELB');
        return $("#property-asg-elb-warn").toggle($("#property-asg-elb").is(":checked"));
      },
      setHealthyCheckEC2Type: function(event) {
        this.model.setHealthCheckType('EC2');
        return $("#property-asg-elb-warn").toggle($("#property-asg-elb").is(":checked"));
      }
    });
    return new InstanceView();
  });

}).call(this);

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/property/asg/app_model',['../base/model', 'constant', 'Design', "CloudResources"], function(PropertyModel, constant, Design, CloudResources) {
    var ASGModel;
    ASGModel = PropertyModel.extend({
      init: function(uid) {
        var asg_comp, asg_data, component, data, lc, n, region, _ref;
        asg_comp = component = Design.instance().component(uid);
        data = {
          uid: uid,
          name: asg_comp.get('name'),
          description: asg_comp.get('description'),
          minSize: asg_comp.get('minSize'),
          maxSize: asg_comp.get('maxSize'),
          capacity: asg_comp.get('capacity'),
          isEditable: this.isAppEdit
        };
        this.set(data);
        region = Design.instance().region();
        asg_data = (_ref = CloudResources(constant.RESTYPE.ASG, region).get(asg_comp.get('appId'))) != null ? _ref.toJSON() : void 0;
        if (asg_data) {
          this.set('hasData', true);
          this.set('awsResName', asg_data.AutoScalingGroupName);
          this.set('arn', asg_data.id);
          this.set('createTime', asg_data.CreatedTime);
          if (asg_data.TerminationPolicies && asg_data.TerminationPolicies) {
            this.set('term_policy_brief', asg_data.TerminationPolicies.join(" > "));
          }
          this.handleInstance(asg_comp, asg_data);
        }
        if (!this.isAppEdit) {
          if (!asg_data) {
            return false;
          }
          this.set('lcName', asg_data.LaunchConfigurationName);
          this.set('cooldown', asg_data.DefaultCooldown);
          this.set('healCheckType', asg_data.HealthCheckType);
          this.set('healthCheckGracePeriod', asg_data.HealthCheckGracePeriod);
          this.set('notiTopicName', this.getNotificationTopicName());
          this.handlePolicy(asg_comp, asg_data);
          this.handleNotify(asg_comp, asg_data);
        } else {
          data = component != null ? component.toJSON() : void 0;
          data.uid = uid;
          this.set(data);
          lc = asg_comp.getLc();
          if (!lc) {
            this.set("emptyAsg", true);
            return;
          }
          this.set("has_elb", !!lc.connections("ElbAmiAsso").length);
          this.set("isEC2HealthCheck", component.isEC2HealthCheckType());
          this.set('detail_monitor', !!lc.get('monitoring'));
          n = component.getNotification();
          this.set("notification", n);
          this.set("has_notification", n.instanceLaunch || n.instanceLaunchError || n.instanceTerminate || n.instanceTerminateError || n.test);
          this.notiObject = component.getNotiObject();
          this.set("policies", _.map(data.policies, function(p) {
            data = $.extend(true, {}, p.attributes);
            data.alarmData.period = Math.round(data.alarmData.period / 60);
            return data;
          }));
        }
        return null;
      },
      handleInstance: function(asg_comp, asg_data) {
        var ami, az, idx, instance, instance_count, instance_groups, instances, instances_map, _i, _len, _ref;
        instance_count = 0;
        instance_groups = [];
        instances_map = {};
        if (asg_data.Instances && asg_data.Instances) {
          instance_count = asg_data.Instances.length;
          _ref = asg_data.Instances;
          for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
            instance = _ref[idx];
            ami = {
              status: instance.HealthStatus === 'Healthy' ? 'green' : 'red',
              healthy: instance.HealthStatus,
              name: instance.InstanceId
            };
            az = instance.AvailabilityZone;
            if (instances_map[az]) {
              instances_map[az].push(ami);
            } else {
              instances_map[az] = [ami];
            }
          }
          for (az in instances_map) {
            instances = instances_map[az];
            instance_groups.push({
              name: az,
              instances: instances
            });
          }
        } else {
          instance_count = 0;
        }
        this.set('instance_groups', instance_groups);
        return this.set('instance_count', instance_count);
      },
      handleNotify: function(asg_comp, asg_data) {
        var nc_array, nc_map, notification, region, sendNotify, t, _i, _len, _ref;
        region = Design.instance().region();
        notification = CloudResources(constant.RESTYPE.NC, region).findWhere({
          AutoScalingGroupName: asg_data.AutoScalingGroupName
        });
        sendNotify = false;
        nc_array = [false, false, false, false, false];
        nc_map = {
          "autoscaling:EC2_INSTANCE_LAUNCH": 0,
          "autoscaling:EC2_INSTANCE_LAUNCH_ERROR": 1,
          "autoscaling:EC2_INSTANCE_TERMINATE": 2,
          "autoscaling:EC2_INSTANCE_TERMINATE_ERROR": 3,
          "autoscaling:TEST_NOTIFICATION": 4
        };
        if (notification) {
          _ref = notification.get("NotificationType");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            t = _ref[_i];
            nc_array[nc_map[t]] = true;
            sendNotify = true;
          }
        }
        this.set('notifies', nc_array);
        return this.set('sendNotify', sendNotify);
      },
      handlePolicy: function(asg_comp, asg_data) {
        var action, actions, actions_arr, alarm_data, cloudWatchPolicyMap, cwCln, idx, policies, policy, policy_data, region, sp, spCln, trigger_arr, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
        policies = [];
        cloudWatchPolicyMap = {};
        region = Design.instance().region();
        spCln = CloudResources(constant.RESTYPE.SP, region);
        cwCln = CloudResources(constant.RESTYPE.CW, region);
        _ref = asg_comp.get("policies");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sp = _ref[_i];
          policy_data = (_ref1 = spCln.get(sp.get('appId'))) != null ? _ref1.toJSON() : void 0;
          if (!policy_data) {
            continue;
          }
          policy = {
            adjusttype: policy_data.AdjustmentType,
            adjustment: policy_data.ScalingAdjustment,
            step: policy_data.MinAdjustmentStep,
            cooldown: policy_data.Cooldown,
            name: policy_data.PolicyName,
            arn: sp.get('appId')
          };
          alarm_data = (_ref2 = cwCln.get(sp.get("alarmData").appId)) != null ? _ref2.toJSON() : void 0;
          if (alarm_data) {
            actions_arr = [alarm_data.InsufficientDataActions, alarm_data.OKActions, alarm_data.AlarmActions];
            trigger_arr = ['INSUFFICIANT_DATA', 'OK', 'ALARM'];
            for (idx = _j = 0, _len1 = actions_arr.length; _j < _len1; idx = ++_j) {
              actions = actions_arr[idx];
              if (!actions) {
                continue;
              }
              for (_k = 0, _len2 = actions.length; _k < _len2; _k++) {
                action = actions[_k];
                if (action !== policy.arn) {
                  continue;
                }
                policy.arn = "";
                policy.evaluation = sp.get("alarmData").comparisonOperator;
                policy.metric = alarm_data.MetricName;
                policy.notify = actions.length === 2;
                policy.periods = alarm_data.EvaluationPeriods;
                policy.minute = Math.round(alarm_data.Period / 60);
                policy.statistics = alarm_data.Statistic;
                policy.threshold = alarm_data.Threshold;
                policy.trigger = trigger_arr[idx];
              }
            }
          } else {
            console.warn("handlePolicy():can not find CloudWatch info of ScalingPolicy");
          }
          policies.push(policy);
          _results.push(this.set('policies', _.sortBy(policies, "name")));
        }
        return _results;
      },
      setHealthCheckType: function(type) {
        return Design.instance().component(this.get("uid")).set("healthCheckType", type);
      },
      setASGMin: function(value) {
        var uid;
        uid = this.get('uid');
        Design.instance().component(uid).set("minSize", value);
        return null;
      },
      setASGMax: function(value) {
        var uid;
        uid = this.get('uid');
        Design.instance().component(uid).set("maxSize", value);
        return null;
      },
      setASGDesireCapacity: function(value) {
        var uid;
        uid = this.get('uid');
        Design.instance().component(uid).set("capacity", value);
        return null;
      },
      setASGCoolDown: function(value) {
        return Design.instance().component(this.get("uid")).set("cooldown", value);
      },
      setHealthCheckGrace: function(value) {
        return Design.instance().component(this.get("uid")).set("healthCheckGracePeriod", value);
      },
      setNotification: function(notification) {
        var n;
        n = Design.instance().component(this.get("uid")).setNotification(notification);
        this.notiObject = n;
        return null;
      },
      removeTopic: function() {
        var n;
        n = Design.instance().component(this.get("uid")).setNotification(notification);
        return n != null ? n.removeTopic() : void 0;
      },
      getNotificationTopicName: function() {
        return Design.instance().component(this.get("uid")).getNotificationTopicName();
      },
      setNotificationTopic: function(appId, name) {
        return Design.instance().component(this.get("uid")).setNotificationTopic(appId, name);
      },
      setTerminatePolicy: function(policies) {
        Design.instance().component(this.get("uid")).set("terminationPolicies", policies);
        this.set("terminationPolicies", policies);
        return null;
      },
      delPolicy: function(uid) {
        Design.instance().component(uid).remove();
        return null;
      },
      isDupPolicyName: function(policy_uid, name) {
        return _.some(Design.instance().component(this.get("uid")).get("policies"), function(p) {
          if (p.id !== policy_uid && p.get('name') === name) {
            return true;
          }
        });
      },
      defaultScalingPolicyName: function() {
        var component, count, currentNames, name, policies;
        component = Design.instance().component(this.get("uid"));
        if (component.type === "ExpandedAsg") {
          component = component.get("originalAsg");
        }
        policies = component.get("policies");
        count = policies.length;
        name = "" + this.attributes.name + "-policy-" + count;
        currentNames = _.map(policies, function(policy) {
          return policy.get('name');
        });
        while (__indexOf.call(currentNames, name) >= 0) {
          name = "" + this.attributes.name + "-policy-" + (++count);
        }
        return name;
      },
      getPolicy: function(uid) {
        var data;
        data = $.extend(true, {}, Design.instance().component(uid).attributes);
        data.alarmData.period = Math.round(data.alarmData.period / 60);
        return data;
      },
      setPolicy: function(policy_detail) {
        var PolicyModel, alarmData, asg, policy;
        asg = Design.instance().component(this.get("uid"));
        if (asg.type === "ExpandedAsg") {
          asg = asg.get('originalAsg');
        }
        if (policy_detail.sendNotification) {
          Design.modelClassForType(constant.RESTYPE.TOPIC).ensureExistence();
        }
        if (!policy_detail.uid) {
          PolicyModel = Design.modelClassForType(constant.RESTYPE.SP);
          policy = new PolicyModel(policy_detail);
          asg.addScalingPolicy(policy);
          policy_detail.uid = policy.id;
          this.get("policies").push(policy != null ? policy.toJSON() : void 0);
        } else {
          policy = Design.instance().component(policy_detail.uid);
          alarmData = policy_detail.alarmData;
          policy.setAlarm(alarmData);
          delete policy_detail.alarmData;
          policy.set(policy_detail);
          policy_detail.alarmData = alarmData;
        }
        if (policy_detail.sendNotification && policy_detail.topic) {
          policy.setTopic(policy_detail.topic.appId, policy_detail.topic.name);
        }
        return null;
      }
    });
    return new ASGModel();
  });

}).call(this);

define('workspaces/awseditor/property/asg/template/app',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_SUMMARY", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_NAME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.awsResName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </dl>\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ARN", {hash:{},data:data}))
    + "</dt>\n      <dd class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TIP_CLICK_TO_SELECT", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.arn)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_CREATE_TIME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.timeStr.call(depth0, (depth0 && depth0.createTime), {hash:{},data:data}))
    + "</dd>\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n  ";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n      ";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group\">\n      <label class=\"left\" for=\"property-asg-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</label>\n      <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_REQUIRED", {hash:{},data:data}))
    + "</span>\n      <input class=\"input\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-asg-name\" maxlength=\"255\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n    </section>\n    <section class=\"property-control-group\">\n      <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n      <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n    </section>\n    ";
  return buffer;
  }

function program6(depth0,data) {
  
  
  return "\n    </dl>\n    ";
  }

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LC_TITLE", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.lcName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_MIN_SIZE", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.minSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_MAX_SIZE", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.maxSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_DESIRE_CAPACITY", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.capacity)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_COOL_DOWN", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.cooldown)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n    <dl class=\"dl-vertical\">\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_HEALTH_CHECK_TYPE", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.healCheckType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_HEALTH_CHECK_CRACE_PERIOD", {hash:{},data:data}))
    + "</dt>\n      <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.healthCheckGracePeriod)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    </dl>\n    ";
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"property-control-group\">\n    <p class=\"property-info tac\">Auto Scaling Group "
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " is deleted in stopped app.</p>\n  </div>\n  ";
  return buffer;
  }

function program12(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_DETAILS", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\" data-bind=\"true\">\n    <section class=\"property-control-group clearfix\">\n      <div class=\"left property-asg-size\">\n        <label class=\"left\" for=\"property-asg-min\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_MIN_SIZE", {hash:{},data:data}))
    + "</label>\n        <input class=\"input\" type=\"text\" id=\"property-asg-min\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.minSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-type=\"digits\" data-ignore=\"true\" data-required-rollback=\"true\">\n      </div>\n      <div class=\"right property-asg-size\">\n        <label class=\"left\" for=\"property-asg-max\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_MAX_SIZE", {hash:{},data:data}))
    + "</label>\n        <input class=\"input\" type=\"text\" id=\"property-asg-max\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.maxSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-type=\"digits\" data-ignore=\"true\" data-required-rollback=\"true\">\n      </div>\n    </section>\n\n    <section class=\"property-control-group property-asg-size\">\n      <label class=\"left\" for=\"property-asg-capacity\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_DESIRE_CAPACITY", {hash:{},data:data}))
    + "</label>\n      <input class=\"input\" type=\"text\" id=\"property-asg-capacity\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.capacity)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-type=\"digits\" data-ignore=\"true\">\n    </section>\n\n    <section class=\"property-control-group\">\n      <label class=\"left\" for=\"property-asg-cooldown\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_COOL_DOWN", {hash:{},data:data}))
    + "</label>\n      <input class=\"input input-short\" type=\"text\" id=\"property-asg-cooldown\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.cooldown)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-type=\"digits\" max=\"86400\">\n      <span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_UNIT_SECONDS", {hash:{},data:data}))
    + "</span>\n    </section>\n\n    <section class=\"property-control-group clearfix\">\n      <label clas=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_HEALTH_CHECK_TYPE", {hash:{},data:data}))
    + "</label>\n      <div class=\"asg-radio-group\">\n        <div class=\"radio\">\n          <input id=\"property-asg-ec2\" type=\"radio\" value=\"ec2\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isEC2HealthCheck), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"property-asg-hc-option\" />\n          <label for=\"property-asg-ec2\"></label>\n        </div>\n        <label for=\"property-asg-ec2\">EC2</label>\n      </div>\n      <div ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.has_elb), {hash:{},inverse:self.program(17, program17, data),fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n        <div class=\"radio\">\n          <input id=\"property-asg-elb\" type=\"radio\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.has_elb), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"elb\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isEC2HealthCheck), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"property-asg-hc-option\" />\n          <label for=\"property-asg-elb\"></label>\n        </div>\n        <label for=\"property-asg-elb\">ELB</label>\n        <p id=\"property-asg-elb-warn\" class=\"hide property-info\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isEC2HealthCheck), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_ELB_WARN", {hash:{},data:data}))
    + "</p>\n      </div>\n    </section>\n\n    <section class=\"property-control-group\">\n      <label class=\"left\" for=\"property-asg-healthcheck\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_HEALTH_CHECK_CRACE_PERIOD", {hash:{},data:data}))
    + "</label>\n      <input class=\"input input-short\" type=\"text\" id=\"property-asg-healthcheck\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.healthCheckGracePeriod)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" maxlength=\"255\" data-type=\"digits\" data-ignore=\"true\">\n      <span>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_UNIT_SECONDS", {hash:{},data:data}))
    + "</span>\n    </section>\n\n  </div>\n  ";
  return buffer;
  }
function program13(depth0,data) {
  
  
  return "checked=\"true\"";
  }

function program15(depth0,data) {
  
  var buffer = "";
  buffer += "data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_HAS_ELB_WARN", {hash:{},data:data}))
    + "\" class=\"asg-radio-group tooltip\"";
  return buffer;
  }

function program17(depth0,data) {
  
  
  return "class=\"asg-radio-group\"";
  }

function program19(depth0,data) {
  
  
  return "disabled=\"disabled\"";
  }

function program21(depth0,data) {
  
  
  return " style=\"display: block\"";
  }

function program23(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_INSTANCE", {hash:{},data:data}))
    + " <span class=\"property-head-num-wrap\">("
    + escapeExpression(((stack1 = (depth0 && depth0.instance_count)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span></div>\n    <div class=\"option-group\">\n      ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.instance_groups), {hash:{},inverse:self.noop,fn:self.program(24, program24, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n  ";
  return buffer;
  }
function program24(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <div class=\"property-group-head\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n      <ul class=\"property-list\">\n        ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.instances), {hash:{},inverse:self.noop,fn:self.program(25, program25, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </ul>\n      ";
  return buffer;
  }
function program25(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n          <li><i class=\"status status-"
    + escapeExpression(((stack1 = (depth0 && depth0.status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " icon-label tooltip\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.healthy)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" ></i>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</li>\n        ";
  return buffer;
  }

function program27(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <section class=\"property-control-group pos-r\">\n        <h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TERMINATION_POLICY", {hash:{},data:data}))
    + "</h5>\n        <p class=\"termination-policy-brief\">"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.term_policy_brief), {hash:{},data:data}))
    + "</p>\n      </section>\n      <ul id=\"property-asg-policies\" class=\"property-list\">\n        ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.policies), {hash:{},inverse:self.noop,fn:self.program(28, program28, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </ul>\n    ";
  return buffer;
  }
function program28(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n          <li class=\"pos-r\" data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.uid)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n            <div class=\"property-asg-policy-name\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_NAME", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.arn), {hash:{},inverse:self.program(31, program31, data),fn:self.program(29, program29, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n          </li>\n\n        ";
  return buffer;
  }
function program29(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <div class=\"click-select tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TIP_CLICK_TO_SELECT", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.arn)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n            ";
  return buffer;
  }

function program31(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <span class=\"asg-p-metric asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ALARM_METRIC", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.metric)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n            <span class=\"asg-p-eval asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_THRESHOLD", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.evaluation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(((stack1 = (depth0 && depth0.threshold)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + escapeExpression(((stack1 = (depth0 && depth0.unit)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n            <span class=\"asg-p-periods asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_PERIOD", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.periods)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "x"
    + escapeExpression(((stack1 = (depth0 && depth0.minute)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "m</span>\n            <span class=\"asg-p-trigger asg-p-tag asg-p-trigger-"
    + escapeExpression(((stack1 = (depth0 && depth0.trigger)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ACTION", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.trigger)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n            <span class=\"asg-p-adjust asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ADJUSTMENT", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.adjustment)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(((stack1 = (depth0 && depth0.adjusttype)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n            ";
  return buffer;
  }

function program33(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <section class=\"property-control-group pos-r property-term-p\">\n        <h5>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TERMINATION_POLICY", {hash:{},data:data}))
    + "</h5>\n        <div class=\"termination-policy-brief\">"
    + escapeExpression(((stack1 = (depth0 && depth0.term_policy_brief)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        <div class=\"asg-p-action\"><i class=\"icon-edit tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TERMINATION_EDIT", {hash:{},data:data}))
    + "\" id=\"property-asg-term-edit\"></i></div>\n      </section>\n      <ul id=\"property-asg-policies\" class=\"property-list\">\n        <li class=\"pos-r hide\">\n          <h5 class=\"property-asg-policy-name name\"></h5>\n          <span class=\"asg-p-metric asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ALARM_METRIC", {hash:{},data:data}))
    + "\"></span>\n          <span class=\"asg-p-eval asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_THRESHOLD", {hash:{},data:data}))
    + "\"></span>\n          <span class=\"asg-p-periods asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_PERIOD", {hash:{},data:data}))
    + "\"></span>\n          <span class=\"asg-p-trigger asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ACTION", {hash:{},data:data}))
    + "\"></span>\n          <span class=\"asg-p-adjust asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ADJUSTMENT", {hash:{},data:data}))
    + "\"></span>\n          <div class=\"asg-p-action\">\n            <i class=\"icon-edit tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_EDIT", {hash:{},data:data}))
    + "\"></i>\n            <i class=\"icon-remove icon-del tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_REMOVE", {hash:{},data:data}))
    + "\"></i>\n          </div>\n        </li>\n        ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.policies), {hash:{},inverse:self.noop,fn:self.program(34, program34, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n      </ul>\n      <div class=\"property-control-group tac\">\n        <button class=\"btn btn-blue ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.can_add_policy), {hash:{},inverse:self.noop,fn:self.program(36, program36, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" id=\"property-asg-policy-add\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_TIP_YOU_CAN_ONLY_ADD_25_SCALING_POLICIES", {hash:{},data:data}))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_BTN_ADD_SCALING_POLICY", {hash:{},data:data}))
    + "</button>\n      </div>\n    ";
  return buffer;
  }
function program34(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <li class=\"pos-r\" data-uid=\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-old=\"true\">\n          <h5 class=\"property-asg-policy-name name\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_NAME", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h5>\n          <span class=\"asg-p-metric asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ALARM_METRIC", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.metricName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n          <span class=\"asg-p-eval asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_THRESHOLD", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.comparisonOperator)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.threshold)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + escapeExpression(((stack1 = (depth0 && depth0.unit)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n          <span class=\"asg-p-periods asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_PERIOD", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.evaluationPeriods)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "x"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.alarmData)),stack1 == null || stack1 === false ? stack1 : stack1.period)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "m</span>\n          <span class=\"asg-p-trigger asg-p-tag asg-p-trigger-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ACTION", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n          <span class=\"asg-p-adjust asg-p-tag\" title=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_ADJUSTMENT", {hash:{},data:data}))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.adjustment)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " "
    + escapeExpression(((stack1 = (depth0 && depth0.adjustmentType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n          <div class=\"asg-p-action\">\n            <i class=\"icon-edit tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_EDIT", {hash:{},data:data}))
    + "\"></i>\n            <i class=\"icon-remove icon-del tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY_TLT_REMOVE", {hash:{},data:data}))
    + "\"></i>\n          </div>\n        </li>\n        ";
  return buffer;
  }

function program36(depth0,data) {
  
  
  return "disabled tooltip";
  }

function program38(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <dl class=\"dl-vertical\">\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.sendNotify), {hash:{},inverse:self.program(50, program50, data),fn:self.program(39, program39, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SNS_TOPIC", {hash:{},data:data}))
    + "</dt>\n        <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.notiTopicName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n      </dl>\n\n    ";
  return buffer;
  }
function program39(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SEND_NOTIFICATION", {hash:{},data:data}))
    + "</dt>\n          ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notifies)),stack1 == null || stack1 === false ? stack1 : stack1[0]), {hash:{},inverse:self.noop,fn:self.program(40, program40, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notifies)),stack1 == null || stack1 === false ? stack1 : stack1[1]), {hash:{},inverse:self.noop,fn:self.program(42, program42, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notifies)),stack1 == null || stack1 === false ? stack1 : stack1[2]), {hash:{},inverse:self.noop,fn:self.program(44, program44, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notifies)),stack1 == null || stack1 === false ? stack1 : stack1[3]), {hash:{},inverse:self.noop,fn:self.program(46, program46, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notifies)),stack1 == null || stack1 === false ? stack1 : stack1[4]), {hash:{},inverse:self.noop,fn:self.program(48, program48, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }
function program40(depth0,data) {
  
  var buffer = "";
  buffer += "<dd>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SUCCESS_INSTANCES_LAUNCH", {hash:{},data:data}))
    + "</dd>";
  return buffer;
  }

function program42(depth0,data) {
  
  var buffer = "";
  buffer += "<dd>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_FAILED_INSTANCES_LAUNCH", {hash:{},data:data}))
    + "</dd>";
  return buffer;
  }

function program44(depth0,data) {
  
  var buffer = "";
  buffer += "<dd>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SUCCESS_INSTANCES_TERMINATE", {hash:{},data:data}))
    + "</dd>";
  return buffer;
  }

function program46(depth0,data) {
  
  var buffer = "";
  buffer += "<dd>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_FAILED_INSTANCES_TERMINATE", {hash:{},data:data}))
    + "</dd>";
  return buffer;
  }

function program48(depth0,data) {
  
  var buffer = "";
  buffer += "<dd>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_VALIDATE_SNS", {hash:{},data:data}))
    + "</dd>";
  return buffer;
  }

function program50(depth0,data) {
  
  var buffer = "";
  buffer += "\n        <dd class=\"property-info tac\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_MSG_NO_NOTIFICATION_WARN", {hash:{},data:data}))
    + "</dd>\n        ";
  return buffer;
  }

function program52(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <div class=\"property-control-group property-asg-notification-wrap\">\n        <p>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SEND_NOTIFICATION", {hash:{},data:data}))
    + "</p>\n        <div><div class=\"checkbox\">\n          <input id=\"property-asg-sns1\" type=\"checkbox\" data-key=\"instanceLaunch\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.instanceLaunch), {hash:{},inverse:self.noop,fn:self.program(53, program53, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n          <label for=\"property-asg-sns1\"></label>\n        </div>\n        <label for=\"property-asg-sns1\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SUCCESS_INSTANCES_LAUNCH", {hash:{},data:data}))
    + "</label></div>\n\n        <div><div class=\"checkbox\">\n          <input id=\"property-asg-sns2\" type=\"checkbox\" data-key=\"instanceLaunchError\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.instanceLaunchError), {hash:{},inverse:self.noop,fn:self.program(53, program53, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n          <label for=\"property-asg-sns2\"></label>\n        </div>\n        <label for=\"property-asg-sns2\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_FAILED_INSTANCES_LAUNCH", {hash:{},data:data}))
    + "</label></div>\n\n        <div><div class=\"checkbox\">\n          <input id=\"property-asg-sns3\" type=\"checkbox\" data-key=\"instanceTerminate\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.instanceTerminate), {hash:{},inverse:self.noop,fn:self.program(53, program53, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n          <label for=\"property-asg-sns3\"></label>\n        </div>\n        <label for=\"property-asg-sns3\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_SUCCESS_INSTANCES_TERMINATE", {hash:{},data:data}))
    + "</label></div>\n\n        <div><div class=\"checkbox\">\n          <input id=\"property-asg-sns4\" type=\"checkbox\" data-key=\"instanceTerminateError\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.instanceTerminateError), {hash:{},inverse:self.noop,fn:self.program(53, program53, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n          <label for=\"property-asg-sns4\"></label>\n        </div>\n        <label for=\"property-asg-sns4\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_FAILED_INSTANCES_TERMINATE", {hash:{},data:data}))
    + "</label></div>\n\n        <div><div class=\"checkbox\">\n          <input id=\"property-asg-sns5\" type=\"checkbox\" data-key=\"test\" ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.notification)),stack1 == null || stack1 === false ? stack1 : stack1.test), {hash:{},inverse:self.noop,fn:self.program(53, program53, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n          <label for=\"property-asg-sns5\"></label>\n        </div>\n        <label for=\"property-asg-sns5\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_VALIDATE_SNS", {hash:{},data:data}))
    + "</label></div>\n\n      </div>\n      <div class=\"property-control-group sns-group\" style=\"display:none;\">\n        <label for=\"sns-placeholder\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SELECT_SNS_TOPIC", {hash:{},data:data}))
    + "</label>\n        <div id=\"sns-placeholder\"></div>\n      </div>\n    ";
  return buffer;
  }
function program53(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

  buffer += "<article class=\"property-app\" data-bind=\"true\">\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasData), {hash:{},inverse:self.program(10, program10, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasData), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_POLICY", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.program(33, program33, data),fn:self.program(27, program27, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n\n  </div>\n\n  <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ASG_LBL_NOTIFICATION", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\" id=\"property-asg-sns\">\n\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isEditable), {hash:{},inverse:self.program(52, program52, data),fn:self.program(38, program38, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  </div>\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/asg/app_view',['../base/view', './template/app', './template/policy', './template/term', 'i18n!/nls/lang.js', 'sns_dropdown', 'UI.modalplus'], function(PropertyView, template, policy_template, term_template, lang, snsDropdown, modalplus) {
    var ASGAppEditView, adjustMap, adjustTooltip, adjustdefault, metricMap, unitMap;
    metricMap = {
      "CPUUtilization": lang.PROP.ASG_POLICY_CPU,
      "DiskReadBytes": lang.PROP.ASG_POLICY_DISC_READS,
      "DiskReadOps": lang.PROP.ASG_POLICY_DISK_READ_OPERATIONS,
      "DiskWriteBytes": lang.PROP.ASG_POLICY_DISK_WRITES,
      "DiskWriteOps": lang.PROP.ASG_POLICY_DISK_WRITE_OPERATIONS,
      "NetworkIn": lang.PROP.ASG_POLICY_NETWORK_IN,
      "NetworkOut": lang.PROP.ASG_POLICY_NETWORK_OUT,
      "StatusCheckFailed": lang.PROP.ASG_POLICY_STATUS_CHECK_FAILED_ANY,
      "StatusCheckFailed_Instance": lang.PROP.ASG_POLICY_STATUS_CHECK_FAILED_INSTANCE,
      "StatusCheckFailed_System": lang.PROP.ASG_POLICY_STATUS_CHECK_FAILED_SYSTEM
    };
    adjustMap = {
      "ChangeInCapacity": lang.PROP.ASG_ADD_POLICY_ADJUSTMENT_CHANGE,
      "ExactCapacity": lang.PROP.ASG_ADD_POLICY_ADJUSTMENT_EXACT,
      "PercentChangeInCapacity": lang.PROP.ASG_ADD_POLICY_ADJUSTMENT_PERCENT
    };
    adjustdefault = {
      "ChangeInCapacity": lang.PROP.EG_MINUS_1,
      "ExactCapacity": lang.PROP.EG_5,
      "PercentChangeInCapacity": lang.PROP.EG_MINUS_30
    };
    adjustTooltip = {
      "ChangeInCapacity": lang.PROP.ASG_ADJUST_TOOLTIP_CHANGE,
      "ExactCapacity": lang.PROP.ASG_ADJUST_TOOLTIP_EXACT,
      "PercentChangeInCapacity": lang.PROP.ASG_ADJUST_TOOLTIP_PERCENT
    };
    unitMap = {
      CPUUtilization: "%",
      DiskReadBytes: "B",
      DiskWriteBytes: "B",
      NetworkIn: "B",
      NetworkOut: "B"
    };
    ASGAppEditView = PropertyView.extend({
      events: {
        "change #property-asg-min": "setSizeGroup",
        "change #property-asg-max": "setSizeGroup",
        "change #property-asg-capacity": "setSizeGroup",
        "click #property-asg-term-edit": "showTermPolicy",
        "click #property-asg-sns input[type=checkbox]": "setNotification",
        "change #property-asg-elb": "setHealthyCheckELBType",
        "change #property-asg-ec2": "setHealthyCheckEC2Type",
        "change #property-asg-cooldown": "setASGCoolDown",
        "change #property-asg-healthcheck": "setHealthCheckGrace",
        "click #property-asg-policy-add": "addScalingPolicy",
        "click #property-asg-policies .icon-edit": "editScalingPolicy",
        "click #property-asg-policies .icon-del": "delScalingPolicy",
        'change #property-res-desc': 'onChangeDescription',
        "change #property-asg-name": "setASGName"
      },
      onChangeDescription: function(event) {
        return this.model.setDesc($(event.currentTarget).val());
      },
      setASGName: function(event) {
        var name, target;
        target = $(event.currentTarget);
        name = target.val();
        if (MC.aws.aws.checkResName(this.model.get('uid'), target, "ASG")) {
          this.model.setName(name);
          return this.setTitle(name);
        }
      },
      setASGCoolDown: function(event) {
        var $target;
        $target = $(event.target);
        $target.parsley('custom', function(val) {
          if (_.isNumber(+val) && +val > 86400) {
            return lang.PARSLEY.MAX_VALUE_86400;
          }
          return null;
        });
        if ($target.parsley('validate')) {
          return this.model.setASGCoolDown($target.val());
        }
      },
      setHealthCheckGrace: function(event) {
        return this.model.setHealthCheckGrace(event.target.value);
      },
      showTermPolicy: function() {
        var checked, data, p, policy, self, _i, _j, _len, _len1, _ref, _ref1;
        data = [];
        checked = {};
        _ref = this.model.get("terminationPolicies");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          policy = _ref[_i];
          if (policy === "Default") {
            data.useDefault = true;
          } else {
            data.push({
              name: policy,
              checked: true,
              text: policy
            });
            checked[policy] = true;
          }
        }
        _ref1 = ['OldestInstance', 'NewestInstance', 'OldestLaunchConfiguration', 'ClosestToNextInstanceHour'];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          if (!checked[p]) {
            data.push({
              name: p,
              checked: false,
              text: p
            });
          }
        }
        modal(term_template(data), true);
        self = this;
        $("#property-asg-term").on("click", "input", function() {
          var $checked, $this;
          $checked = $("#property-asg-term").find("input:checked");
          if ($checked.length === 0) {
            return false;
          }
          $this = $(this);
          checked = $this.is(":checked");
          return $this.closest("li").toggleClass("enabled", checked);
        });
        $("#property-asg-term-done").on("click", function() {
          self.onEditTermPolicy();
          return modal.close();
        });
        $("#property-asg-term").on("mousedown", ".drag-handle", function() {
          return $(this).trigger("mouseleave");
        });
        return $("#property-term-list").sortable({
          handle: '.drag-handle'
        });
      },
      onEditTermPolicy: function() {
        var data;
        data = [];
        $("#property-term-list .list-name").each(function() {
          var $this;
          $this = $(this);
          if ($this.closest("li").hasClass("enabled")) {
            data.push($this.data('name'));
          }
          return null;
        });
        if ($("#property-asg-term-def").is(":checked")) {
          data.push("Default");
        }
        $(".termination-policy-brief").text(this.getTerminationPoliciesText(data));
        return this.model.setTerminatePolicy(data);
      },
      delScalingPolicy: function(event) {
        var $li, uid;
        $li = $(event.currentTarget).closest("li");
        uid = $li.data("uid");
        $li.remove();
        $("#property-asg-policy-add").removeClass("tooltip disabled");
        return this.model.delPolicy(uid);
      },
      updateScalingPolicy: function(data) {
        var $li, $policies, adjusttype, metric, unit;
        metric = metricMap[data.alarmData.metricName];
        adjusttype = adjustMap[data.adjustmentType];
        unit = unitMap[data.alarmData.metricName] || "";
        if (!data.uid) {
          console.error("Cannot find scaling policy uid");
          return;
        }
        $policies = $("#property-asg-policies");
        $li = $policies.children("[data-uid='" + data.uid + "']");
        if ($li.length === 0) {
          $li = $policies.children(".hide").clone().attr("data-uid", data.uid).removeClass("hide").appendTo($policies);
          $("#property-asg-policy-add").toggleClass("tooltip disabled", $("#property-asg-policies").children().length >= 26);
        }
        $li.find(".name").html(data.name);
        $li.find(".asg-p-metric").html(metric);
        $li.find(".asg-p-eval").html(data.alarmData.comparisonOperator + " " + data.alarmData.threshold + unit);
        $li.find(".asg-p-periods").html(data.alarmData.evaluationPeriods + "x" + Math.round(data.alarmData.period / 60) + "m");
        $li.find(".asg-p-trigger").html(data.state).attr("class", "asg-p-trigger asg-p-tag asg-p-trigger-" + data.state);
        return $li.find(".asg-p-adjust").html(data.adjustment + " " + data.adjustmentType);
      },
      editScalingPolicy: function(event) {
        var $item, $itemLi, $selectbox, $selected, data, isOld, item, key, selectMap, uid, value, _i, _len, _ref;
        $itemLi = $(event.currentTarget).closest("li");
        uid = $itemLi.data('uid');
        isOld = $itemLi.data('old');
        data = this.model.getPolicy(uid);
        data.uid = uid;
        data.title = lang.PROP.ASG_ADD_POLICY_TITLE_EDIT;
        data.isOld = isOld;
        this.showScalingPolicy(data);
        selectMap = {
          metric: data.alarmData.metricName,
          "eval": data.alarmData.comparisonOperator,
          trigger: data.state,
          "adjust-type": data.adjustmentType,
          statistics: data.alarmData.statistic
        };
        for (key in selectMap) {
          value = selectMap[key];
          $selectbox = $("#asg-policy-" + key);
          $selected = null;
          _ref = $selectbox.find(".item");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            $item = $(item);
            if ($item.data("id") === value) {
              $selected = $item;
              break;
            }
          }
          if ($selected) {
            $selectbox.find(".selected").removeClass("selected");
            $selectbox.find(".selection").html($selected.addClass("selected").html());
          }
        }
        return $(".pecentcapcity").toggle($("#asg-policy-adjust-type").find(".selected").data("id") === "PercentChangeInCapacity");
      },
      addScalingPolicy: function(event) {
        if ($(event.currentTarget).hasClass("disabled")) {
          return false;
        }
        this.showScalingPolicy();
        return false;
      },
      openPolicyModal: function(data) {
        var modalPlus, options, that;
        options = {
          template: policy_template(data),
          title: lang.PROP.ASG_ADD_POLICY_TITLE_ADD,
          width: '480px',
          compact: true,
          confirm: {
            text: 'Done'
          }
        };
        modalPlus = new modalplus(options);
        that = this;
        return modalPlus.on('confirm', function() {
          var result;
          result = $("#asg-termination-policy").parsley("validate");
          if (result === false) {
            return false;
          }
          that.onPolicyDone();
          return modalPlus.close();
        }, this);
      },
      showScalingPolicy: function(data) {
        var policyObject, selection, self, snsPolicyDropdown;
        if (!data) {
          data = {
            title: lang.PROP.ASG_ADD_POLICY_TITLE_ADD,
            name: this.model.defaultScalingPolicyName(),
            minAdjustStep: 1,
            alarmData: {
              evaluationPeriods: 2,
              period: 5
            }
          };
        }
        if (data.uid) {
          policyObject = Design.instance().component(data.uid);
        }
        if (data.alarmData && data.alarmData.metricName) {
          data.unit = unitMap[data.alarmData.metricName];
        } else {
          data.unit = '%';
        }
        data.detail_monitor = this.model.attributes.detail_monitor;
        this.openPolicyModal(data);
        self = this;
        $("#asg-policy-name").parsley('custom', function(name) {
          var uid;
          uid = $("#property-asg-policy").data("uid");
          if (self.model.isDupPolicyName(uid, name)) {
            return lang.PARSLEY.DUPLICATED_POLICY_NAME;
          }
        });
        $("#asg-policy-periods").on("change", function() {
          var val;
          val = parseInt($(this).val(), 10);
          if (!val || val < 1) {
            $(this).val("1");
          }
          if (val > 86400) {
            return $(this).val(86400);
          }
        });
        $("#asg-policy-second").on("change", function() {
          var val;
          val = parseInt($(this).val(), 10);
          if (!val || val < 1) {
            $(this).val("1");
          }
          if (val > 1440) {
            return $(this).val(1440);
          }
        });
        $("#asg-policy-adjust-type").on("OPTION_CHANGE", function() {
          var type;
          type = $(this).find(".selected").data("id");
          if (type === 'PercentChangeInCapacity') {
            $(".pecentcapcity").toggle(true);
            if ($('#asg-policy-step').val() === '') {
              $('#asg-policy-step').val(1);
            }
          } else {
            $(".pecentcapcity").toggle(false);
          }
          return $("#asg-policy-adjust").attr("placeholder", adjustdefault[type]).data("tooltip", adjustTooltip[type]).trigger("change");
        });
        $("#asg-policy-adjust").on("change", function() {
          var type, val;
          type = $("#asg-policy-adjust-type").find(".selected").data("id");
          val = parseInt($(this).val(), 10);
          if (type === "ExactCapacity") {
            if (!val || val < 1) {
              $(this).val("1");
            }
          } else if (type === "PercentChangeInCapacity") {
            if (!val) {
              $(this).val("0");
            } else if (val < -100) {
              $(this).val("-100");
            }
          }
          if (val < -65534) {
            $(this).val(-65534);
          } else if (val > 65534) {
            $(this).val(65534);
          }
          return $("#").data("tooltip", adjustTooltip[type]).trigger("change");
        });
        $("#asg-policy-cooldown").on("change", function() {
          var $this, val;
          $this = $("#asg-policy-cooldown");
          val = parseInt($this.val(), 10);
          if (isNaN(val)) {
            return;
          }
          if (val < 0) {
            val = 0;
          } else if (val > 86400) {
            val = 86400;
          }
          return $this.val(val);
        });
        $("#asg-policy-step").on("change", function() {
          var $this, val;
          $this = $("#asg-policy-step");
          val = parseInt($this.val(), 10);
          if (isNaN(val)) {
            return;
          }
          if (val < 0) {
            val = 0;
          } else if (val > 65534) {
            val = 65534;
          }
          return $this.val(val);
        });
        $("#asg-policy-threshold").on("change", function() {
          var metric, val;
          metric = $("#asg-policy-metric .selected").data("id");
          val = parseInt($(this).val(), 10);
          if (metric === "CPUUtilization") {
            if (isNaN(val) || val < 1) {
              return $(this).val("1");
            } else if (val > 100) {
              return $(this).val("100");
            }
          }
        });
        selection = policyObject ? policyObject.getTopicName() : null;
        snsPolicyDropdown = new snsDropdown({
          selection: selection
        });
        this.processPolicyTopic($('#asg-policy-notify').prop('checked'), snsPolicyDropdown, false);
        $("#asg-policy-notify").off("click").on("click", function(evt) {
          evt.stopPropagation();
          self.processPolicyTopic(evt.target.checked, snsPolicyDropdown, true);
          return null;
        });
        $("#asg-policy-metric").on("OPTION_CHANGE", function() {
          $("#asg-policy-unit").html(unitMap[$(this).find(".selected").data("id")] || "");
          return $('#asg-policy-threshold').val('');
        });
        return null;
      },
      onPolicyDone: function() {
        var data, selectedTopicData;
        data = {
          uid: $("#property-asg-policy").data("uid"),
          name: $("#asg-policy-name").val(),
          cooldown: $("#asg-policy-cooldown").val(),
          minAdjustStep: "",
          adjustment: $("#asg-policy-adjust").val(),
          adjustmentType: $("#asg-policy-adjust-type .selected").data("id"),
          state: $("#asg-policy-trigger .selected").data("id"),
          sendNotification: $("#asg-policy-notify").is(":checked"),
          alarmData: {
            metricName: $("#asg-policy-metric .selected").data("id"),
            comparisonOperator: $("#asg-policy-eval .selected").data("id"),
            period: $("#asg-policy-second").val() * 60,
            evaluationPeriods: $("#asg-policy-periods").val(),
            statistic: $("#asg-policy-statistics .selected").data("id"),
            threshold: $("#asg-policy-threshold").val()
          }
        };
        if (data.adjustmentType === 'PercentChangeInCapacity') {
          data.minAdjustStep = $("#asg-policy-step").val();
        }
        if (data.sendNotification) {
          selectedTopicData = $('.policy-sns-placeholder .selected').data();
          if (selectedTopicData && selectedTopicData.id && selectedTopicData.name) {
            data.topic = {
              appId: selectedTopicData.id,
              name: selectedTopicData.name
            };
          }
        }
        this.model.setPolicy(data);
        this.updateScalingPolicy(data);
        return null;
      },
      setNotification: function() {
        var checkMap, hasChecked, originHasNoti;
        checkMap = {};
        hasChecked = false;
        $("#property-asg-sns input[type = checkbox]").each(function() {
          var checked;
          checked = $(this).is(":checked");
          checkMap[$(this).attr("data-key")] = checked;
          if (checked) {
            hasChecked = true;
          }
          return null;
        });
        if (hasChecked) {
          $("#property-asg-sns-info").show();
        } else {
          $("#property-asg-sns-info").hide();
        }
        originHasNoti = this.wheatherHasNoti();
        this.model.setNotification(checkMap);
        return this.processNotiTopic(originHasNoti);
      },
      setHealthyCheckELBType: function(event) {
        this.model.setHealthCheckType('ELB');
        return $("#property-asg-elb-warn").toggle($("#property-asg-elb").is(":checked"));
      },
      setHealthyCheckEC2Type: function(event) {
        this.model.setHealthCheckType('EC2');
        return $("#property-asg-elb-warn").toggle($("#property-asg-elb").is(":checked"));
      },
      render: function() {
        var data, p, selectTopicName, _i, _len, _ref;
        selectTopicName = this.model.getNotificationTopicName();
        this.snsNotiDropdown = new snsDropdown({
          selection: selectTopicName
        });
        this.snsNotiDropdown.on('change', this.model.setNotificationTopic, this.model);
        data = this.model.toJSON();
        if (data.isEditable) {
          _ref = data.policies;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            p.alarmData.metricName = metricMap[p.alarmData.metricName];
            p.unit = unitMap[p.alarmData.metricName];
            p.adjustmentType = adjustMap[p.adjustmentType];
            p.isNew = !p.appId;
          }
          data.term_policy_brief = this.getTerminationPoliciesText(data.terminationPolicies);
          data.can_add_policy = data.policies.length < 25;
        }
        console.debug(data);
        this.$el.html(template(data));
        this.processNotiTopic(null, true);
        return data.name;
      },
      getTerminationPoliciesText: function(policies) {
        return _.map(policies, function(p) {
          return p;
        }).join(" > ");
      },
      wheatherHasNoti: function() {
        var n, _ref;
        n = (_ref = this.model.notiObject) != null ? _ref.toJSON() : void 0;
        return n && (n.instanceLaunch || n.instanceLaunchError || n.instanceTerminate || n.instanceTerminateError || n.test);
      },
      processNotiTopic: function(originHasNoti, render) {
        var hasNoti;
        hasNoti = this.wheatherHasNoti();
        if (render && hasNoti) {
          this.$('#sns-placeholder').html(this.snsNotiDropdown.render().el);
          return this.$('.sns-group').show();
        } else if (!originHasNoti && hasNoti) {
          this.$('#sns-placeholder').html(this.snsNotiDropdown.render(true).el);
          return this.$('.sns-group').show();
        } else if (originHasNoti && !hasNoti) {
          this.model.removeTopic();
          return this.$('.sns-group').hide();
        }
      },
      processPolicyTopic: function(display, dropdown, needInit) {
        if (display) {
          $('.policy-sns-placeholder').html(dropdown.render(needInit).el);
          return $('.sns-policy-field').show();
        } else {
          return $('.sns-policy-field').hide();
        }
      },
      setSizeGroup: function(event) {
        var $capacity, $max, $min;
        $min = this.$el.find('#property-asg-min');
        $max = this.$el.find('#property-asg-max');
        $capacity = this.$el.find('#property-asg-capacity');
        $min.parsley('custom', function(val) {
          if (+val < 1) {
            return lang.PARSLEY.ASG_SIZE_MUST_BE_EQUAL_OR_GREATER_THAN_1;
          }
          if (+val > +$max.val()) {
            return lang.PARSLEY.MINIMUM_SIZE_MUST_BE_LESSTHAN_MAXIMUM_SIZE;
          }
        });
        $max.parsley('custom', function(val) {
          if (+val < 1) {
            return lang.PARSLEY.ASG_SIZE_MUST_BE_EQUAL_OR_GREATER_THAN_1;
          }
          if (+val < +$min.val()) {
            return lang.PARSLEY.MINIMUM_SIZE_MUST_BE_LESSTHAN_MAXIMUM_SIZE;
          }
        });
        $capacity.parsley('custom', function(val) {
          if (+val < 1) {
            return lang.PARSLEY.DESIRED_CAPACITY_EQUAL_OR_GREATER_1;
          }
          if (+val < +$min.val() || +val > +$max.val()) {
            return lang.PARSLEY.DESIRED_CAPACITY_IN_ALLOW_SCOPE;
          }
        });
        if ($(event.currentTarget).parsley('validateForm')) {
          this.model.setASGMin($min.val());
          this.model.setASGMax($max.val());
          return this.model.setASGDesireCapacity($capacity.val());
        }
      }
    });
    return new ASGAppEditView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/asg/main',['../base/main', './model', './view', 'constant', './app_model', './app_view'], function(PropertyModule, model, view, constant, app_model, app_view) {
    var AsgModule;
    AsgModule = PropertyModule.extend({
      handleTypes: [constant.RESTYPE.ASG, "ExpandedAsg"],
      initStack: function() {
        this.model = model;
        this.view = view;
        return null;
      },
      initApp: function() {
        this.model = app_model;
        this.model.isAppEdit = false;
        this.view = app_view;
        return null;
      },
      initAppEdit: function() {
        this.model = app_model;
        this.model.isAppEdit = true;
        this.view = app_view;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/dbinstance/model',['../base/model', 'constant', 'event', 'i18n!/nls/lang.js'], function(PropertyModel, constant, ide_event, lang) {
    var DBInstanceModel;
    DBInstanceModel = PropertyModel.extend({
      init: function(uid) {
        var attr, component;
        component = Design.instance().component(uid);
        attr = component != null ? component.toJSON() : void 0;
        attr.uid = uid;
        this.set(attr);
        return null;
      }
    });
    return new DBInstanceModel();
  });

}).call(this);

define('workspaces/awseditor/property/dbinstance/template/stack_instance',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isCanPromote), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isPromoted), {hash:{},inverse:self.program(6, program6, data),fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <section class=\"property-control-group property-dbinstance-promote-replica hide\">\n        <button class=\"btn btn-primary\" id=\"property-dbinstance-promote-replica\" style=\"width: 200px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_READ_REPLICA", {hash:{},data:data}))
    + "</button>\n    </section>\n    ";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <section class=\"property-control-group property-dbinstance-promote-replica hide\">\n        <button class=\"btn\" id=\"property-dbinstance-promote-replica\" style=\"width: 200px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_CANCEL_PROMOTE", {hash:{},data:data}))
    + "</button>\n    </section>\n    ";
  return buffer;
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group apply-immediately-section ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isChanged), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n        <div class=\"checkbox\">\n            <input id=\"property-dbinstance-apply-immediately\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.applyImmediately), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"None\" name=\"property-dbinstance-apply-immediately\">\n            <label for=\"property-dbinstance-apply-immediately\"></label>\n        </div>\n        <label for=\"property-dbinstance-apply-immediately\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_APPLY_IMMEDIATELY", {hash:{},data:data}))
    + "</label>\n        <a class=\"tooltip icon-info\" href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.html#Overview.DBInstance.Modifying\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_APPLY_IMMEDIATELY_LINK_TOOLTIP", {hash:{},data:data}))
    + "\" target=\"_blank\"></a>\n    </section>\n    ";
  return buffer;
  }
function program7(depth0,data) {
  
  
  return "hide";
  }

function program9(depth0,data) {
  
  
  return "checked=\"true\"";
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <div class=\"option-group-head expand\">\n        "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DETAILS", {hash:{},data:data}))
    + "\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n    <div class=\"option-group\">\n\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.snapshotId), {hash:{},inverse:self.noop,fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        <section class=\"property-control-group clearfix\">\n            <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_APP_DBINSTANCE_ID", {hash:{},data:data}))
    + "</label>\n            <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.DBInstanceIdentifier)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.DbinstanceIdentifier), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n        </section>\n\n        <section class=\"property-control-group\" >\n            <label class=\"left\" for=\"property-dbinstance-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DATABASE_NAME", {hash:{},data:data}))
    + "</label>\n            <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n            <input class=\"input\" type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-dbinstance-name\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n        </section>\n\n        <section class=\"property-control-group\" data-bind=\"true\">\n          <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n          <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n        </section>\n\n        <div id =\"lvia-container\"></div>\n\n        <section class=\"property-control-group\">\n            <div class=\"checkbox\">\n                <input id=\"property-dbinstance-version-update\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.autoMinorVersionUpgrade), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"None\" name=\"property-dbinstance-version-update\">\n                <label for=\"property-dbinstance-version-update\"></label>\n            </div>\n            <label for=\"property-dbinstance-version-update\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_AUTO_MINOR_VERSION_UPDATE", {hash:{},data:data}))
    + "</label>\n        </section>\n\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(20, program20, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        ";
  stack1 = helpers.ifLogic.call(depth0, (depth0 && depth0.isRestoreDB), "and", (depth0 && depth0.isSqlserver), {hash:{},inverse:self.program(29, program29, data),fn:self.program(27, program27, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(37, program37, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(39, program39, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    </div>\n\n    <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DATABASE_CONFIG", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(58, program58, data),fn:self.program(51, program51, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        <div class=\"property-control-group clearfix property-dbinstance-optiongroup\"></div>\n\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(65, program65, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    </div>\n\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.hideAZConfig), {hash:{},inverse:self.noop,fn:self.program(71, program71, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  return buffer;
  }
function program12(depth0,data) {
  
  
  return "<a href=\"#\" class=\"icon-rds-restore tooltip property-btn-db-restore-config action-link\" data-tooltip=\"Restore to point in time config\" ></a>";
  }

function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group clearfix\">\n            <label>Source DB Instance</label>\n            <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.sourceDbIdForRestore)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        </section>\n        ";
  return buffer;
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group clearfix\">\n            <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DBSNAPSHOT_ID", {hash:{},data:data}))
    + "</label>\n            <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.snapshotId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        </section>\n        <section class=\"property-control-group clearfix\">\n            <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DBSNAPSHOT_SIZE", {hash:{},data:data}))
    + "</label>\n            <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.snapshotSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "GiB</div>\n        </section>\n        ";
  return buffer;
  }

function program18(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PENDING_APPLY", {hash:{},data:data}));
  }

function program20(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group\">\n            <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_ALLOCATED_STORAGE", {hash:{},data:data}))
    + "</label>\n            <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n            <div class=\"ranged-number-input\">\n                <label for=\"property-dbinstance-storage\"></label>\n                <input id=\"property-dbinstance-storage\" type=\"text\" class=\"input parsley-validated property-input-left tooltip\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.allocatedStorage)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"property-dbinstance-storage\" data-ignore=\"true\" maxlength=\"4\" data-required=\"true\" data-type=\"number\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n                <label for=\"property-dbinstance-storage\" class=\"property-label-right\">GB</label>\n            </div>\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(24, program24, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </section>\n        ";
  return buffer;
  }
function program21(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isSqlserver), {hash:{},inverse:self.noop,fn:self.program(22, program22, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program22(depth0,data) {
  
  var buffer = "";
  buffer += "disabled data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SCALLING_NOT_SUPPORT", {hash:{},data:data}))
    + "\"";
  return buffer;
  }

function program24(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.originAllocatedStorage), {hash:{},inverse:self.noop,fn:self.program(25, program25, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  return buffer;
  }
function program25(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_CURRENT_ALLOCATED_STORAGE", {hash:{},data:data}))
    + escapeExpression(((stack1 = (depth0 && depth0.originAllocatedStorage)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " GB</label>\n                ";
  return buffer;
  }

function program27(depth0,data) {
  
  
  return "\n        ";
  }

function program29(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group\">\n            <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_STORAGE_TYPE", {hash:{},data:data}))
    + "</label>\n            <div class=\"selectbox\" id=\"property-dbinstance-storage-type\">\n                <div class=\"selection\"></div>\n                <ul class=\"dropdown\" tabindex=\"-1\">\n                    <li class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.storageType), "gp2", {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"gp2\">General Purpose (SSD)</li>\n                    <li class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.storageType), "io1", {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.iops), {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(32, program32, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " data-id=\"io1\">Provisioned IOPS (SSD)</li>\n                    <li class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.storageType), "standard", {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"standard\">Magnetic</li>\n                </ul>\n            </div>\n        </section>\n        <section class=\"property-control-group property-dbinstance-iops-value-section ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.iops), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n            <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PROVISIONED_IOPS", {hash:{},data:data}))
    + "</label>\n            <div class=\"ranged-number-input\">\n                <input class=\"input\" id=\"property-dbinstance-iops-value\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(34, program34, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" name=\"iops-ranged\" data-ignore=\"true\" data-required=\"true\" data-type=\"number\">\n                <label for=\"property-dbinstance-iops-value\"></label>\n            </div>\n            <label class=\"property-dbinstance-iops-info\">"
    + escapeExpression(((stack1 = (depth0 && depth0.iopsInfo)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</label>\n        </section>\n        ";
  return buffer;
  }
function program30(depth0,data) {
  
  
  return "selected";
  }

function program32(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isSqlserver), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }

function program34(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isSqlserver), {hash:{},inverse:self.noop,fn:self.program(35, program35, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program35(depth0,data) {
  
  
  return "disabled";
  }

function program37(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <div class=\"property-info property-info-iops-adjust-tip ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.originIOPS), (depth0 && depth0.iops), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.originIOPS), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_IOPS_AVAILABILITY_IMPACT", {hash:{},data:data}))
    + "</div>\n        ";
  return buffer;
  }

function program39(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(42, program42, data),fn:self.program(40, program40, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        <section class=\"property-control-group\" >\n            <label class=\"left\" for=\"property-dbinstance-master-password\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_MASTER_PASSWORD", {hash:{},data:data}))
    + "</label>\n            <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n            <input class=\"input tooltip\" data-tooltip=\"";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.password), "****", {hash:{},inverse:self.program(46, program46, data),fn:self.program(44, program44, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" type=\"password\" placeholder=\"****\" id=\"property-dbinstance-master-password\" value=\"";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.password), "****", {hash:{},inverse:self.program(49, program49, data),fn:self.program(44, program44, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-type=\"ascii\" data-ignore=\"true\" data-required=\"true\"/>\n        </section>\n        ";
  return buffer;
  }
function program40(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group clearfix\">\n            <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_USERNAME", {hash:{},data:data}))
    + "</label>\n            <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.MasterUsername)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        </section>\n        ";
  return buffer;
  }

function program42(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group\" >\n            <label class=\"left\" for=\"property-dbinstance-master-username\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_MASTER_USERNAME", {hash:{},data:data}))
    + "</label>\n            <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n            <input class=\"input\"  type=\"text\" id=\"property-dbinstance-master-username\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-ignore-regexp=\"^[a-zA-Z]+[0-9a-zA-Z_]*$\" data-required-rollback=\"true\"/>\n        </section>\n        ";
  return buffer;
  }

function program44(depth0,data) {
  
  var buffer = "";
  return buffer;
  }

function program46(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.password), {hash:{},inverse:self.noop,fn:self.program(47, program47, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program47(depth0,data) {
  
  
  return "Default Password: 12345678";
  }

function program49(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = (depth0 && depth0.password)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program51(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group clearfix\">\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.dbName), {hash:{},inverse:self.noop,fn:self.program(52, program52, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PORT", {hash:{},data:data}))
    + "</label>\n            <div>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.Endpoint), {hash:{},inverse:self.program(56, program56, data),fn:self.program(54, program54, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n        </section>\n        ";
  return buffer;
  }
function program52(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DATABASE_NAME", {hash:{},data:data}))
    + "</label>\n            <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.dbName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>";
  return buffer;
  }

function program54(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.Endpoint)),stack1 == null || stack1 === false ? stack1 : stack1.Port)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program56(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_NOT_READY", {hash:{},data:data}));
  }

function program58(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(59, program59, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        <section class=\"property-control-group\" >\n            <label class=\"left\" for=\"property-dbinstance-database-port\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DATABASE_PORT", {hash:{},data:data}))
    + "</label>\n            <input class=\"input\"  type=\"text\" id=\"property-dbinstance-database-port\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.port)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-ignore=\"true\" data-type=\"number\" data-required=\"true\" data-min=\"1150\" data-max=\"65535\"/>\n        </section>\n        ";
  return buffer;
  }
function program59(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isSqlserver), {hash:{},inverse:self.noop,fn:self.program(60, program60, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }
function program60(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.snapshotId), {hash:{},inverse:self.program(63, program63, data),fn:self.program(61, program61, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }
function program61(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group\" >\n            <label class=\"left\" for=\"property-dbinstance-database-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DATABASE_NAME", {hash:{},data:data}))
    + "</label>\n            <input class=\"input\"  type=\"text\" id=\"property-dbinstance-database-name\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.dbName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-ignore=\"true\" data-required=\"true\" data-ignore-regexp=\"^[a-zA-Z]+[0-9a-zA-Z_]*$\"/>\n        </section>\n        ";
  return buffer;
  }

function program63(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isMysql), {hash:{},inverse:self.noop,fn:self.program(61, program61, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }

function program65(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.snapshotId), {hash:{},inverse:self.noop,fn:self.program(66, program66, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isOracle), {hash:{},inverse:self.noop,fn:self.program(68, program68, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }
function program66(depth0,data) {
  
  var buffer = "";
  buffer += "\n        <section class=\"property-control-group\">\n            <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PG", {hash:{},data:data}))
    + "</label>\n            <div id=\"property-dbinstance-parameter-group-select\">\n            </div>\n        </section>\n        ";
  return buffer;
  }

function program68(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group\">\n            <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_CHARACTER_SET_NAME", {hash:{},data:data}))
    + "</label>\n            <div class=\"selectbox combo-dd\" id=\"property-dbinstance-charset-select\">\n                <div class=\"selection\"></div>\n                <div class=\"dropdown\">\n                    <div class=\"scroll-wrap scrollbar-auto-hide clearfix\">\n                        <div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n                        <div class=\"scroll-content\">\n                            <ul>\n                                ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.oracleCharset), {hash:{},inverse:self.noop,fn:self.program(69, program69, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        ";
  return buffer;
  }
function program69(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                                <li class=\"item ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.charset)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.charset)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</li>\n                                ";
  return buffer;
  }

function program71(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n    <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_NETWORK_AZ_DEPLOYMENT", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(72, program72, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        <div id=\"property-dbinstance-mutil-az\"></div>\n\n    </div>\n\n    ";
  return buffer;
  }
function program72(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group\">\n            <div class=\"checkbox\">\n                <input id=\"property-dbinstance-public-access-check\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.accessible), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"None\" name=\"property-dbinstance-public-access-check\">\n                <label for=\"property-dbinstance-public-access-check\"></label>\n            </div>\n            <label for=\"property-dbinstance-public-access-check\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PUBLICLY_ACCESSIBLE", {hash:{},data:data}))
    + "</label>\n        </section>\n        ";
  return buffer;
  }

function program74(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <div class=\"option-group-head ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isPromoted), {hash:{},inverse:self.noop,fn:self.program(75, program75, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_BACKUP_OPTION", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n\n        <section class=\"property-control-group tooltip\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasSlave), {hash:{},inverse:self.program(79, program79, data),fn:self.program(77, program77, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n\n            <div class=\"checkbox\">\n                <input id=\"property-dbinstance-auto-backup-check\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.backupRetentionPeriod), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"None\" name=\"property-dbinstance-auto-backup-check\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasSlave), {hash:{},inverse:self.noop,fn:self.program(82, program82, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.disableBackupForOldMySQL), {hash:{},inverse:self.noop,fn:self.program(35, program35, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n                <label for=\"property-dbinstance-auto-backup-check\"></label>\n            </div>\n            <label for=\"property-dbinstance-auto-backup-check\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_ENABLE_AUTOMATIC_BACKUP", {hash:{},data:data}))
    + "</label>\n        </section>\n\n        <div id=\"property-dbinstance-auto-backup-group\" class=\"";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.backupRetentionPeriod), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n\n            <section id=\"group-dbinstance-backup-period\" class=\"property-control-group ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.backupRetentionPeriod), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" >\n                <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_BACKUP_RETENTION_PERIOD", {hash:{},data:data}))
    + "</label>\n                <input class=\"input shorter-input\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.backupRetentionPeriod)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-dbinstance-backup-period\" type=\"text\" data-type=\"digits\" data-min=\"1\" data-max=\"35\" data-ignore=\"true\">\n                <label class=\"property-label-right\" for=\"property-dbinstance-backup-period\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_BACK_RETANTION_PERIOD_DAY", {hash:{},data:data}))
    + "</label>\n            </section>\n\n            <section id=\"property-dbinstance-backup-window-select\" class=\"property-control-group\">\n                <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_BACKUP_WINDOW", {hash:{},data:data}))
    + "</label>\n                <div class=\"property-dbinstance-radio-group\">\n                    <div class=\"radio\">\n                        <input id=\"property-dbinstance-backup-radio-no\" name=\"property-dbinstance-backup-radio\" type=\"radio\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.backupWindow), {hash:{},inverse:self.noop,fn:self.program(84, program84, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"no\">\n                        <label for=\"property-dbinstance-backup-radio-no\"></label>\n                    </div>\n                    <label for=\"property-dbinstance-backup-radio-no\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_NO_PREFERENCE", {hash:{},data:data}))
    + "</label>\n                </div>\n                <div class=\"property-dbinstance-radio-group\">\n                    <div class=\"radio\">\n                        <input id=\"property-dbinstance-backup-radio-window\" name=\"property-dbinstance-backup-radio\" type=\"radio\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.backupWindow), {hash:{},inverse:self.noop,fn:self.program(84, program84, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"window\">\n                        <label for=\"property-dbinstance-backup-radio-window\"></label>\n                    </div>\n                    <label for=\"property-dbinstance-backup-radio-window\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SELECT_WINDOW", {hash:{},data:data}))
    + "</label>\n                </div>\n            </section>\n\n            <section id=\"property-dbinstance-backup-window-group\" class=\"";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.backupWindow), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " property-control-group\">\n                <section class=\"property-control-group\">\n                    <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_START_TIME", {hash:{},data:data}))
    + "</label>\n                    <input class=\"input shorter-input\" type=\"text\" id=\"property-dbinstance-backup-window-start-time\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.backup)),stack1 == null || stack1 === false ? stack1 : stack1.startTime)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-ignore=\"true\" data-ignore-regexp=\"^[0-9:]*$\"/>\n                    <label>UTC</label>\n                </section>\n                <section class=\"property-control-group\">\n                    <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DURATION", {hash:{},data:data}))
    + "</label>\n                    <div class=\"selectbox shorter-dropdown\" id=\"property-dbinstance-backup-window-duration\">\n                        <div class=\"selection\"></div>\n                        <ul class=\"dropdown\">\n                            ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.backupDurations), {hash:{},inverse:self.noop,fn:self.program(86, program86, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                        </ul>\n                    </div>\n                    <label for=\"property-dbinstance-maintenance-window-duration\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_BACKUP_DURATION_HOUR", {hash:{},data:data}))
    + "</label>\n                </section>\n            </section>\n\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.originBackupWindow), {hash:{},inverse:self.noop,fn:self.program(88, program88, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n\n\n        </div>\n    </div>\n\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isPromoted), {hash:{},inverse:self.noop,fn:self.program(90, program90, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(95, program95, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  return buffer;
  }
function program75(depth0,data) {
  
  
  return "expand";
  }

function program77(depth0,data) {
  
  var buffer = "";
  buffer += "data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_REPLICA_MUST_ENABLE_AUTOMATIC_BACKUPS", {hash:{},data:data}))
    + "\"";
  return buffer;
  }

function program79(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.disableBackupForOldMySQL), {hash:{},inverse:self.noop,fn:self.program(80, program80, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program80(depth0,data) {
  
  
  return "data-tooltip=\"DB Backups not supported on a read replica running a mysql version before 5.6\"";
  }

function program82(depth0,data) {
  
  
  return "disabled checked";
  }

function program84(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

function program86(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                            <li class=\"item ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.value)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.value)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</li>\n                            ";
  return buffer;
  }

function program88(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <section class=\"property-control-group\">\n                <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_CURRENT_BACKUP_WINDOW", {hash:{},data:data}))
    + escapeExpression(((stack1 = (depth0 && depth0.originBackupWindow)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</label>\n            </section>\n            ";
  return buffer;
  }

function program90(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_MAINTENANCE_OPTION", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n\n        <section id=\"property-dbinstance-maintenance-window-select\" class=\"property-control-group\">\n            <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_MAINTENANCE_WINDOW", {hash:{},data:data}))
    + "</label>\n            <div class=\"property-dbinstance-radio-group\">\n                <div class=\"radio\">\n                    <input id=\"property-dbinstance-maintenance-radio-no\" name=\"property-dbinstance-maintenance-radio\" type=\"radio\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.maintenanceWindow), {hash:{},inverse:self.noop,fn:self.program(84, program84, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"no\">\n                    <label for=\"property-dbinstance-maintenance-radio-no\"></label>\n                </div>\n                <label for=\"property-dbinstance-maintenance-radio-no\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_NO_PREFERENCE", {hash:{},data:data}))
    + "</label>\n            </div>\n            <div class=\"property-dbinstance-radio-group\">\n                <div class=\"radio\">\n                    <input id=\"property-dbinstance-maintenance-radio-window\" name=\"property-dbinstance-maintenance-radio\" type=\"radio\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.maintenanceWindow), {hash:{},inverse:self.noop,fn:self.program(84, program84, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"window\">\n                    <label for=\"property-dbinstance-maintenance-radio-window\"></label>\n                </div>\n                <label for=\"property-dbinstance-maintenance-radio-window\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SELECT_WINDOW", {hash:{},data:data}))
    + "</label>\n            </div>\n        </section>\n\n        <section id=\"property-dbinstance-maintenance-window-group\" class=\"property-control-group ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.maintenanceWindow), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n            <section class=\"property-control-group\" >\n                <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_MAINTENANCE_START_DAY", {hash:{},data:data}))
    + "</label>\n                <div class=\"selectbox shorter-dropdown\" id=\"property-dbinstance-maintenance-window-start-day-select\">\n                    <div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.WEEKDAY_MONDAY", {hash:{},data:data}))
    + "</div>\n                    <ul class=\"dropdown\" tabindex=\"-1\">\n                        <li class=\"item\" data-id=\"mon\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.WEEKDAY_MONDAY", {hash:{},data:data}))
    + "</li>\n                        <li class=\"item\" data-id=\"tue\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.WEEKDAY_TUESDAY", {hash:{},data:data}))
    + "</li>\n                        <li class=\"item\" data-id=\"wed\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.WEEKDAY_WEDNESDAY", {hash:{},data:data}))
    + "</li>\n                        <li class=\"item\" data-id=\"thu\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.WEEKDAY_THURSDAY", {hash:{},data:data}))
    + "</li>\n                        <li class=\"item\" data-id=\"fri\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.WEEKDAY_FRIDAY", {hash:{},data:data}))
    + "</li>\n                        <li class=\"item\" data-id=\"sat\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.WEEKDAY_SATURDAY", {hash:{},data:data}))
    + "</li>\n                        <li class=\"item\" data-id=\"sun\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.WEEKDAY_SUNDAY", {hash:{},data:data}))
    + "</li>\n                    </ul>\n                </div>\n            </section>\n            <section class=\"property-control-group\" >\n                <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_START_TIME", {hash:{},data:data}))
    + "</label>\n                <input class=\"input shorter-input\" type=\"text\" id=\"property-dbinstance-maintenance-window-start-time\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.maintenance)),stack1 == null || stack1 === false ? stack1 : stack1.startTime)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-required-rollback=\"true\" data-ignore=\"true\" data-ignore-regexp=\"^[0-9:]*$\"/>\n                <label>UTC</label>\n            </section>\n            <section class=\"property-control-group\" >\n                <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DURATION", {hash:{},data:data}))
    + "</label>\n                <div class=\"selectbox shorter-dropdown\" id=\"property-dbinstance-maintenance-window-duration\">\n                    <div class=\"selection\"></div>\n                    <ul class=\"dropdown\" tabindex=\"-1\">\n                        ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.maintenanceDurations), {hash:{},inverse:self.noop,fn:self.program(91, program91, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                    </ul>\n                </div>\n                <label for=\"property-dbinstance-maintenance-window-duration\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_BACKUP_DURATION_HOUR", {hash:{},data:data}))
    + "</label>\n            </section>\n\n        </section>\n\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.originMaintenanceWindow), {hash:{},inverse:self.noop,fn:self.program(93, program93, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n    ";
  return buffer;
  }
function program91(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                        <li class=\"item ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.value)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.value)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</li>\n                        ";
  return buffer;
  }

function program93(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group\">\n            <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_CURRENT_BACKUP_WINDOW", {hash:{},data:data}))
    + " <br/>"
    + escapeExpression(((stack1 = (depth0 && depth0.originMaintenanceWindow)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</label>\n        </section>\n        ";
  return buffer;
  }

function program95(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.snapshotId), {hash:{},inverse:self.program(97, program97, data),fn:self.program(96, program96, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;
  }
function program96(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(99, program99, data),fn:self.program(97, program97, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  return buffer;
  }
function program97(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <div class=\"option-group-head\" id=\"sg-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_SG_DETAIL", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n    <div class=\"option-group sg-group\"></div>\n    ";
  return buffer;
  }

function program99(depth0,data) {
  
  
  return "\n    ";
  }

  buffer += "<article class=\"property-dbinstance\" data-bind=\"true\">\n\n    <div class=\"property-dbinstance-not-available-info hide\">\n        "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_NOT_AVAILABLE", {hash:{},data:data}))
    + "\n    </div>\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isPromoted), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(74, program74, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/dbinstance/template/stack_replica',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <dl class=\"dl-vertical\">\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_MASTER_DB_INSTANCE", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.sourceDbName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        </dl>\n        ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <li class=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "tooltip item\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.instanceClass)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n                        <div class=\"main truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.instanceClass)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n                        <div class=\"sub\"><span>"
    + escapeExpression(((stack1 = (depth0 && depth0.ecu)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span> <span>"
    + escapeExpression(((stack1 = (depth0 && depth0.cpu)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span> <span>"
    + escapeExpression(((stack1 = (depth0 && depth0.memory)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n                    </li>\n                    ";
  return buffer;
  }
function program4(depth0,data) {
  
  
  return "selected ";
  }

function program6(depth0,data) {
  
  
  return "checked=\"true\"";
  }

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group\">\n            <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_STORAGE_TYPE", {hash:{},data:data}))
    + "</label>\n            <div class=\"selectbox\" id=\"property-dbinstance-storage-type\">\n                <div class=\"selection\"></div>\n                <ul class=\"dropdown\" tabindex=\"-1\">\n                    <li class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.storageType), "gp2", {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"gp2\">General Purpose (SSD)</li>\n                    <li class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.storageType), "io1", {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.iops), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " data-id=\"io1\">Provisioned IOPS (SSD)</li>\n                    <li class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.storageType), "standard", {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"standard\">Magnetic</li>\n                </ul>\n            </div>\n        </section>\n        ";
  return buffer;
  }
function program9(depth0,data) {
  
  
  return "selected";
  }

function program11(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isSqlserver), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program12(depth0,data) {
  
  
  return "hide";
  }

function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n        <div class=\"property-control-group clearfix\">\n            ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.multiAz), {hash:{},inverse:self.program(18, program18, data),fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </div>\n\n    ";
  return buffer;
  }
function program15(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.AvailabilityZone), {hash:{},inverse:self.noop,fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  return buffer;
  }
function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PREFERRED_ZONE", {hash:{},data:data}))
    + "</label>\n                    <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.AvailabilityZone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n                ";
  return buffer;
  }

function program18(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.SecondaryAvailabilityZone), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  return buffer;
  }
function program19(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SECONDARY_ZONE", {hash:{},data:data}))
    + "</label>\n                <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.SecondaryAvailabilityZone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n                ";
  return buffer;
  }

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.azNotEnough), {hash:{},inverse:self.program(24, program24, data),fn:self.program(22, program22, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    ";
  return buffer;
  }
function program22(depth0,data) {
  
  var buffer = "";
  buffer += "\n        <section class=\"property-control-group\">\n            <div class=\"property-info\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SUBNETGROUP_NOT_SETUP", (depth0 && depth0.subnetGroupName), (depth0 && depth0.subnetGroupName), {hash:{},data:data}))
    + "</div>\n        </section>\n        ";
  return buffer;
  }

function program24(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <section class=\"property-control-group property-dbinstance-preferred-az ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.multiAz), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n            <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PREFERRED_ZONE", {hash:{},data:data}))
    + "</label>\n            <div class=\"selectbox\" id=\"property-dbinstance-preferred-az\"></div>\n        </section>\n        ";
  return buffer;
  }

  buffer += "<article class=\"property-dbinstance\">\n    <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DETAILS", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.sourceDbName), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        <section class=\"property-control-group\" data-bind=\"true\">\n            <label class=\"left\" for=\"property-dbinstance-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DATABASE_NAME", {hash:{},data:data}))
    + "</label>\n            <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n            <input class=\"input\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-dbinstance-name\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n        </section>\n\n        <section class=\"property-control-group\" data-bind=\"true\">\n          <label class=\"left\" for=\"property-res-desc\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</label>\n          <textarea id=\"property-res-desc\" data-type=\"ascii\" data-ignore=\"true\" class=\"input\">"
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</textarea>\n        </section>\n\n        <section class=\"property-control-group\">\n            <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_CLASS", {hash:{},data:data}))
    + "</label>\n            <div class=\"selectbox selectbox-mega\" id=\"property-dbinstance-class-select\">\n                <div class=\"selection\"></div>\n                <ul class=\"dropdown\">\n                    ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.classes), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                </ul>\n            </div>\n        </section>\n\n        <section class=\"property-control-group\">\n            <div class=\"checkbox\">\n                <input id=\"property-dbinstance-version-update\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.autoMinorVersionUpgrade), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"None\" name=\"property-dbinstance-version-update\">\n                <label for=\"property-dbinstance-version-update\"></label>\n            </div>\n            <label for=\"property-dbinstance-version-update\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_AUTO_MINOR_VERSION_UPDATE", {hash:{},data:data}))
    + "</label>\n        </section>\n\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.masterIops), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        <section class=\"property-control-group\" data-bind=\"true\">\n            <label class=\"left\" for=\"property-dbinstance-database-port\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DATABASE_PORT", {hash:{},data:data}))
    + "</label>\n            <input class=\"input\"  type=\"text\" id=\"property-dbinstance-database-port\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.port)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-ignore=\"true\" data-type=\"number\" data-required=\"true\"/>\n        </section>\n\n        <section class=\"property-control-group\">\n            <div class=\"checkbox\">\n                <input id=\"property-dbinstance-public-access-check\" type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.accessible), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " value=\"None\" name=\"property-dbinstance-public-access-check\">\n                <label for=\"property-dbinstance-public-access-check\"></label>\n            </div>\n            <label for=\"property-dbinstance-public-access-check\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PUBLIC_ACCESS", {hash:{},data:data}))
    + "</label>\n        </section>\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(21, program21, data),fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n    </div>\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
define('workspaces/awseditor/property/dbinstance/template/stack_component',['handlebars'], function(Handlebars){ var __TEMPLATE__, TEMPLATE={};

__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, self=this, functionType="function", escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n";
  stack1 = helpers.ifLogic.call(depth0, ((stack1 = (depth0 && depth0.engines)),stack1 == null || stack1 === false ? stack1 : stack1.length), ">", 1, {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<section class=\"property-control-group\">\n    <label class=\"left\">DB Engine</label>\n    <div class=\"selectbox\" id=\"property-dbinstance-engine-select\">\n        <div class=\"selection\">"
    + escapeExpression(((stack1 = (depth0 && depth0.engine)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        <ul class=\"dropdown\" tabindex=\"-1\">\n            ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.engines), {hash:{},inverse:self.noop,fn:self.programWithDepth(3, program3, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </ul>\n    </div>\n</section>\n";
  return buffer;
  }
function program3(depth0,data,depth1) {
  
  var buffer = "", stack1;
  buffer += "\n            <li class=\"item ";
  stack1 = helpers.ifCond.call(depth0, (depth1 && depth1.engine), depth0, {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</li>\n            ";
  return buffer;
  }
function program4(depth0,data) {
  
  
  return "selected";
  }

function program6(depth0,data) {
  
  
  return "\n";
  }

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<section class=\"property-control-group\">\n    <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_LICENSE_MODEL", {hash:{},data:data}))
    + "</label>\n    <div class=\"selectbox\" id=\"property-dbinstance-license-select\">\n        <div class=\"selection\">"
    + escapeExpression(((stack1 = (depth0 && depth0.license)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        <ul class=\"dropdown\" tabindex=\"-1\">\n            ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.licenses), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </ul>\n    </div>\n</section>\n";
  return buffer;
  }
function program9(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <li class=\"item ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.license)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.license)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</li>\n            ";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(16, program16, data),fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program12(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.snapshotId), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program13(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group\">\n        <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DB_ENGINE_VERSION", {hash:{},data:data}))
    + "</label>\n        <div class=\"selectbox combo-dd\" id=\"property-dbinstance-engine-version-select\">\n            <div class=\"property-engine-label left\" >"
    + escapeExpression(((stack1 = (depth0 && depth0.engine)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n            <div class=\"property-engineversion-label selection\">"
    + escapeExpression(((stack1 = (depth0 && depth0.engineVersion)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n            <div class=\"property-engineversion-dropdown dropdown\">\n                <div class=\"scroll-wrap scrollbar-auto-hide clearfix\">\n                    <div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n                    <div class=\"scroll-content\">\n                        <ul>\n                            ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.versions), {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n    ";
  return buffer;
  }
function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                            <li class=\"item ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.version)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.version)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</li>\n                            ";
  return buffer;
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group clearfix\">\n        <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DB_ENGINE_VERSION", {hash:{},data:data}))
    + "</label>\n        <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.engine)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "("
    + escapeExpression(((stack1 = (depth0 && depth0.engineVersion)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</div>\n    </section>\n";
  return buffer;
  }

function program18(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                            <li class=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "tooltip item\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.instanceClass)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n                                <div class=\"main truncate\">"
    + escapeExpression(((stack1 = (depth0 && depth0.instanceClass)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n                                <div class=\"sub\"><span>"
    + escapeExpression(((stack1 = (depth0 && depth0.ecu)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " ECU</span><span>"
    + escapeExpression(((stack1 = (depth0 && depth0.cpu)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span> <span>"
    + escapeExpression(((stack1 = (depth0 && depth0.memory)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n                                </div>\n                            </li>\n                        ";
  return buffer;
  }
function program19(depth0,data) {
  
  
  return "selected ";
  }

  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isRestoreDB), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n<section class=\"property-control-group\">\n    <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DB_INSTANCE_CLASS", {hash:{},data:data}))
    + "</label>\n\n    <div class=\"selectbox selectbox-mega combo-dd\" id=\"property-dbinstance-class-select\">\n        <div class=\"selection\">\n            <div class=\"main truncate\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.classInfo)),stack1 == null || stack1 === false ? stack1 : stack1.instanceClass)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n            <div class=\"sub\"><span>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.classInfo)),stack1 == null || stack1 === false ? stack1 : stack1.ecu)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " ECU</span><span>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.classInfo)),stack1 == null || stack1 === false ? stack1 : stack1.cpu)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n                <span>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.classInfo)),stack1 == null || stack1 === false ? stack1 : stack1.memory)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n        </div>\n        <div class=\"dropdown\">\n            <div class=\"scroll-wrap scrollbar-auto-hide clearfix\">\n                <div class=\"scrollbar-veritical-wrap\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n                <div class=\"scroll-content\">\n                    <ul>\n                        ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.classes), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>";
  return buffer;
  };
TEMPLATE.lvi=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <li class=\"item\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</li>\n    ";
  return buffer;
  }

  buffer += "<div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SELECT_WINDOW", {hash:{},data:data}))
    + "</div>\n<ul class=\"dropdown\" tabindex=\"-1\">\n    <li class=\"item\" data-id=\"no\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_NO_PREFERENCE", {hash:{},data:data}))
    + "</li>\n    ";
  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>";
  return buffer;
  };
TEMPLATE.preferred_az=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <button class=\"icon-new-stack btn btn-blue t-m-btn\" data-btn=\"create\">"
    + escapeExpression(((stack1 = (depth0 && depth0.btnValueCreate)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</button>\n            ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <button class=\"icon-"
    + escapeExpression(((stack1 = (depth0 && depth0.icon)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " t-m-btn\" data-btn=\""
    + escapeExpression(((stack1 = (depth0 && depth0.type)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.disabled), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</button>\n                ";
  return buffer;
  }
function program4(depth0,data) {
  
  
  return "disabled";
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                            <th class=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.sortable), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-row-type=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.rowType), {hash:{},inverse:self.program(11, program11, data),fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" style=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.width), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</th>\n                            ";
  return buffer;
  }
function program7(depth0,data) {
  
  
  return "sortable";
  }

function program9(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = (depth0 && depth0.rowType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program11(depth0,data) {
  
  
  return "string";
  }

function program13(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "width:"
    + escapeExpression(((stack1 = (depth0 && depth0.width)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";";
  return buffer;
  }

function program15(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                                    <th style=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.width), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"><div class=\"th-inner\"></div></th>\n                                    ";
  return buffer;
  }

  buffer += "<div class=\"modal-toolbar "
    + escapeExpression(((stack1 = (depth0 && depth0.classList)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n    <div class=\"content-wrap\">\n        <div class=\"toolbar\">\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.btnValueCreate), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            <div class=\"btn-group\">\n                ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.buttons), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            </div>\n        </div>\n        <div class=\"list\">\n            <div class=\"slidebox\" style=\""
    + escapeExpression(((stack1 = (depth0 && depth0.slideStyle)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n                <div class=\"content clearfix\">\n                </div>\n                <div class=\"error\">\n                    "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SOMETHING_ERROR", {hash:{},data:data}))
    + "\n                </div>\n            </div>\n            <div class=\"table-head-fix\">\n                <table class=\"table-head\">\n                    <thead>\n                        <tr>\n                            <th>\n                                <div class=\"checkbox\">\n                                    <input id=\"t-m-select-all\" type=\"checkbox\" value=\"None\">\n                                    <label for=\"t-m-select-all\"></label>\n                                </div>\n                            </th>\n                            ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.columns), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                        </tr>\n                    </thead>\n                </table>\n                <div class=\"scroll-wrap\">\n                    <div class=\"scrollbar-veritical-wrap\" style=\"display: block;\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n                    <div class=\"scroll-content\" style=\"display:block;\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th><div class=\"th-inner\"></div></th>\n                                    ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.columns), {hash:{},inverse:self.noop,fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                                </tr>\n                            </thead>\n                            <tbody class='t-m-content'>\n\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>";
  return buffer;
  };
TEMPLATE.optionGroupModal=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n<label for=\"property-dbinstance-optiongroup-placeholder\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_OPTION_GROUP", {hash:{},data:data}))
    + "</label>\n<div class=\"property-dbinstance-optiongroup-placeholder\"></div>\n";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_OPTION_GROUP", {hash:{},data:data}))
    + "</label>\n<div>"
    + escapeExpression(((stack1 = (depth0 && depth0.ogName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, (depth0 && depth0.canCustomOG), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  };
TEMPLATE.optionGroupDropDown=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  
  return "disabled=\"disabled\"";
  }

function program3(depth0,data) {
  
  
  return "checked=\"true\"";
  }

function program5(depth0,data) {
  
  var buffer = "";
  buffer += "data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SQLSERVER_MIRROR_TIP", {hash:{},data:data}))
    + "\"";
  return buffer;
  }

function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n    <div class=\"property-control-group clearfix\">\n        ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.multiAz), {hash:{},inverse:self.program(11, program11, data),fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n\n";
  return buffer;
  }
function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.AvailabilityZone), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }
function program9(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PREFERRED_ZONE", {hash:{},data:data}))
    + "</label>\n                <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.AvailabilityZone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n            ";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.SecondaryAvailabilityZone), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }
function program12(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <label>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SECONDARY_ZONE", {hash:{},data:data}))
    + "</label>\n            <div>"
    + escapeExpression(((stack1 = (depth0 && depth0.SecondaryAvailabilityZone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n            ";
  return buffer;
  }

function program14(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.azNotEnough), {hash:{},inverse:self.program(17, program17, data),fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  return buffer;
  }
function program15(depth0,data) {
  
  var buffer = "";
  buffer += "\n    <section class=\"property-control-group\">\n        <div class=\"property-info\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SUBNETGROUP_NOT_SETUP", (depth0 && depth0.subnetGroupName), (depth0 && depth0.subnetGroupName), {hash:{},data:data}))
    + "</div>\n    </section>\n    ";
  return buffer;
  }

function program17(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <section class=\"property-control-group property-dbinstance-preferred-az ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.multiAz), {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n        <label class=\"left\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PREFERRED_ZONE", {hash:{},data:data}))
    + "</label>\n        <div class=\"selectbox\" id=\"property-dbinstance-preferred-az\"></div>\n    </section>\n    ";
  return buffer;
  }
function program18(depth0,data) {
  
  
  return "hide";
  }

  buffer += "<section class=\"property-control-group\">\n    <div class=\"checkbox\">\n        <input id=\"property-dbinstance-mutil-az-check\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.disableMutilAZForMirror), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " type=\"checkbox\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.multiAz), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " name=\"property-dbinstance-mutil-az-check\">\n        <label for=\"property-dbinstance-mutil-az-check\"></label>\n    </div>\n    <label for=\"property-dbinstance-mutil-az-check\" class=\"tooltip\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.disableMutilAZForMirror), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_MUTIL_AZ_DEPLOY", {hash:{},data:data}))
    + "</label>\n</section>\n\n";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isAppEdit), {hash:{},inverse:self.program(14, program14, data),fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  return buffer;
  };
TEMPLATE.propertyDbinstanceMutilAZ=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<section class=\"modal-db-replica-promote-confirm\">\n    <h5 class=\"modal-text-major\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PROMOTE_CONFIRM_MAJOR", {hash:{},data:data}))
    + "</h5>\n    <ul>\n        <li>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PROMOTE_CONFIRM_CONTENT_1", {hash:{},data:data}))
    + "</li>\n        <li>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PROMOTE_CONFIRM_CONTENT_2", {hash:{},data:data}))
    + "</li>\n        <li>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PROMOTE_CONFIRM_CONTENT_3", {hash:{},data:data}))
    + "</li>\n        <li>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PROMOTE_CONFIRM_CONTENT_4", {hash:{},data:data}))
    + "</li>\n    </ul>\n    <h5 class=\"modal-text-major\">Note</h5>\n    <p>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RDS_PROMOTE_REPLICA_WARNING", {hash:{},data:data}))
    + "</p>\n    <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html\" target=\"_blank\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RDS_READ_AWS_DOC", {hash:{},data:data}))
    + "</a>\n</section>";
  return buffer;
  };
TEMPLATE.modalPromoteConfirm=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n        <div class=\"modal-db-instance-restore-no-restore\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RDS_NO_BACKUP_TIP", {hash:{},data:data}))
    + "</div>\n    ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <h5 class=\"modal-text-major\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RDS_RESTORE_DB_TIP", {hash:{},data:data}))
    + "</h5>\n\n        <div class=\"modal-db-instance-restore-option\">\n            <label class=\"title\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RDS_RESTORE_USE_LASTEST_TIME", {hash:{},data:data}))
    + "</label>\n            <input id=\"modal-db-instance-restore-radio-latest\" type=\"radio\" value=\"latest\" name=\"modal-db-instance-restore-radio\" ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.custom), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n            <label for=\"modal-db-instance-restore-radio-latest\">"
    + escapeExpression(((stack1 = (depth0 && depth0.lastest)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</label>\n        </div>\n\n        <div class=\"modal-db-instance-restore-option\">\n            <label class=\"title\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RDS_RESTORE_USE_CUSTOM_TIME", {hash:{},data:data}))
    + "</label>\n            <input id=\"modal-db-instance-restore-radio-custom\" type=\"radio\" value=\"custom\" name=\"modal-db-instance-restore-radio\" ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.custom), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n            <div class=\"datetimepicker\">\n                <input class=\"input datepicker\" type=\"text\" >\n                <input class=\"input timepicker hour\" value=\"\" data-ignore=\"true\" maxlength=\"2\" data-required=\"true\" data-type=\"number\" type=\"text\" >\n                <label>:</label>\n                <input class=\"input timepicker minute\" value=\"\" data-ignore=\"true\" maxlength=\"2\" data-required=\"true\" data-type=\"number\" type=\"text\" >\n                <label>:</label>\n                <input class=\"input timepicker second\" value=\"\" data-ignore=\"true\" maxlength=\"2\" data-required=\"true\" data-type=\"number\" type=\"text\" >\n                <label>UTC "
    + escapeExpression(((stack1 = (depth0 && depth0.timezone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</label>\n            </div>\n        </div>\n    ";
  return buffer;
  }
function program4(depth0,data) {
  
  
  return "checked=\"checked\"";
  }

  buffer += "<section class=\"modal-db-instance-restore-config\" data-bind=\"true\">\n\n    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.noRestore), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</section>";
  return buffer;
  };
TEMPLATE.modalRestoreConfirm=Handlebars.template(__TEMPLATE__);


return TEMPLATE; });
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/property/dbinstance/view',['ApiRequest', 'ResDiff', '../base/view', 'og_dropdown', './template/stack_instance', './template/stack_replica', './template/stack_component', 'i18n!/nls/lang.js', 'constant', 'CloudResources', 'rds_pg', 'UI.modalplus', 'jqtimepicker', 'jqdatetimepicker'], function(ApiRequest, ResDiff, PropertyView, OgDropdown, template_instance, template_replica, template_component, lang, constant, CloudResources, parameterGroup, Modal) {
    var DBInstanceView, noop;
    noop = function() {
      return null;
    };
    DBInstanceView = PropertyView.extend({
      events: {
        'change #property-dbinstance-name': 'changeInstanceName',
        'change #property-res-desc': 'onChangeDesc',
        'change #property-dbinstance-mutil-az-check': 'changeMutilAZ',
        'change #property-dbinstance-storage': 'changeAllocatedStorage',
        'keyup #property-dbinstance-storage': 'inputAllocatedStorage',
        'OPTION_CHANGE #property-dbinstance-storage-type': 'changeStorageType',
        'change #property-dbinstance-iops-value': 'changeProvisionedIOPS',
        'change #property-dbinstance-master-username': 'changeUserName',
        'change #property-dbinstance-master-password': 'changePassWord',
        'change #property-dbinstance-database-name': 'changeDatabaseName',
        'change #property-dbinstance-database-port': 'changeDatabasePort',
        'change #property-dbinstance-public-access-check': 'changePublicAccessCheck',
        'change #property-dbinstance-version-update': 'changeVersionUpdate',
        'change #property-dbinstance-auto-backup-check': 'changeAutoBackupCheck',
        'change #property-dbinstance-backup-period': 'changeBackupPeriod',
        'click #property-dbinstance-backup-window-select input': 'changeBackupOption',
        'change #property-dbinstance-backup-window-start-time': 'changeBackupTime',
        'OPTION_CHANGE #property-dbinstance-backup-window-duration': 'changeBackupTime',
        'click #property-dbinstance-maintenance-window-select input': 'changeMaintenanceOption',
        'OPTION_CHANGE #property-dbinstance-maintenance-window-start-day-select': 'changeMaintenanceTime',
        'OPTION_CHANGE #property-dbinstance-maintenance-window-duration': 'changeMaintenanceTime',
        'change #property-dbinstance-maintenance-window-start-time': 'changeMaintenanceTime',
        'OPTION_CHANGE #property-dbinstance-engine-select': 'changeEngine',
        'OPTION_CHANGE #property-dbinstance-license-select': 'changeLicense',
        'OPTION_CHANGE #property-dbinstance-engine-version-select': 'changeVersion',
        'OPTION_CHANGE #property-dbinstance-class-select': 'changeClass',
        'OPTION_CHANGE #property-dbinstance-preferred-az': 'changeAZ',
        'OPTION_CHANGE #property-dbinstance-charset-select': 'changeCharset',
        'OPTION_CHANGE': 'checkChange',
        'change *': 'checkChange',
        'click #property-dbinstance-promote-replica': 'promoteReplica',
        'click .property-btn-db-restore-config': 'openRestoreConfigModal'
      },
      promoteReplica: function() {
        var modal, that;
        that = this;
        if (this.isPromoted()) {
          this.unsetPromote();
          return App.workspaces.getAwakeSpace().view.propertyPanel.refresh();
        } else {
          return modal = new Modal({
            title: lang.IDE.TITLE_CONFIRM_PROMOTE_READ_REPLICA,
            template: template_component.modalPromoteConfirm({}),
            confirm: {
              text: lang.PROP.DB_CONFIRM_PROMOTE
            },
            disableClose: true,
            onConfirm: function() {
              that.setPromote();
              App.workspaces.getAwakeSpace().view.propertyPanel.refresh();
              return modal.close();
            }
          });
        }
      },
      openRestoreConfigModal: function() {
        var currentTime, customDay, customDayStr, customMonth, customMonthStr, customYear, customYearStr, dateLang, dbRestoreTime, lastestDay, lastestMonth, lastestRestoreTime, lastestYear, modal, noRestore, penddingObj, sourceDbAppModel, sourceDbModel, that, timezone, _getCurrentSelectedTime, _setDefaultSelectedTime;
        that = this;
        sourceDbModel = this.resModel.getSourceDBForRestore();
        sourceDbAppModel = CloudResources(constant.RESTYPE.DBINSTANCE, Design.instance().region()).get(sourceDbModel.get('appId'));
        if (sourceDbAppModel) {
          penddingObj = sourceDbAppModel.get('PendingModifiedValues');
          noRestore = (!sourceDbAppModel.get('LatestRestorableTime')) || (sourceDbAppModel.get('BackupRetentionPeriod') === 0) || (penddingObj && penddingObj.BackupRetentionPeriod === 0);
          if ((new Date(sourceDbAppModel.get('LatestRestorableTime'))) === 'Invalid Date') {
            noRestore = true;
          }
        } else {
          noRestore = true;
        }
        if (noRestore) {
          modal = new Modal({
            title: lang.IDE.TITLE_RESTORE_TO_POINT_IN_TIME_CONFIG,
            template: template_component.modalRestoreConfirm({
              noRestore: noRestore
            }),
            confirm: {
              hide: true
            },
            cancel: {
              text: 'Close'
            },
            disableClose: true,
            disableConfirm: true,
            width: "580",
            onCancel: function() {
              return that.resModel.remove();
            },
            onClose: function() {
              return that.resModel.remove();
            }
          });
        } else {
          lastestRestoreTime = new Date(sourceDbAppModel.get('LatestRestorableTime'));
          dbRestoreTime = this.resModel.get('dbRestoreTime');
          if (dbRestoreTime) {
            currentTime = new Date(dbRestoreTime);
          } else {
            currentTime = lastestRestoreTime;
          }
          lastestYear = lastestRestoreTime.getFullYear();
          lastestMonth = lastestRestoreTime.getMonth() + 1;
          lastestDay = lastestRestoreTime.getDate();
          customYear = currentTime.getFullYear();
          customMonth = currentTime.getMonth() + 1;
          customDay = currentTime.getDate();
          customYearStr = String(customYear).length === 1 ? "0" + customYear : customYear;
          customMonthStr = String(customMonth).length === 1 ? "0" + customMonth : customMonth;
          customDayStr = String(customDay).length === 1 ? "0" + customDay : customDay;
          timezone = -((new Date()).getTimezoneOffset() / 60);
          if (timezone > 0) {
            timezone = "+" + timezone;
          } else {
            timezone = "" + timezone;
          }
          _getCurrentSelectedTime = function() {
            var dateStr, hour, minute, second, selectedDate;
            dateStr = $('.modal-db-instance-restore-config .datepicker').val();
            selectedDate = new Date(dateStr);
            hour = $('.modal-db-instance-restore-config .timepicker.hour').val();
            minute = $('.modal-db-instance-restore-config .timepicker.minute').val();
            second = $('.modal-db-instance-restore-config .timepicker.second').val();
            selectedDate.setHours(Number(hour));
            selectedDate.setMinutes(Number(minute));
            selectedDate.setSeconds(Number(second));
            return selectedDate;
          };
          _setDefaultSelectedTime = function(needMax) {
            var hour, hourStr, minute, minuteStr, second, secondStr;
            if (needMax) {
              hourStr = String(lastestRestoreTime.getHours());
              minuteStr = String(lastestRestoreTime.getMinutes());
              secondStr = String(lastestRestoreTime.getSeconds());
            } else {
              hourStr = String(currentTime.getHours());
              minuteStr = String(currentTime.getMinutes());
              secondStr = String(currentTime.getSeconds());
            }
            hour = hourStr.length === 1 ? "0" + hourStr : hourStr;
            minute = minuteStr.length === 1 ? "0" + minuteStr : minuteStr;
            second = secondStr.length === 1 ? "0" + secondStr : secondStr;
            $('.modal-db-instance-restore-config .timepicker.hour').val(hour);
            $('.modal-db-instance-restore-config .timepicker.minute').val(minute);
            return $('.modal-db-instance-restore-config .timepicker.second').val(second);
          };
          modal = new Modal({
            title: lang.IDE.TITLE_RESTORE_TO_POINT_IN_TIME_CONFIG,
            template: template_component.modalRestoreConfirm({
              lastest: lastestRestoreTime.toString(),
              custom: !dbRestoreTime,
              timezone: timezone,
              noRestore: noRestore
            }),
            confirm: {
              text: lang.PROP.RDS_RESTORE
            },
            disableClose: true,
            width: "580",
            onConfirm: function() {
              var isCustomTime, selectedDate;
              isCustomTime = $('#modal-db-instance-restore-radio-custom')[0].checked;
              if (isCustomTime) {
                selectedDate = _getCurrentSelectedTime();
                that.resModel.set('dbRestoreTime', selectedDate.toISOString());
              } else {
                that.resModel.set('dbRestoreTime', '');
              }
              that.resModel.isRestored = true;
              return modal.close();
            },
            onCancel: function() {
              if (!that.resModel.isRestored) {
                return that.resModel.remove();
              }
            },
            onClose: function() {
              if (!that.resModel.isRestored) {
                return that.resModel.remove();
              }
            }
          });
          _setDefaultSelectedTime();
          dateLang = 'en';
          if (language === 'zh-cn') {
            dateLang = 'ch';
          }
          $('.modal-db-instance-restore-config .datepicker').datetimepicker({
            timepicker: false,
            defaultDate: "" + customMonth + "/" + customDay + "/" + customYear,
            maxDate: "" + lastestMonth + "/" + lastestDay + "/" + lastestYear,
            closeOnDateSelect: true,
            format: 'm/d/Y',
            formatDate: 'm/d/Y',
            value: "" + customMonthStr + "/" + customDayStr + "/" + customYearStr,
            lang: dateLang,
            onSelectDate: function() {
              var selectedDate;
              selectedDate = _getCurrentSelectedTime();
              if (selectedDate > lastestRestoreTime) {
                return _setDefaultSelectedTime(true);
              }
            }
          });
          $('.modal-db-instance-restore-config .datepicker, .modal-db-instance-restore-config .timepicker').on('focus', function(event) {
            return $('#modal-db-instance-restore-radio-custom').prop('checked', true);
          });
          $('.modal-db-instance-restore-config .timepicker').on('change', function(event) {
            var currentValue, maxLatestValue, maxValue, newValStr, selectedDate, valStr;
            valStr = $(event.target).val();
            currentValue = Number(valStr);
            if ($(event.target).hasClass('hour')) {
              maxValue = 23;
              maxLatestValue = currentTime.getHours();
            } else if ($(event.target).hasClass('minute')) {
              maxValue = 59;
              maxLatestValue = currentTime.getMinutes();
            } else if ($(event.target).hasClass('second')) {
              maxValue = 59;
              maxLatestValue = currentTime.getSeconds();
            }
            if (currentValue > maxValue) {
              $(event.target).val(maxValue);
            } else if (!currentValue || currentValue < 0) {
              $(event.target).val('00');
            }
            selectedDate = _getCurrentSelectedTime();
            if (selectedDate > lastestRestoreTime) {
              _setDefaultSelectedTime();
            }
            newValStr = $(event.target).val();
            if (newValStr.length < 2) {
              newValStr = "0" + newValStr;
              return $(event.target).val(newValStr);
            }
          });
        }
        return false;
      },
      checkChange: function(e) {
        var diff, that;
        if (!this.resModel.get('appId')) {
          return;
        }
        that = this;
        diff = function(oldComp, newComp) {
          var comp, differ, keys;
          comp = that.resModel.serialize();
          differ = new ResDiff({
            old: {
              component: that.originComp
            },
            "new": comp
          });
          if (differ.modifiedComps && _.keys(differ.addedComps).length === 0 && _.keys(differ.removedComps).length === 0) {
            keys = _.keys(differ.modifiedComps);
            if (keys.length === 1 && keys[0] === 'name') {
              return false;
            }
          }
          return differ.getChangeInfo().hasResChange;
        };
        if (e) {
          if (!this.isPromoted()) {
            return _.defer(function() {
              if (diff()) {
                $('.apply-immediately-section').show();
                return $('.property-panel-wrapper').addClass('immediately');
              } else {
                $('.apply-immediately-section').hide();
                return $('.property-panel-wrapper').removeClass('immediately');
              }
            });
          }
        } else {
          return diff();
        }
      },
      durationOpertions: [0.5, 1, 2, 2.5, 3],
      genDuration: function(selectedValue) {
        return _.map(this.durationOpertions, function(value) {
          return {
            value: value,
            selected: value === selectedValue
          };
        });
      },
      changeCharset: function(event, value, data) {
        return this.resModel.set('characterSetName', value);
      },
      changeApplyImmediately: function(event) {
        var value;
        value = event.target.checked;
        return this.resModel.set('applyImmediately', value);
      },
      changeEngine: function(event, value, data) {
        this.resModel.set('engine', value);
        this.resModel.setDefaultParameterGroup();
        this.resModel.setDefaultOptionGroup();
        this.renderOptionGroup();
        return this.renderLVIA();
      },
      changeLicense: function(event, value, data) {
        this.resModel.set('license', value);
        return this.renderLVIA();
      },
      changeVersion: function(event, value, data) {
        var origEngineVersion;
        origEngineVersion = this.resModel.get('engineVersion');
        this.resModel.set('engineVersion', value);
        this.resModel.setDefaultParameterGroup(origEngineVersion);
        this.resModel.setDefaultOptionGroup(origEngineVersion);
        this.renderOptionGroup();
        this.renderParameterGroup();
        return this.renderLVIA();
      },
      changeClass: function(event, value, data) {
        this.resModel.set('instanceClass', value);
        this.setDefaultAllocatedStorage();
        return true;
      },
      setDefaultAllocatedStorage: function() {
        var currentValue, defaultStorage, range;
        range = this.resModel.getAllocatedRange();
        currentValue = this.resModel.get('allocatedStorage');
        if (range.min > currentValue || range.max < currentValue) {
          defaultStorage = this.resModel.getDefaultAllocatedStorage();
          this.resModel.set('allocatedStorage', defaultStorage);
          $('#property-dbinstance-storage').val(defaultStorage);
          return this.updateIOPSCheckStatus();
        }
      },
      _getTimeData: function(timeStr) {
        var defaultValue, duration, end, endHour, endMin, endTimeAry, endTimeStr, endWeekStr, err, start, startHour, startHourStr, startMin, startMinStr, startTimeAry, startTimeStr, startWeekStr, timeAry, _appendZero;
        defaultValue = {
          startHour: '00',
          startMin: '00',
          startTime: "00:00",
          duration: 0.5,
          startWeek: 'Mondey'
        };
        if (!timeStr) {
          return defaultValue;
        }
        try {
          _appendZero = function(str) {
            if (str.length === 1) {
              return "0" + str;
            } else {
              return str;
            }
          };
          timeAry = timeStr.split('-');
          startTimeStr = timeAry[0];
          endTimeStr = timeAry[1];
          startTimeAry = startTimeStr.split(':');
          endTimeAry = endTimeStr.split(':');
          if (startTimeAry.length === 3) {
            startWeekStr = startTimeAry[0];
            endWeekStr = endTimeAry[0];
            startTimeAry = startTimeAry.slice(1);
            endTimeAry = endTimeAry.slice(1);
          }
          startHour = Number(startTimeAry[0]);
          startMin = Number(startTimeAry[1]);
          endHour = Number(endTimeAry[0]);
          endMin = Number(endTimeAry[1]);
          start = new Date();
          end = new Date(start);
          start.setHours(startHour);
          start.setMinutes(startMin);
          end.setHours(endHour);
          end.setMinutes(endMin);
          duration = (end - start) / 1000 / 60 / 60;
          if (duration < 0) {
            duration = 24 + duration;
          }
          startHourStr = _appendZero(String(startHour));
          startMinStr = _appendZero(String(startMin));
          return {
            startHour: startHourStr,
            startMin: startMinStr,
            startTime: "" + startHourStr + ":" + startMinStr,
            duration: duration,
            startWeek: startWeekStr
          };
        } catch (_error) {
          err = _error;
          return defaultValue;
        }
      },
      _getTimeStr: function(startTimeStr, duration, startWeek) {
        var addZero, end, endHour, endMin, endTimeStr, endWeek, endWeekIdx, err, start, startHour, startMin, startTime, startWeekIdx, weekAry;
        addZero = function(num) {
          var numStr;
          numStr = String(num);
          if (numStr.length === 1) {
            numStr = '0' + numStr;
          }
          return numStr;
        };
        try {
          startTime = startTimeStr.split(':');
          startHour = Number(startTime[0]);
          startMin = Number(startTime[1]);
          start = new Date();
          start.setHours(startHour);
          start.setMinutes(startMin);
          end = new Date(start.getTime() + 1000 * 60 * 60 * duration);
          endHour = end.getHours();
          endMin = end.getMinutes();
          startHour = addZero(startHour);
          startMin = addZero(startMin);
          endHour = addZero(endHour);
          endMin = addZero(endMin);
          startTimeStr = "" + startHour + ":" + startMin;
          endTimeStr = "" + endHour + ":" + endMin;
          if (startWeek) {
            endWeek = startWeek;
            weekAry = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
            if (start.getDay() !== end.getDay()) {
              startWeekIdx = weekAry.indexOf(startWeek) + 1;
              endWeekIdx = (startWeekIdx + 1) % 7;
              endWeek = weekAry[endWeekIdx - 1];
            }
            startTimeStr = "" + startWeek + ":" + startTimeStr;
            endTimeStr = "" + endWeek + ":" + endTimeStr;
          }
          return "" + startTimeStr + "-" + endTimeStr;
        } catch (_error) {
          err = _error;
          return '';
        }
      },
      _setBackupTime: function() {
        var duration, startTime, timeStr;
        startTime = $('#property-dbinstance-backup-window-start-time').val();
        duration = Number($('#property-dbinstance-backup-window-duration .selection').text());
        timeStr = this._getTimeStr(startTime, duration);
        return this.resModel.set('backupWindow', timeStr);
      },
      _setMaintenanceTime: function() {
        var duration, startTime, timeStr, week;
        startTime = $('#property-dbinstance-maintenance-window-start-time').val();
        duration = Number($('#property-dbinstance-maintenance-window-duration .selection').text());
        week = $('#property-dbinstance-maintenance-window-start-day-select').find('.item.selected').data('id');
        timeStr = this._getTimeStr(startTime, duration, week);
        return this.resModel.set('maintenanceWindow', timeStr);
      },
      getModelJSON: function() {
        var attr, sourceDBForRestore, _ref;
        attr = this.resModel.toJSON();
        if (this.isAppEdit) {
          attr.isAppEdit = this.isAppEdit;
          if (this.appModel) {
            _.extend(attr, this.appModel.toJSON());
          }
          _.extend(attr, this.getOriginAttr());
        }
        attr.snapshotId = attr.instanceId ? '' : attr.snapshotId;
        attr.isCanPromote = this.isCanPromote();
        attr.isPromoted = this.isPromoted();
        attr.isPromote = this.isCanPromote() || this.isPromoted();
        sourceDBForRestore = this.resModel.getSourceDBForRestore();
        if (sourceDBForRestore) {
          attr.isRestoreDB = true;
          attr.sourceDbIdForRestore = sourceDBForRestore.get('appId');
        }
        if (this.resModel.isMysql && this.resModel.master() && ((_ref = this.resModel.getMajorVersion()) === '5.1' || _ref === '5.5')) {
          attr.disableBackupForOldMySQL = true;
        }
        return attr;
      },
      isPromoted: function() {
        var dbModel, originReplicaId;
        dbModel = CloudResources(constant.RESTYPE.DBINSTANCE, Design.instance().region()).get(this.resModel.get('appId'));
        if (dbModel) {
          originReplicaId = dbModel.get('ReadReplicaSourceDBInstanceIdentifier');
          return this.isAppEdit && originReplicaId && !this.resModel.master();
        }
        return false;
      },
      isCanPromote: function() {
        var dbModel, originReplicaId;
        dbModel = CloudResources(constant.RESTYPE.DBINSTANCE, Design.instance().region()).get(this.resModel.get('appId'));
        if (dbModel) {
          originReplicaId = dbModel.get('ReadReplicaSourceDBInstanceIdentifier');
          return this.isAppEdit && originReplicaId && this.resModel.master();
        }
        return false;
      },
      setPromote: function() {
        this.resModel.unsetMaster();
        if (!this.resModel.autobackup()) {
          return this.resModel.autobackup(1);
        }
      },
      unsetPromote: function() {
        var srcDBId, srcDBModel, _ref;
        srcDBId = (_ref = CloudResources(constant.RESTYPE.DBINSTANCE, Design.instance().region()).get(this.resModel.get('appId'))) != null ? _ref.get('ReadReplicaSourceDBInstanceIdentifier') : void 0;
        if (srcDBId) {
          srcDBModel = Design.modelClassForType(constant.RESTYPE.DBINSTANCE).findWhere({
            appId: srcDBId
          });
          if (srcDBModel) {
            return this.resModel.setMaster(srcDBModel);
          }
        }
      },
      getOriginAttr: function() {
        var allocatedStorage, iops;
        if (this.originComp && this.appModel) {
          allocatedStorage = this.originComp.resource.AllocatedStorage;
          iops = this.originComp.resource.Iops;
          return {
            originAllocatedStorage: allocatedStorage,
            originIOPS: iops,
            originBackupWindow: this.appModel.get('PreferredBackupWindow'),
            originMaintenanceWindow: this.appModel.get('PreferredMaintenanceWindow')
          };
        } else {
          return null;
        }
      },
      render: function() {
        var $item, $select, attr, backupTime, changeApplyImmediately, checkChange, lvi, maintenanceTime, snapshotModel, spec, template, weekStr, _ref;
        attr = this.getModelJSON();
        backupTime = this._getTimeData(attr.backupWindow);
        maintenanceTime = this._getTimeData(attr.maintenanceWindow);
        attr.backup = backupTime;
        attr.maintenance = maintenanceTime;
        attr.backupDurations = this.genDuration(backupTime.duration);
        attr.maintenanceDurations = this.genDuration(maintenanceTime.duration);
        attr.hasSlave = !!this.resModel.slaves().length;
        attr.engineType = this.resModel.engineType();
        attr.isChanged = this.checkChange();
        _.extend(attr, {
          isOracle: this.resModel.isOracle(),
          isSqlserver: this.resModel.isSqlserver(),
          isPostgresql: this.resModel.isPostgresql(),
          isMysql: this.resModel.isMysql()
        });
        if (this.resModel.master()) {
          attr.sourceDbName = this.resModel.master().get('name');
        }
        spec = this.resModel.getSpecifications();
        lvi = this.resModel.getLVIA(spec);
        attr.licenses = lvi[0];
        attr.versions = lvi[1];
        attr.classes = lvi[2];
        template = template_instance;
        if (this.isAppEdit && ((_ref = this.resModel.get('engine')) !== 'sqlserver-ee' && _ref !== 'sqlserver-se')) {
          attr.hideAZConfig = true;
        }
        if (this.resModel.master()) {
          if (this.isAppEdit) {
            attr.hideAZConfig = true;
          } else {
            template = template_replica;
          }
          attr.masterIops = this.resModel.master().get('iops');
        } else if (attr.snapshotId) {
          template = template_instance;
          snapshotModel = this.resModel.getSnapshotModel();
          attr.snapshotSize = Number((snapshotModel != null ? snapshotModel.get('AllocatedStorage') : void 0) || this.resModel.get("allocatedStorage"));
        }
        if (this.resModel.isOracle()) {
          attr.isOracle = true;
          attr.oracleCharset = _.map(Design.modelClassForType(constant.RESTYPE.DBINSTANCE).oracleCharset, function(oc) {
            return {
              charset: oc,
              selected: oc === attr.characterSetName
            };
          });
        }
        if (this.resModel.isSqlserver()) {
          attr.iopsInfo = lang.PROP.DBINSTANCE_STORAGE_REQUIRE_10_RATIO;
        } else {
          attr.iopsInfo = lang.PROP.DBINSTANCE_STORAGE_IOPS_3_10_RATIO;
        }
        this.$el.html(template(attr));
        checkChange = this.checkChange.bind(this);
        changeApplyImmediately = this.changeApplyImmediately.bind(this);
        this.$el.find(".apply-immediately-section").insertAfter('header.property-sidebar-title').click(changeApplyImmediately).click(checkChange);
        if (this.isAppEdit && !this.isPromoted()) {
          $('.property-panel-wrapper').toggleClass('immediately', checkChange());
        }
        this.setTitle(attr.name);
        this.renderLVIA();
        this.renderOptionGroup();
        weekStr = maintenanceTime != null ? maintenanceTime.startWeek : void 0;
        if (weekStr) {
          $select = $('#property-dbinstance-maintenance-window-start-day-select');
          $item = $select.find(".item[data-id='" + weekStr + "']").addClass('selected');
          $select.find('.selection').text($item.text());
        }
        this.updateIOPSCheckStatus();
        this.pgDropdown = new parameterGroup(this.resModel).renderDropdown();
        $("#property-dbinstance-parameter-group-select").html(this.pgDropdown.el);
        this.bindParsley();
        $('#property-dbinstance-maintenance-window-start-time, #property-dbinstance-backup-window-start-time').timepicker({
          'timeFormat': 'H:i',
          'step': 1
        });
        if (this.isAppEdit) {
          this.getInstanceStatus();
        }
        this.resModel.on('change:iops', function(val) {
          var $tipDom, originValue;
          if (this.isAppEdit) {
            originValue = that.getOriginAttr();
            $tipDom = this.$el.find('.property-info-iops-adjust-tip');
            if (originValue === val) {
              return $tipDom.removeClass('hide');
            } else {
              return $tipDom.addClass('hide');
            }
          }
        });
        attr.name;
        if (this.resModel.getSourceDBForRestore() && !this.resModel.isRestored) {
          return this.openRestoreConfigModal();
        }
      },
      bindParsley: function() {
        var db, that, validateStartTime;
        that = this;
        db = this.resModel;
        validateStartTime = function(val) {
          if (!/^(([0-1]?[0-9])|(2?[0-3])):[0-5]?[0-9]$/.test(val)) {
            return lang.PARSLEY.PROVIDE_VALID_TIME_VALUE;
          }
        };
        this.$('#property-dbinstance-backup-window-start-time').parsley('custom', validateStartTime);
        this.$('#property-dbinstance-maintenance-window-start-time').parsley('custom', validateStartTime);
        this.$('#property-dbinstance-database-name').parsley('custom', function(val) {
          switch (db.engineType()) {
            case 'mysql':
              if (val.length > 64) {
                return lang.PARSLEY.MAX_LENGTH_IS_64;
              }
              break;
            case 'postgresql':
              if (val.length > 63) {
                return lang.PARSLEY.MAX_LENGTH_IS_63;
              }
              if (!/[a-z_]/.test(val[0])) {
                return lang.PARSLEY.MUST_BEGIN_WITH_LETTER_OR_UNDERSCORE;
              }
              break;
            case 'oracle':
              if (val.length > 8) {
                return lang.PARSLEY.MAX_LENGTH_IS_8;
              }
          }
          return null;
        });
        this.$('#property-dbinstance-storage').parsley('custom', function(val) {
          var allocatedRange, increaseSize, max, min, minIncreaseSize, originValue, source, storage;
          storage = Number(val);
          originValue = that.getOriginAttr();
          allocatedRange = that.resModel.getAllocatedRange();
          min = allocatedRange.min;
          max = allocatedRange.max;
          if (that.isAppEdit) {
            if (originValue && (storage < originValue.originAllocatedStorage)) {
              return lang.PARSLEY.ALLOCATED_STORAGE_CANNOT_BE_REDUCED;
            }
            increaseSize = storage - originValue.originAllocatedStorage;
            if (increaseSize > 0) {
              minIncreaseSize = Math.ceil(originValue.originAllocatedStorage * 0.1);
              if (increaseSize < minIncreaseSize) {
                return sprintf(lang.PARSLEY.ALLOCATED_STORAGE_MUST_INCREASE_BY_AT_LEAST_10, originValue.originAllocatedStorage + minIncreaseSize);
              }
            }
          }
          if (!(storage >= min && storage <= max)) {
            return sprintf(lang.PARSLEY.MUST_BE_AN_INTEGER_FROM_MIN_TO_MAX, min, max);
          }
          source = that.resModel.source();
          if (source && storage < +source.get('AllocatedStorage')) {
            return lang.PARSLEY.SNAPSHOT_STORAGE_NEED_LARGE_THAN_ORIGINAL_VALUE;
          }
        });
        this.$('#property-dbinstance-iops-value').parsley('custom', function(val) {
          var defaultIOPS, fillValue, iops, iopsRange, originValue, storage;
          fillValue = $('#property-dbinstance-storage').val();
          originValue = that.resModel.get('allocatedStorage');
          storage = Number(fillValue || originValue);
          iopsRange = that._getIOPSRange(storage);
          defaultIOPS = that._getDefaultIOPS(storage);
          iops = Number(val);
          if (iops < 1000) {
            return lang.PARSLEY.REQUIRE_AT_LEAST_1000_IOPS;
          }
          if (that.resModel.isSqlserver() && ((iops % 1000) !== 0 || (storage * 10) !== iops)) {
            return lang.PARSLEY.SQLSERVER_IOPS_REQUIRES_A_MULTIPLE_OF_1000;
          }
          if (iops >= iopsRange.minIOPS && iops <= iopsRange.maxIOPS) {
            return null;
          }
          return lang.PARSLEY.REQUIRE_IOPS_GB_RATIOS_BETWEEN_3_AND_10;
        });
        this.$('#property-dbinstance-master-password').parsley('custom', function(val) {
          var max, min;
          if (val.indexOf('/') !== -1 || val.indexOf('"') !== -1 || val.indexOf('@') !== -1) {
            return lang.PARSLEY.CANNOT_CONTAIN_CHARACTER_SPLASH;
          }
          if (that.resModel.isMysql()) {
            min = 8;
            max = 41;
          }
          if (that.resModel.isOracle()) {
            min = 8;
            max = 30;
          }
          if (that.resModel.isSqlserver()) {
            min = 8;
            max = 128;
          }
          if (that.resModel.isPostgresql()) {
            min = 8;
            max = 128;
          }
          if (val.length >= min && val.length <= max) {
            return null;
          }
          return sprintf(lang.PARSLEY.MUST_CONTAIN_FROM_MIN_TO_MAX_CHARACTERS, min, max);
        });
        return this.$('#property-dbinstance-database-port').parsley('custom', function(val) {
          if (db.isSqlserver() && (+val === 1434 || +val === 3389 || +val === 47001 || +val === 49152 || +val === 49153 || +val === 49154 || +val === 49155 || +val === 49156)) {
            return lang.PARSLEY.THIS_VALUE_CANNOT_BE_1434_3389_47001_49152_49156;
          }
          return null;
        });
      },
      renderOptionGroup: function() {
        var $ogDropdown, attr, defaultInfo, engineCol, engineOptions, ogDropdown, ogOptions, regionName;
        regionName = Design.instance().region();
        attr = this.getModelJSON();
        attr.canCustomOG = false;
        attr.ogName = this.resModel.getOptionGroupName();
        engineCol = CloudResources(constant.RESTYPE.DBENGINE, regionName);
        engineOptions = engineCol.getOptionGroupsByEngine(regionName, attr.engine);
        if (engineOptions) {
          ogOptions = engineOptions[this.resModel.getMajorVersion()];
        }
        defaultInfo = engineCol.getDefaultByNameVersion(regionName, attr.engine, attr.engineVersion);
        if (defaultInfo && defaultInfo.canCustomOG) {
          attr.canCustomOG = defaultInfo.canCustomOG;
        } else {
          if (engineOptions && ogOptions) {
            attr.canCustomOG = true;
          }
        }
        this.$el.find('.property-dbinstance-optiongroup').html(template_component.optionGroupDropDown(attr));
        if (attr.canCustomOG) {
          $ogDropdown = this.$el.find('.property-dbinstance-optiongroup-placeholder');
          ogDropdown = new OgDropdown({
            el: $ogDropdown,
            dbInstance: this.resModel
          });
          return $ogDropdown.html(ogDropdown.render({
            engine: attr.engine,
            engineVersion: attr.engineVersion,
            majorVersion: this.resModel.getMajorVersion()
          }).el);
        }
      },
      renderParameterGroup: function() {
        this.pgDropdown.setSelection(this.resModel.get('pgName'));
        return null;
      },
      renderLVIA: function() {
        var attr, azUsedMap, connAry, data, disableMutilAZForMirror, engine, lvi, minAZCount, multiAZCapable, sgData, spec, subnetGroupModel, usedAZCount, _ref;
        spec = this.resModel.getSpecifications();
        lvi = this.resModel.getLVIA(spec);
        data = {
          licenses: lvi[0],
          versions: lvi[1],
          classes: lvi[2],
          azCapable: lvi[3],
          engines: constant.DB_ENGINE_ARY[this.resModel.engineType()]
        };
        attr = this.getModelJSON();
        attr.classInfo = this.resModel.getInstanceClassDict();
        _.extend(data, attr);
        $('#lvia-container').html(template_component.lvi(data));
        spec = this.resModel.getSpecifications();
        lvi = this.resModel.getLVIA(spec);
        multiAZCapable = lvi[3];
        engine = this.resModel.get('engine');
        disableMutilAZForMirror = false;
        if ((engine === 'sqlserver-ee' || engine === 'sqlserver-se')) {
          disableMutilAZForMirror = true;
        }
        if (!multiAZCapable) {
          this.resModel.set('multiAz', '');
        }
        sgData = {
          disableMutilAZForMirror: disableMutilAZForMirror,
          multiAZCapable: multiAZCapable
        };
        sgData = _.extend(sgData, attr);
        subnetGroupModel = this.resModel.parent();
        sgData.subnetGroupName = subnetGroupModel.get('name');
        connAry = subnetGroupModel.get('__connections');
        azUsedMap = {};
        _.each(connAry, function(subnetModel) {
          var azName;
          azName = subnetModel.getTarget(constant.RESTYPE.SUBNET).parent().get('name');
          azUsedMap[azName] = true;
          return null;
        });
        usedAZCount = _.size(azUsedMap);
        if ((_ref = Design.instance().region()) === 'cn-north-1') {
          minAZCount = 1;
        } else {
          minAZCount = 2;
        }
        if (usedAZCount < minAZCount) {
          sgData.azNotEnough = true;
        }
        if (multiAZCapable) {
          $('#property-dbinstance-mutil-az').html(template_component.propertyDbinstanceMutilAZ(sgData));
        }
        this.renderAZList();
        return this;
      },
      renderAZList: function() {
        var $item, $preferredAZSelect, attr, avaliableAZ, azData, dragAZs, lvi, optionalAzAry, region, selectedAZ, spec, _ref;
        spec = this.resModel.getSpecifications();
        lvi = this.resModel.getLVIA(spec);
        optionalAzAry = lvi[4];
        attr = this.getModelJSON();
        region = Design.instance().get('region');
        dragAZs = Design.modelClassForType(constant.RESTYPE.AZ).allObjects();
        dragAZs = _.map(dragAZs, function(azModel) {
          return azModel.get('name');
        });
        avaliableAZ = [];
        _.each(optionalAzAry, function(az) {
          avaliableAZ.push(az);
          return null;
        });
        avaliableAZ = _.intersection(avaliableAZ, dragAZs);
        azData = _.map(avaliableAZ, function(az) {
          return {
            name: az
          };
        });
        $('#property-dbinstance-preferred-az').html(template_component.preferred_az(azData));
        if (attr.az && (_ref = attr.az, __indexOf.call(avaliableAZ, _ref) >= 0)) {
          selectedAZ = attr.az;
        } else {
          selectedAZ = 'no';
        }
        $preferredAZSelect = $('#property-dbinstance-preferred-az');
        $item = $preferredAZSelect.find(".item[data-id='" + selectedAZ + "']").addClass('selected');
        return $preferredAZSelect.find('.selection').text($item.text());
      },
      changeInstanceName: function(event) {
        var $target, that, value;
        that = this;
        $target = $(event.currentTarget);
        if (MC.aws.aws.checkResName(this.resModel.get('id'), $target, 'DBInstance')) {
          value = $target.val().toLowerCase();
          $target.parsley('custom', function(val) {
            var errTip, max, min;
            val = val.toLowerCase();
            if (val[val.length - 1] === '-' || (val.indexOf('--') !== -1)) {
              return errTip;
            }
            if (that.resModel.isSqlserver()) {
              min = 1;
              max = 10;
            } else {
              min = 1;
              max = 58;
            }
            errTip = sprintf(lang.PARSLEY.MUST_CONTAIN_FROM_MIN_TO_MAX_ALPHANUMERIC_CHARACTERS_HYPHEN, min, max);
            if (val.length < min || val.length > max) {
              return errTip;
            }
            if (!MC.validate('letters', val[0])) {
              return errTip;
            }
          });
          if ($target.parsley('validate')) {
            this.resModel.setName(value);
            this.setTitle(value);
          }
        }
        return null;
      },
      onChangeDesc: function(event) {
        return this.resModel.setDesc($(event.currentTarget).val());
      },
      changeMutilAZ: function(event) {
        var $item, $select, value;
        value = event.target.checked;
        $select = $('.property-dbinstance-preferred-az');
        if (value) {
          $select.find('.item').remove('selected');
          $item = $select.find(".item[data-id='no']").addClass('selected');
          $select.find('.selection').text($item.text());
          $select.hide();
          this.resModel.set('az', '');
          this.renderAZList();
        } else {
          $select.show();
        }
        return this.resModel.set('multiAz', value);
      },
      changeAZ: function(event, name, data) {
        if (name === 'no') {
          return this.resModel.set('az', '');
        } else {
          return this.resModel.set('az', name);
        }
      },
      updateIOPSCheckStatus: function(newStorage) {
        var iops, iopsRange, storge, that;
        that = this;
        if (newStorage) {
          storge = newStorage;
        } else {
          storge = that.resModel.get('allocatedStorage');
        }
        if (!(that.resModel.master() && !that.isAppEdit)) {
          iops = that.resModel.get('iops');
          iopsRange = this._getIOPSRange(storge);
          if (iopsRange.minIOPS >= 1000 || iopsRange.maxIOPS >= 1000) {
            if (this.resModel.isSqlserver() && this.isAppEdit) {
              that._disableIOPSCheck(true);
            } else {
              that._disableIOPSCheck(false);
            }
            return $('.property-dbinstance-iops-check-tooltip').attr('data-tooltip', '');
          } else {
            iopsRange.minIOPS >= 1000 || iopsRange.maxIOPS;
            that._disableIOPSCheck(true);
            return $('.property-dbinstance-iops-check-tooltip').attr('data-tooltip', lang.PROP.VOLUME_DISABLE_IOPS_TOOLTIP);
          }
        }
      },
      _disableIOPSCheck: function(isDisable) {
        var _check, _checked, _hide, _switch;
        _check = function(id) {
          var $selectedDom;
          $('#property-dbinstance-storage-type').find('.item').removeClass('selected');
          $selectedDom = $('#property-dbinstance-storage-type').find('.item[data-id="' + id + '"]');
          $selectedDom.addClass('selected');
          return $('#property-dbinstance-storage-type').find('.selection').text($selectedDom.text());
        };
        _switch = function(flag) {
          if (flag) {
            _check('standard');
            return $('.property-dbinstance-iops-value-section').hide();
          } else {
            return _check('io1');
          }
        };
        _hide = function(flag) {
          var $dom;
          $dom = $('#property-dbinstance-storage-type').find('.item[data-id="io1"]');
          if (flag) {
            $dom.hide();
            if (_checked()) {
              return _switch(true);
            }
          } else {
            return $dom.show();
          }
        };
        _checked = function() {
          var $dom;
          $dom = $('#property-dbinstance-storage-type').find('.item[data-id="io1"]');
          return $dom.hasClass('selected');
        };
        if (isDisable) {
          if (_checked()) {
            _switch(true);
          }
          _hide(true);
          $('#property-dbinstance-iops-value').val('');
          return this.resModel.setIops(0);
        } else {
          return _hide(false);
        }
      },
      _getIOPSRange: function(storage) {
        var maxIOPS, minIOPS;
        if (this.resModel.isSqlserver()) {
          minIOPS = storage * 10;
          maxIOPS = storage * 10;
        } else {
          minIOPS = storage * 3;
          maxIOPS = storage * 10;
        }
        return {
          minIOPS: minIOPS,
          maxIOPS: maxIOPS
        };
      },
      _getDefaultIOPS: function(storage) {
        var base, count, iopsRange, value;
        base = 1000;
        count = 0;
        iopsRange = this._getIOPSRange(storage);
        while (++count) {
          value = base * count;
          if (value >= iopsRange.minIOPS && value <= iopsRange.maxIOPS) {
            return value;
          }
          if (value > iopsRange.maxIOPS) {
            return null;
          }
        }
      },
      changeAllocatedStorage: function(event) {
        var target, that, value;
        that = this;
        target = $(event.target);
        value = Number(target.val());
        if (target.parsley('validate') && that.changeProvisionedIOPS()) {
          that.resModel.set('allocatedStorage', value);
          return that.updateIOPSCheckStatus();
        }
      },
      inputAllocatedStorage: function(event) {
        var target, that, value;
        that = this;
        target = $(event.target);
        value = Number(target.val());
        return that.updateIOPSCheckStatus(value);
      },
      changeStorageType: function() {
        var defaultIOPS, fillValue, iopsRange, originValue, storage, that, value, _checked, _value;
        that = this;
        _checked = function() {
          var $dom;
          $dom = $('#property-dbinstance-storage-type').find('.item[data-id="io1"]');
          return $dom.hasClass('selected');
        };
        _value = function() {
          var $dom;
          $dom = $('#property-dbinstance-storage-type').find('.item.selected');
          return $dom.attr('data-id');
        };
        value = _checked();
        fillValue = $('#property-dbinstance-storage').val();
        originValue = this.resModel.get('allocatedStorage');
        storage = Number(fillValue || originValue);
        iopsRange = this._getIOPSRange(storage);
        if (this.resModel.master() && !this.isAppEdit) {
          if (value) {
            this.resModel.setIops(this.resModel.master().get('iops'));
          } else {
            this.resModel.setIops(0);
          }
        } else {
          if (value) {
            $('.property-dbinstance-iops-value-section').show();
            if (iopsRange.minIOPS >= 1000 || iopsRange.maxIOPS >= 1000) {
              defaultIOPS = this._getDefaultIOPS(storage);
              if (defaultIOPS) {
                $('#property-dbinstance-iops-value').val(defaultIOPS);
                that.changeProvisionedIOPS();
              }
            }
          } else {
            $('.property-dbinstance-iops-value-section').hide();
            $('#property-dbinstance-iops-value').val('');
            this.resModel.setIops(0);
          }
        }
        return this.resModel.set('storageType', _value());
      },
      changeProvisionedIOPS: function(event) {
        var fillValue, iops, originValue, storage, target, that, value, _checked;
        that = this;
        _checked = function() {
          var $dom;
          $dom = $('#property-dbinstance-storage-type').find('.item[data-id="io1"]');
          return $dom.hasClass('selected');
        };
        if (_checked()) {
          target = $('#property-dbinstance-iops-value');
          value = target.val();
          iops = Number(value);
          fillValue = $('#property-dbinstance-storage').val();
          originValue = this.resModel.get('allocatedStorage');
          storage = Number(fillValue || originValue);
          if (target.parsley('validate')) {
            originValue = that.getOriginAttr();
            if (originValue && originValue.originIOPS && (iops !== originValue.originIOPS)) {
              $('.property-info-iops-adjust-tip').show();
            } else {
              $('.property-info-iops-adjust-tip').hide();
            }
            that.resModel.setIops(Number(iops));
            that.resModel.set('allocatedStorage', storage);
            return true;
          }
          return false;
        } else {
          return true;
        }
      },
      changeUserName: function(event) {
        var target, that, value;
        that = this;
        target = $(event.target);
        value = target.val();
        target.parsley('custom', function(val) {
          var max, min;
          if (MC.validate('alphanum', val) && MC.validate('letters', val[0])) {
            if (that.resModel.isMysql()) {
              min = 1;
              max = 16;
            }
            if (that.resModel.isOracle()) {
              min = 1;
              max = 30;
            }
            if (that.resModel.isSqlserver()) {
              min = 1;
              max = 128;
            }
            if (that.resModel.isPostgresql()) {
              min = 2;
              max = 16;
            }
            if (val.length >= min && val.length <= max) {
              return null;
            }
          }
          return sprintf(lang.PARSLEY.MUST_CONTAIN_FROM_MIN_TO_MAX_ALPHANUMERIC_CHARACTERS, min, max);
        });
        if (target.parsley('validate')) {
          return this.resModel.set('username', value);
        }
      },
      changePassWord: function(event) {
        var target, that, value;
        that = this;
        target = $(event.target);
        value = target.val();
        if (target.parsley('validate')) {
          return this.resModel.set('password', value);
        }
      },
      changeDatabaseName: function(event) {
        var $target;
        $target = $(event.currentTarget);
        if (!$target.parsley('validate')) {
          return;
        }
        return this.resModel.set('dbName', $target.val());
      },
      changeDatabasePort: function(event) {
        var $target;
        $target = $(event.currentTarget);
        if (!$target.parsley('validate')) {
          return;
        }
        return this.resModel.set('port', $target.val());
      },
      changePublicAccessCheck: function(event) {
        var value;
        value = event.target.checked;
        return this.resModel.set('accessible', value);
      },
      changeVersionUpdate: function(event) {
        var value;
        value = event.target.checked;
        return this.resModel.set('autoMinorVersionUpgrade', value);
      },
      changeAutoBackupCheck: function(event) {
        var value;
        value = event.target.checked ? '1' : '0';
        return this.changeBackupPeriod(null, value);
      },
      changeBackupPeriod: function(event, value) {
        var $target;
        if (event) {
          $target = $(event.currentTarget);
          if (!$target.parsley('validate')) {
            return;
          }
          value = $target.val();
        } else if (value) {
          $("#property-dbinstance-backup-period").val(value).parsley('validate');
        } else {
          console.error("at least one value in event or value");
          return null;
        }
        if (value !== '0') {
          $("#group-dbinstance-backup-period").removeClass('hide');
          $('#property-dbinstance-auto-backup-group').removeClass('hide');
        } else {
          $("#group-dbinstance-backup-period").addClass('hide');
          $('#property-dbinstance-auto-backup-group').addClass('hide');
        }
        return this.resModel.autobackup(Number(value));
      },
      changeBackupOption: function(event) {
        var $backupGroup, selectedValue;
        $backupGroup = $('#property-dbinstance-backup-window-group');
        selectedValue = $(event.currentTarget).val();
        if (selectedValue === 'window') {
          $backupGroup.show();
          return this.changeBackupTime();
        } else {
          $backupGroup.hide();
          return this.resModel.set('backupWindow', '');
        }
      },
      changeMaintenanceOption: function(event) {
        var $maintenanceGroup, selectedValue;
        $maintenanceGroup = $('#property-dbinstance-maintenance-window-group');
        selectedValue = $(event.currentTarget).val();
        if (selectedValue === 'window') {
          $maintenanceGroup.show();
          return this.changeMaintenanceTime();
        } else {
          $maintenanceGroup.hide();
          return this.resModel.set('maintenanceWindow', '');
        }
      },
      changeBackupTime: function(event) {
        if ($('#property-dbinstance-backup-window-start-time').parsley('validate')) {
          return this._setBackupTime();
        }
      },
      changeMaintenanceTime: function(event) {
        if ($('#property-dbinstance-maintenance-window-start-time').parsley('validate')) {
          return this._setMaintenanceTime();
        }
      },
      getInstanceStatus: function() {
        var currentResModel, dbId, region, that, _setStatus;
        that = this;
        _setStatus = function(showError) {
          var tip;
          $('.property-dbinstance-status-icon-warning').remove();
          if (that.appModel) {
            that.setTitle(that.appModel.get('name'));
          }
          if (showError === true) {
            $('.db-status-loading').remove();
            $('.property-dbinstance-not-available-info').show();
            tip = '<i class="property-dbinstance-status-icon-warning icon-warning"></i>';
          } else if (showError === false) {
            $('.db-status-loading').remove();
            tip = '';
          } else {
            tip = '<div class="db-status-loading loading-spinner loading-spinner-small"></div>';
          }
          return that.prependTitle(tip);
        };
        _setStatus();
        region = Design.instance().region();
        dbId = that.resModel.get('appId');
        currentResModel = CloudResources(constant.RESTYPE.DBINSTANCE, region).get(dbId);
        if (currentResModel) {
          return ApiRequest("rds_ins_DescribeDBInstances", {
            region_name: region,
            id: dbId
          }).then(function(data) {
            var dbData, dbStatus, newSrcId, oldSrcId, _ref;
            data = ((_ref = data.DescribeDBInstancesResponse.DescribeDBInstancesResult.DBInstances) != null ? _ref.DBInstance : void 0) || [];
            dbData = !_.isArray(data) ? data : data[0];
            if (dbData) {
              oldSrcId = currentResModel.get('ReadReplicaSourceDBInstanceIdentifier');
              newSrcId = dbData.ReadReplicaSourceDBInstanceIdentifier;
              if (oldSrcId !== newSrcId) {
                currentResModel.set('ReadReplicaSourceDBInstanceIdentifier', newSrcId);
                App.workspaces.getAwakeSpace().view.propertyPanel.refresh();
              } else {
                dbStatus = dbData.DBInstanceStatus;
                if (dbStatus !== 'available') {
                  _setStatus(true);
                  return;
                } else {
                  that.$el.find('.property-dbinstance-promote-replica').show();
                }
              }
            }
            return _setStatus(false);
          }, function() {
            return _setStatus(false);
          });
        }
      }
    });
    return new DBInstanceView();
  });

}).call(this);

define('workspaces/awseditor/property/dbinstance/template/app',['handlebars'], function(Handlebars){ var __TEMPLATE__, TEMPLATE={};

__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"highlight-status\">(Pending)=>["
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.DbinstanceIdentifier)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "]</span>";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.Endpoint)),stack1 == null || stack1 === false ? stack1 : stack1.Address), {hash:{},inverse:self.program(6, program6, data),fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ":";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.Endpoint), {hash:{},inverse:self.program(10, program10, data),fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.Port), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  return buffer;
  }
function program4(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.Endpoint)),stack1 == null || stack1 === false ? stack1 : stack1.Address)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program6(depth0,data) {
  
  
  return "(Not Ready)";
  }

function program8(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.Endpoint)),stack1 == null || stack1 === false ? stack1 : stack1.Port)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program10(depth0,data) {
  
  
  return "Not Ready";
  }

function program12(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"highlight-status\">(Pending)=>["
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.Port)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "]</span>";
  return buffer;
  }

function program14(depth0,data) {
  
  
  return "green";
  }

function program16(depth0,data) {
  
  
  return "yellow";
  }

function program18(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = (depth0 && depth0.DBInstanceStatus)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program20(depth0,data) {
  
  
  return "Unavailable";
  }

function program22(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"highlight-status\">(Pending)=>["
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.EngineVersion)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "]</span>";
  return buffer;
  }

function program24(depth0,data) {
  
  
  return "Yes";
  }

function program26(depth0,data) {
  
  
  return "No";
  }

function program28(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"highlight-status\">(Pending)=>["
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.DBInstanceClass)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "]</span>";
  return buffer;
  }

function program30(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = (depth0 && depth0.Iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program32(depth0,data) {
  
  
  return "Disabled";
  }

function program34(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"highlight-status\">(Pending)=>["
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.Iops)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "]</span>";
  return buffer;
  }

function program36(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"highlight-status\">(Pending)=>["
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.AllocatedStorage)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " GB]</span>";
  return buffer;
  }

function program38(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<span class=\"highlight-status\">(Pending)=>["
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.StorageType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "]</span>";
  return buffer;
  }

function program40(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.ReadReplicaDBInstanceIdentifiers), {hash:{},inverse:self.noop,fn:self.program(41, program41, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  return buffer;
  }
function program41(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_READ_REPLICAS", {hash:{},data:data}))
    + "</dt>\n                    <dd>"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</dd>\n                ";
  return buffer;
  }

function program43(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_REPLICAS_SOURCE", {hash:{},data:data}))
    + "</dt>\n                <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.ReadReplicaSourceDBInstanceIdentifier)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n            ";
  return buffer;
  }

function program45(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DATABASE_NAME", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.DBName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>";
  return buffer;
  }

function program47(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_OG", {hash:{},data:data}))
    + "</dt>\n                <dd>";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.optionGroups), {hash:{},inverse:self.noop,fn:self.program(48, program48, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                </dd>\n            ";
  return buffer;
  }
function program48(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isDefault), {hash:{},inverse:self.program(51, program51, data),fn:self.program(49, program49, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  return buffer;
  }
function program49(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                        "
    + escapeExpression(((stack1 = (depth0 && depth0.OptionGroupName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<span class=\"highlight-status "
    + escapeExpression(((stack1 = (depth0 && depth0.Status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">("
    + escapeExpression(((stack1 = (depth0 && depth0.Status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span>\n                    ";
  return buffer;
  }

function program51(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                        <a class=\"db-og-in-app\">"
    + escapeExpression(((stack1 = (depth0 && depth0.OptionGroupName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a><span class=\"highlight-status "
    + escapeExpression(((stack1 = (depth0 && depth0.Status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">("
    + escapeExpression(((stack1 = (depth0 && depth0.Status)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span>\n                    ";
  return buffer;
  }

function program53(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PG", {hash:{},data:data}))
    + "</dt>\n                <dd>\n                    ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.DBParameterGroups), {hash:{},inverse:self.noop,fn:self.program(54, program54, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                </dd>\n            ";
  return buffer;
  }
function program54(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                        "
    + escapeExpression(((stack1 = (depth0 && depth0.DBParameterGroupName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<span class=\"highlight-status "
    + escapeExpression(((stack1 = (depth0 && depth0.ParameterApplyStatus)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">("
    + escapeExpression(((stack1 = (depth0 && depth0.ParameterApplyStatus)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span>\n                    ";
  return buffer;
  }

function program56(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "(";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.DBSubnetGroup)),stack1 == null || stack1 === false ? stack1 : stack1.Subnets), {hash:{},inverse:self.noop,fn:self.program(57, program57, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ")";
  return buffer;
  }
function program57(depth0,data) {
  
  var buffer = "", stack1;
  buffer += escapeExpression(((stack1 = (depth0 && depth0.SubnetIdentifier)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ", ";
  return buffer;
  }

function program59(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PREFERRED_ZONE", {hash:{},data:data}))
    + "</dt>\n                <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.AvailabilityZone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n            ";
  return buffer;
  }

function program61(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SECONDARY_ZONE", {hash:{},data:data}))
    + "</dt>\n                <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.SecondaryAvailabilityZone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n            ";
  return buffer;
  }

function program63(depth0,data) {
  
  
  return "true";
  }

function program65(depth0,data) {
  
  
  return "false";
  }

function program67(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "Enabled ("
    + escapeExpression(((stack1 = (depth0 && depth0.BackupRetentionPeriod)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " day)";
  return buffer;
  }

function program69(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_BACKUP_WINDOW", {hash:{},data:data}))
    + "</dt>\n                <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.PreferredBackupWindow)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n            ";
  return buffer;
  }

function program71(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_MAINTENANCE_WINDOW", {hash:{},data:data}))
    + "</dt>\n                <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.PreferredMaintenanceWindow)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n            ";
  return buffer;
  }

  buffer += "<article class=\"property-app app-dbinstance\">\n    <div class=\"option-group-head expand\">\n        "
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_TIT_DETAIL", {hash:{},data:data}))
    + "\n        <a href=\"#\" class=\"icon-syslog tooltip property-btn-get-system-log action-link\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DB_INSTANCE_TIP_GET_LOG", {hash:{},data:data}))
    + "\" ></a>\n    </div>\n\n    <div class=\"option-group\" style=\"display: block\">\n        <dl class=\"dl-vertical\">\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_APP_DBINSTANCE_ID", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.DBInstanceIdentifier)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.DbinstanceIdentifier), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.name), {hash:{},data:data}))
    + "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DESCRIPTION", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(helpers.emptyStr.call(depth0, (depth0 && depth0.description), {hash:{},data:data}))
    + "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENDPOINT", {hash:{},data:data}))
    + "</dt>\n            <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.Endpoint), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_STATUS", {hash:{},data:data}))
    + "</dt>\n            <dd><i class=\"status status-";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.DBInstanceStatus), "available", {hash:{},inverse:self.program(16, program16, data),fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"></i>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.DBInstanceStatus), {hash:{},inverse:self.program(20, program20, data),fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.ENGINE", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.Engine)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "("
    + escapeExpression(((stack1 = (depth0 && depth0.EngineVersion)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.EngineVersion), {hash:{},inverse:self.noop,fn:self.program(22, program22, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_AUTO_UPGRADE", {hash:{},data:data}))
    + "</dt>\n            <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.AutoMinorVersionUpgrade), {hash:{},inverse:self.program(26, program26, data),fn:self.program(24, program24, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_CLASS", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.DBInstanceClass)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.DBInstanceClass), {hash:{},inverse:self.noop,fn:self.program(28, program28, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_IOPS", {hash:{},data:data}))
    + "</dt>\n            <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.Iops), {hash:{},inverse:self.program(32, program32, data),fn:self.program(30, program30, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.Iops), {hash:{},inverse:self.noop,fn:self.program(34, program34, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_STORAGE", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.AllocatedStorage)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " GB";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.AllocatedStorage), {hash:{},inverse:self.noop,fn:self.program(36, program36, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_STORAGE_TYPE", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.StorageType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.StorageType), {hash:{},inverse:self.noop,fn:self.program(38, program38, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_USERNAME", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.MasterUsername)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n            ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.ReadReplicaDBInstanceIdentifiers)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(40, program40, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.ReadReplicaSourceDBInstanceIdentifier), {hash:{},inverse:self.noop,fn:self.program(43, program43, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </dl>\n    </div>\n\n    <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_DBCONFIG", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n        <dl class=\"dl-vertical\">\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.DBName), {hash:{},inverse:self.noop,fn:self.program(45, program45, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PORT", {hash:{},data:data}))
    + "</dt>\n            <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.Endpoint), {hash:{},inverse:self.program(10, program10, data),fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.PendingModifiedValues)),stack1 == null || stack1 === false ? stack1 : stack1.Port), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.optionGroups)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(47, program47, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.DBParameterGroups)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(53, program53, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n        </dl>\n    </div>\n    <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_NETWORK_AVAILABILITY", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n        <dl class=\"dl-vertical\">\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SUBNETGROUP", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.DBSubnetGroup)),stack1 == null || stack1 === false ? stack1 : stack1.DBSubnetGroupName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.DBSubnetGroup)),stack1 == null || stack1 === false ? stack1 : stack1.Subnets)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.noop,fn:self.program(56, program56, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.AvailabilityZone), {hash:{},inverse:self.noop,fn:self.program(59, program59, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.SecondaryAvailabilityZone), {hash:{},inverse:self.noop,fn:self.program(61, program61, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_PUBLIC_ACCESS", {hash:{},data:data}))
    + "</dt>\n            <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.PubliclyAccessible), {hash:{},inverse:self.program(65, program65, data),fn:self.program(63, program63, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_LICENSE_MODEL", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.LicenseModel)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        </dl>\n    </div>\n    <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_BACKUP_MAINTENANCE", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n        <dl class=\"dl-vertical\">\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_AUTOBACKUP", {hash:{},data:data}))
    + "</dt>\n            <dd>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.BackupRetentionPeriod), {hash:{},inverse:self.program(32, program32, data),fn:self.program(67, program67, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_LAST_RESTORE", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(helpers.timeStr.call(depth0, (depth0 && depth0.LatestRestorableTime), {hash:{},data:data}))
    + "</dd>\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.PreferredBackupWindow), {hash:{},inverse:self.noop,fn:self.program(69, program69, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.PreferredMaintenanceWindow), {hash:{},inverse:self.noop,fn:self.program(71, program71, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </dl>\n    </div>\n\n    <div class=\"option-group-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.STACK_TIT_SG", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">(<span id=\"property-head-sg-num\"></span>)</span></div>\n    <div class=\"option-group sg-group\"></div>\n</article>";
  return buffer;
  };
TEMPLATE.appView=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<tr class=\"item\">\n    <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.LogFileName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n    <td>"
    + escapeExpression(helpers.timeStr.call(depth0, (depth0 && depth0.LastWritten), {hash:{},data:data}))
    + "</td>\n    <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.Size)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n    <td>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.LogFileName), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</td>\n    ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isSafari), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</tr>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<a class=\"view\" data-file-name=\""
    + escapeExpression(((stack1 = (depth0 && depth0.LogFileName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_VIEW", {hash:{},data:data}))
    + "</a>";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <td>\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.LogFileName), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </td>\n    ";
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<a class=\"download\" data-file-name=\""
    + escapeExpression(((stack1 = (depth0 && depth0.LogFileName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.LBL_DOWNLOAD", {hash:{},data:data}))
    + "</a>";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  };
TEMPLATE.log_list=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<tr class=\"item\">\n    <td>"
    + escapeExpression(helpers.timeStr.call(depth0, (depth0 && depth0.Date), {hash:{},data:data}))
    + "</td>\n    <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.SourceIdentifier)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n    <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.Message)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n</tr>\n";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  };
TEMPLATE.event_list=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<section class=\"db-sys-log-content font-mono\">\n    "
    + escapeExpression(helpers.breaklines.call(depth0, (depth0 && depth0.LogFileData), {hash:{},data:data}))
    + "\n    <br/>\n    ----------------------- END OF LOG ----------------------\n</section>\n<div class=\"action\">\n    <button class=\"btn btn-blue refresh-log\" data-file-name=\""
    + escapeExpression(((stack1 = (depth0 && depth0.filename)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RDS_LBL_REFRESH", {hash:{},data:data}))
    + "</button>\n    <button class=\"btn btn-silver close cancel\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RDS_LBL_CLOSE", {hash:{},data:data}))
    + "</button>\n</div>";
  return buffer;
  };
TEMPLATE.log_content=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"text-center no-data\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.RDS_NO_RECORDS_FOUND", {hash:{},data:data}))
    + "</div>";
  return buffer;
  };
TEMPLATE.list_empty=Handlebars.template(__TEMPLATE__);


return TEMPLATE; });
(function() {
  define('workspaces/awseditor/property/dbinstance/app_view',['../base/view', './template/app', 'og_manage_app', 'constant', 'toolbar_modal', 'ApiRequest', 'JsonExporter', "i18n!/nls/lang.js"], function(PropertyView, template, ogManageApp, constant, toolbar_modal, ApiRequest, JsonExporter, lang) {
    var CGWAppView;
    CGWAppView = PropertyView.extend({
      events: {
        'click .db-og-in-app': 'openOgModal',
        'click .property-btn-get-system-log': 'openModal'
      },
      initialize: function() {
        return this.isSafari = $("body").hasClass("safari");
      },
      render: function() {
        var data;
        data = this.model ? this.model.toJSON() : this.resModel.serialize().component.resource;
        if (!data.Endpoint) {
          data = _.extend(this.resModel.serialize().component.resource, data);
          data.DBSubnetGroup.DBSubnetGroupName = this.resModel.parent().get('name');
        }
        data.optionGroups = _.map(data.OptionGroupMemberships, function(ogm) {
          var ogComp;
          ogComp = Design.modelClassForType(constant.RESTYPE.DBOG).findWhere({
            appId: ogm.OptionGroupName
          });
          return _.extend({}, ogm, {
            isDefault: !ogComp,
            uid: (ogComp != null ? ogComp.id : void 0) || ''
          });
        });
        data.description = this.resModel.get("description");
        data.name = this.resModel.get('name');
        this.$el.html(template.appView(data));
        return this.resModel.get('name');
      },
      renderLogList: function(logList) {
        var that;
        that = this;
        if (logList) {
          logList = _.map(logList, function(log) {
            log.isSafari = that.isSafari;
            return log;
          });
          this.modal.options.columns = this.getLogColumns();
          this.modal.setContent(template.log_list(logList));
        } else {
          this.modal.setContent(template.list_empty({}), true);
        }
        return null;
      },
      renderEventList: function(eventList) {
        var that;
        that = this;
        if (eventList) {
          this.modal.options.columns = this.getEventColumns();
          this.modal.setContent(template.event_list(eventList));
        } else {
          this.modal.setContent(template.list_empty({}), true);
        }
        return null;
      },
      openOgModal: function() {
        var ogModel;
        ogModel = this.resModel.connectionTargets('OgUsage')[0];
        return new ogManageApp({
          model: ogModel
        });
      },
      openModal: function() {
        new toolbar_modal(this.getModalOptions());
        this.modal.on('slidedown', this.switchLogEvent, this);
        this.modal.delegate({
          'click a.view': 'viewLog',
          'click a.download': 'downloadLog',
          'click .refresh-log': 'viewLog'
        }, this);
        this.modal.render();
        this.switchLog();
        return false;
      },
      switchLog: function() {
        return this.getLogList();
      },
      switchEvent: function() {
        return this.getEventList();
      },
      switchLogEvent: function(button) {
        this.modal.toggleSlide(false).renderListLoading();
        if (button === 'event') {
          return this.switchEvent();
        } else {
          return this.switchLog();
        }
      },
      getEventList: function() {
        var that;
        that = this;
        ApiRequest('rds_DescribeEvents', {
          region_name: this.resModel.design().region(),
          source_id: this.resModel.get('appId'),
          source_type: 'db-instance',
          event_categories: null,
          duration: 20160
        }).then((function(result) {
          var eventList, _ref, _ref1, _ref2;
          eventList = (result != null ? (_ref = result.DescribeEventsResponse) != null ? (_ref1 = _ref.DescribeEventsResult) != null ? (_ref2 = _ref1.Events) != null ? _ref2.Event : void 0 : void 0 : void 0 : void 0) || null;
          if (eventList && !_.isArray(eventList)) {
            eventList = [eventList];
          }
          return that.renderEventList(eventList);
        }), (function() {}));
        return null;
      },
      getLogList: function() {
        var that;
        that = this;
        ApiRequest('rds_DescribeDBLogFiles', {
          db_identifier: this.resModel.get('appId'),
          region_name: this.resModel.design().region()
        }).then((function(result) {
          var logList, _ref, _ref1, _ref2;
          logList = (result != null ? (_ref = result.DescribeDBLogFilesResponse) != null ? (_ref1 = _ref.DescribeDBLogFilesResult) != null ? (_ref2 = _ref1.DescribeDBLogFiles) != null ? _ref2.DescribeDBLogFilesDetails : void 0 : void 0 : void 0 : void 0) || null;
          if (logList && !_.isArray(logList)) {
            logList = [logList];
          }
          return that.renderLogList(logList);
        }), (function() {
          that.renderLogList(null);
          return null;
        }));
        return null;
      },
      viewLog: function(e) {
        var filename, modal;
        modal = this.modal;
        filename = $(e.currentTarget).data('fileName');
        modal.toggleSlide(true);
        return this.getLogContent(filename).then((function(log) {
          log.filename = filename;
          return modal.setSlide(template.log_content(log));
        }), (function() {
          var log;
          log = {
            LogFileData: '',
            filename: filename
          };
          return modal.setSlide(template.log_content(log));
        }));
      },
      downloadLog: function(e) {
        var filename, modal;
        modal = this.modal;
        filename = $(e.currentTarget).data('fileName');
        modal.toggleSlide(true);
        return this.getLogContent(filename).then(function(log) {
          var blob, download;
          modal.toggleSlide(false);
          download = JsonExporter.download;
          blob = new Blob([log.LogFileData || '']);
          return download(blob, filename);
        });
      },
      getLogContent: function(filename) {
        return ApiRequest('rds_DownloadDBLogFilePortion', {
          region_name: this.resModel.design().region(),
          db_identifier: this.resModel.get('appId'),
          log_filename: filename
        }).then((function(result) {
          var _ref;
          return (result != null ? (_ref = result.DownloadDBLogFilePortionResponse) != null ? _ref.DownloadDBLogFilePortionResult : void 0 : void 0) || {};
        }), (function() {
          return {};
        }));
      },
      getModalOptions: function() {
        var appId, options, that;
        that = this;
        appId = this.resModel.get('appId');
        options = {
          title: sprintf(lang.IDE.TITLE_LOG_AND_EVENT, appId),
          classList: 'syslog-dbinstance',
          context: that,
          noCheckbox: true,
          longtermActive: true,
          buttons: [
            {
              icon: 'unknown',
              type: 'log',
              name: 'Log',
              active: true
            }, {
              icon: 'unknown',
              type: 'event',
              name: 'Event'
            }
          ]
        };
        options.columns = this.getLogColumns();
        if (this.isSafari) {
          options.columns.pop();
        }
        return options;
      },
      getLogColumns: function() {
        return [
          {
            sortable: true,
            name: 'Name'
          }, {
            sortable: true,
            rowType: 'datetime',
            name: 'Last Written',
            width: "28%"
          }, {
            sortable: true,
            rowType: 'number',
            width: "10%",
            name: 'Size(B)'
          }, {
            sortable: false,
            width: "10%",
            name: 'View'
          }, {
            sortable: false,
            width: "10%",
            name: 'Download'
          }
        ];
      },
      getEventColumns: function() {
        return [
          {
            sortable: true,
            rowType: 'datetime',
            name: 'Time',
            width: "28%"
          }, {
            sortable: true,
            width: "20%",
            name: 'Source'
          }, {
            sortable: false,
            name: 'System Notes'
          }
        ];
      }
    });
    return new CGWAppView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/dbinstance/main',["Design", "CloudResources", "../base/main", "./model", "./view", "./app_view", "../sglist/main", "constant", "event"], function(Design, CloudResources, PropertyModule, model, view, app_view, sglist_main, constant) {
    var DBInstanceModule;
    DBInstanceModule = PropertyModule.extend({
      handleTypes: [constant.RESTYPE.DBINSTANCE],
      onUnloadSubPanel: function(id) {
        sglist_main.onUnloadSubPanel(id);
        return null;
      },
      setupStack: function() {
        return null;
      },
      initStack: function(uid) {
        this.view = view;
        this.model = model;
        this.view.resModel = Design.instance().component(uid);
        this.view.isAppEdit = false;
        return null;
      },
      afterLoadStack: function() {
        sglist_main.loadModule(this.model);
        return null;
      },
      setupApp: function() {
        return null;
      },
      initApp: function(uid) {
        var resModel;
        resModel = Design.instance().component(uid);
        if (resModel.serialize().component.resource.ReadReplicaSourceDBInstanceIdentifier) {
          uid = resModel.serialize().component.resource.ReadReplicaSourceDBInstanceIdentifier.split(".")[0].split('{').pop();
        }
        this.model = (CloudResources(constant.RESTYPE.DBINSTANCE, Design.instance().region()).get(resModel.get('appId'))) || (CloudResources(constant.RESTYPE.DBSNAP, Design.instance().region()).get(resModel.get('snapshotId'))) || resModel;
        this.view = app_view;
        this.view.model = this.model;
        this.view.resModel = resModel;
        this.view.isAppEdit = false;
        return null;
      },
      initAppEdit: function(uid) {
        var originJson, resModel;
        resModel = Design.instance().component(uid);
        this.view = view;
        this.model = model;
        this.view.resModel = resModel;
        originJson = Design.instance().__opsModel.getJsonData();
        view.originComp = originJson.component[resModel.id];
        if (resModel.get('appId')) {
          this.view.isAppEdit = true;
          this.view.appModel = CloudResources(constant.RESTYPE.DBINSTANCE, Design.instance().region()).get(resModel.get('appId'));
        } else {
          this.view.isAppEdit = false;
        }
        return null;
      },
      afterLoadAppEdit: function() {
        sglist_main.loadModule(this.view.resModel);
        return null;
      },
      afterLoadApp: function() {
        sglist_main.loadModule(this.view.resModel);
        return null;
      }
    });
    null;
    return DBInstanceModule;
  });

}).call(this);

define('workspaces/awseditor/property/subnetgroup/template/stack',['handlebars'], function(Handlebars){ var TEMPLATE = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<div class='option-group-category'>"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n<dl class=\"dl-vertical sbg-list\">\n";
  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dl>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n    <dt>("
    + escapeExpression(((stack1 = (depth0 && depth0.cidr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</dt>\n";
  return buffer;
  }

  buffer += "<article class=\"property-subnet-group\">\n  <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_GROUP_DETAILS", {hash:{},data:data}))
    + "</div>\n  <div class=\"option-group\">\n\n   <section class=\"property-control-group\" data-bind=\"true\">\n    <label class=\"left\" for=\"property-dbinstance-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_GROUP_NAME", {hash:{},data:data}))
    + "</label>\n    <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n    <input class=\"input\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-subnet-name\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n  </section>\n\n\n  <section class=\"property-control-group\" data-bind=\"true\">\n    <label class=\"left\" for=\"property-dbinstance-name\" >"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_GROUP_DESCRIPTION", {hash:{},data:data}))
    + "</label>\n    <span class=\"required-input right\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.INSTANCE_REQUIRE", {hash:{},data:data}))
    + "</span>\n    <input class=\"input\"  type=\"text\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" id=\"property-subnet-desc\" data-ignore=\"true\" data-required-rollback=\"true\"/>\n  </section>\n</div>\n\n<div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.SUBNET_GROUP_MEMBER", {hash:{},data:data}))
    + "<span class=\"property-head-num-wrap\">("
    + escapeExpression(((stack1 = (depth0 && depth0.sbCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span>\n<button class=\"icon-edit tooltip add-rule\" data-tooltip=\"Edit subnet group\"></button></div>\n\n";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.azSb), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n\n</article>";
  return buffer;
  }; return Handlebars.template(TEMPLATE); });
(function() {
  define('workspaces/awseditor/property/subnetgroup/view',['../base/view', './template/stack', 'i18n!/nls/lang.js', 'constant', 'Design', "DbSubnetGPopup"], function(PropertyView, template, lang, constant, Design, DbSubnetGPopup) {
    var SubnetGroupView;
    SubnetGroupView = PropertyView.extend({
      events: {
        'change #property-subnet-name': 'setName',
        'change #property-subnet-desc': 'setDesc',
        "click .icon-edit": "editSgb"
      },
      setName: function(e) {
        var $target;
        $target = $(e.currentTarget);
        if ($target.parsley('validate') && MC.aws.aws.checkResName(this.model.get('id'), $target, "Subnet Group")) {
          return this.model.set('name', $target.val());
        }
      },
      setDesc: function(e) {
        var $target;
        $target = $(e.currentTarget);
        if ($target.parsley('validate')) {
          return this.model.set('description', $target.val());
        }
      },
      editSgb: function() {
        var subnetGPopup, that;
        that = this;
        subnetGPopup = new DbSubnetGPopup({
          model: this.model
        });
        this.listenTo(subnetGPopup, 'update', function() {
          that.render();
          this.stopListening(subnetGPopup);
          return subnetGPopup.remove();
        });
        return false;
      },
      render: function() {
        var data, subnets;
        subnets = this.model.connectionTargets("SubnetgAsso").map(function(sb) {
          return {
            name: sb.get("name"),
            cidr: sb.get("cidr"),
            az: sb.parent().get("name")
          };
        });
        data = this.model.toJSON();
        data.sbCount = subnets.length;
        data.azSb = _.groupBy(subnets, "az");
        data.isAppEdit = this.isAppEdit;
        this.$el.html(template(data));
        return this.model.get('name');
      }
    });
    return new SubnetGroupView();
  });

}).call(this);

define('workspaces/awseditor/property/subnetgroup/template/app',['handlebars'], function(Handlebars){ var __TEMPLATE__, TEMPLATE={};

__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <div class=\"option-group-category\">\n            "
    + escapeExpression(((stack1 = (depth0 && depth0.az)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n        </div>\n            ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.subnets), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <dl class=\"dl-vertical sbg-list\">\n                <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n                <dt>("
    + escapeExpression(((stack1 = (depth0 && depth0.cidr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</dt>\n            </dl>\n            ";
  return buffer;
  }

  buffer += "<article class=\"property-app property-subnet-group\">\n    <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_TIT_DETAIL", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n        <dl class=\"dl-vertical\">\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.NAME", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SUBNET_GROUP_NAME", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.DBSubnetGroupName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n            <dt>"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SUBNET_GROUP_DESC", {hash:{},data:data}))
    + "</dt>\n            <dd>"
    + escapeExpression(((stack1 = (depth0 && depth0.DBSubnetGroupDescription)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dd>\n        </dl>\n    </div>\n    <div class=\"option-group-head expand\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.DBINSTANCE_SUBNET_GROUP_MEMBERS", {hash:{},data:data}))
    + "</div>\n    <div class=\"option-group\">\n        ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.azSb), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n</article>";
  return buffer;
  };
TEMPLATE.app=Handlebars.template(__TEMPLATE__);


return TEMPLATE; });
(function() {
  define('workspaces/awseditor/property/subnetgroup/app_view',['../base/view', './template/app', 'i18n!/nls/lang.js', 'constant', 'Design', 'CloudResources'], function(PropertyView, template, lang, constant, Design, CloudResources) {
    var SubnetGroupView;
    SubnetGroupView = PropertyView.extend({
      render: function() {
        var data, _ref;
        if (!this.appModel) {
          return;
        }
        data = this.appModel.toJSON();
        data.azSb = this.getAzSb();
        data.sbCount = ((_ref = this.appModel.get('Subnets')) != null ? _ref.length : void 0) || 0;
        data.name = this.model.get('name');
        this.$el.html(template.app(data));
        return data.name;
      },
      getAzSb: function() {
        var azSb, sbAppResources;
        azSb = {};
        sbAppResources = CloudResources(constant.RESTYPE.SUBNET, Design.instance().region());
        _.each(this.appModel.get('Subnets'), function(sb) {
          var az, sbApp;
          az = sb.SubnetAvailabilityZone.Name;
          sbApp = sbAppResources.get(sb.SubnetIdentifier);
          azSb[az] || (azSb[az] = []);
          return azSb[az].push({
            name: sbApp.get('subnetId'),
            cidr: sbApp.get('cidrBlock')
          });
        });
        azSb = _.map(azSb, function(subnets, az) {
          return {
            az: az,
            subnets: subnets
          };
        });
        return azSb;
      }
    });
    return new SubnetGroupView();
  });

}).call(this);

(function() {
  define('workspaces/awseditor/property/subnetgroup/main',["Design", "../base/main", "./view", './app_view', 'CloudResources', "constant"], function(Design, PropertyModule, view, app_view, CloudResources, constant) {
    var SubnetGroupModule;
    SubnetGroupModule = PropertyModule.extend({
      handleTypes: [constant.RESTYPE.DBSBG],
      initStack: function(uid) {
        this.model = Design.instance().component(uid);
        this.view = view;
        this.view.isAppEdit = false;
        return null;
      },
      initApp: function(uid) {
        var _ref;
        this.model = Design.instance().component(uid);
        this.view = app_view;
        this.view.appModel = (_ref = CloudResources(constant.RESTYPE.DBSBG, Design.instance().region())) != null ? _ref.get(this.model.get('appId')) : void 0;
        this.view.isAppEdit = false;
        return null;
      },
      initAppEdit: function(uid) {
        this.model = Design.instance().component(uid);
        this.view = view;
        this.view.isAppEdit = true;
        return null;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/subviews/PropertyPanel',["../template/TplRightPanel", "../property/base/main", 'StateEditor', "constant", "Design", "OpsModel", "event", 'CloudResources', "backbone", '../property/stack/main', '../property/instance/main', '../property/servergroup/main', '../property/connection/main', '../property/staticsub/main', '../property/missing/main', '../property/sg/main', '../property/sgrule/main', '../property/volume/main', '../property/elb/main', '../property/az/main', '../property/subnet/main', '../property/vpc/main', '../property/rtb/main', '../property/static/main', '../property/cgw/main', '../property/vpn/main', '../property/eni/main', '../property/acl/main', '../property/launchconfig/main', '../property/asg/main', '../property/dbinstance/main', '../property/subnetgroup/main'], function(RightPanelTpl, PropertyBaseModule, stateeditor, CONST, Design, OpsModel, ide_event, CloudResources) {
    var trimmedJqEventHandler;
    ide_event.onLongListen(ide_event.REFRESH_PROPERTY, function() {
      $("#OEPanelRight").trigger("REFRESH");
    });
    ide_event.onLongListen(ide_event.FORCE_OPEN_PROPERTY, function() {
      $("#OEPanelRight").trigger("FORCE_SHOW");
      $("#OEPanelRight").trigger("SHOW_PROPERTY");
    });
    ide_event.onLongListen(ide_event.SHOW_STATE_EDITOR, function(uid) {
      $("#OEPanelRight").trigger("SHOW_STATEEDITOR", [uid]);
    });
    ide_event.onLongListen(ide_event.OPEN_PROPERTY, function(type, uid) {
      $("#OEPanelRight").trigger("OPEN", [type, uid]);
    });
    trimmedJqEventHandler = function(funcName) {
      return function() {
        var trim;
        trim = Array.prototype.slice.call(arguments, 0);
        trim.shift();
        return this[funcName].apply(this, trim);
      };
    };
    return Backbone.View.extend({
      events: {
        "click .HideSecondPanel": "hideSecondPanel",
        "click .option-group-head": "updateRightPanelOption",
        "OPEN_SUBPANEL": trimmedJqEventHandler("showSecondPanel"),
        "HIDE_SUBPANEL": trimmedJqEventHandler("immHideSecondPanel"),
        "OPEN_SUBPANEL_IMM": trimmedJqEventHandler("immShowSecondPanel"),
        "OPEN": trimmedJqEventHandler("openPanel"),
        "SHOW_STATEEDITOR": "showStateEditor",
        "FORCE_SHOW": "forceShow",
        "REFRESH": "refresh",
        "SHOW_PROPERTY": "switchToProperty",
        "click #btn-switch-property": "switchToProperty",
        "click #btn-switch-state": "showStateEditor"
      },
      initialize: function(options) {
        _.extend(this, options);
        return this.render();
      },
      render: function() {
        this.setElement(this.parent.$el.find(".OEPanelRight").html(RightPanelTpl()));
        this.$el.toggleClass("hidden", this.__rightPanelHidden || false);
        if (this.__backup) {
          PropertyBaseModule.restore(this.__backup);
          this.restoreAccordion(this.__backup.activeModuleType, this.__backup.activeModuleId);
        } else {
          this.openPanel();
        }
        if (this.__showingState) {
          this.showStateEditor();
        }
      },
      backup: function() {
        this.$el.empty().attr("id", "");
        this.__backup = PropertyBaseModule.snapshot();
      },
      recover: function() {
        this.$el.attr("id", "OEPanelRight");
        this.render();
      },
      toggleRightPanel: function() {
        this.__rightPanelHidden = this.$el.toggleClass("hidden").hasClass("hidden");
        return null;
      },
      showSecondPanel: function(type, id) {
        this.$el.find(".HideSecondPanel").data("tooltip", "Back to " + this.$el.find(".property-title").text());
        this.$el.find(".property-second-panel").show().animate({
          left: "0%"
        }, 200);
        this.$el.find(".property-first-panel").animate({
          left: "-30%"
        }, 200, (function(_this) {
          return function() {};
        })(this));
        return this.$el.find(".property-first-panel").hide();
      },
      immShowSecondPanel: function(type, id) {
        this.$el.find(".HideSecondPanel").data("tooltip", "Back to " + this.$el.find(".property-title").text());
        this.$el.find(".property-second-panel").show().css({
          left: "0%"
        });
        this.$el.find(".property-first-panel").css({
          left: "-30%",
          display: "none"
        });
        return null;
      },
      immHideSecondPanel: function() {
        this.$el.find(".property-second-panel").css({
          display: "none",
          left: "100%"
        }).children(".scroll-wrap").children(".property-content").empty();
        this.$el.find(".property-first-panel").css({
          display: "block",
          left: "0px"
        });
        return null;
      },
      hideSecondPanel: function() {
        var $panel;
        $panel = this.$el.find(".property-second-panel");
        $panel.animate({
          left: "100%"
        }, 200, (function(_this) {
          return function() {
            return _this.$el.find(".property-second-panel").hide();
          };
        })(this));
        this.$el.find(".property-first-panel").show().animate({
          left: "0%"
        }, 200);
        PropertyBaseModule.onUnloadSubPanel();
        return false;
      },
      updateRightPanelOption: function(event) {
        var $target, $toggle, comp, hide, status;
        $toggle = $(event.currentTarget);
        if ($toggle.is("button") || $toggle.is("a")) {
          return;
        }
        hide = $toggle.hasClass("expand");
        $target = $toggle.next();
        if (hide) {
          $target.css("display", "block").slideUp(200);
        } else {
          $target.slideDown(200);
        }
        $toggle.toggleClass("expand");
        if (!$toggle.parents(".property-first-panel").length) {
          return;
        }
        this.__optionStates = this.__optionStates || {};
        comp = PropertyBaseModule.activeModule().uid || "Stack";
        status = _.map(this.$el.find('.property-first-panel').find('.option-group-head'), function(el) {
          return $(el).hasClass("expand");
        });
        this.__optionStates[comp] = status;
        comp = this.workspace.design.component(comp);
        if (comp) {
          this.__optionStates[comp.type] = status;
        }
        return false;
      },
      openPanel: function(type, uid) {
        var component, design, error, tab_type;
        if (this.__lastOpenType === type && this.__lastOpenId === uid && this.__showingState) {
          return;
        }
        this.__lastOpenType = type;
        this.__lastOpenId = uid;
        $(document.activeElement).filter("input, textarea").blur();
        this.immHideSecondPanel();
        design = this.workspace.design;
        if (!design) {
          return;
        }
        if (uid) {
          component = design.component(uid);
          if (component && component.type === type && design.modeIsApp() && component.get('appId') && !component.hasAppResource()) {
            type = component.type || 'Missing_Resource';
          }
        } else {
          type = "Stack";
        }
        if (design.modeIsApp() || design.modeIsAppView()) {
          tab_type = PropertyBaseModule.TYPE.App;
        } else if (design.modeIsStack()) {
          tab_type = PropertyBaseModule.TYPE.Stack;
        } else {
          if (!component || component.get("appId")) {
            tab_type = PropertyBaseModule.TYPE.AppEdit;
          } else {
            tab_type = PropertyBaseModule.TYPE.Stack;
          }
        }
        try {
          PropertyBaseModule.load(type, uid, tab_type);
        } catch (_error) {
          error = _error;
          console.error(error);
        }
        this.restoreAccordion(type, uid);
        this.updateStateSwitcher(type, uid);
        this.$el.toggleClass("state", false);
        this.__showingState = false;
      },
      restoreAccordion: function(type, uid) {
        var el, idx, states, _i, _len, _ref, _ref1;
        if (!this.__optionStates) {
          return;
        }
        states = this.__optionStates[uid];
        if (!states) {
          states = this.__optionStates[type];
        }
        if (states) {
          _ref = this.$el.find('.property-first-panel').find('.option-group-head');
          for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
            el = _ref[idx];
            $(el).toggleClass("expand", states[idx]);
          }
          _ref1 = this.__optionStates;
          for (uid in _ref1) {
            states = _ref1[uid];
            if (!uid || this.workspace.design.component(uid) || uid.indexOf("i-") === 0 || uid === "Stack") {
              continue;
            }
            delete this.__optionStates[uid];
          }
        }
      },
      updateStateSwitcher: function(type, uid) {
        var count, design, supports, _ref;
        supports = false;
        design = this.workspace.design;
        if (type === "component_server_group" || type === CONST.RESTYPE.LC || type === CONST.RESTYPE.INSTANCE) {
          if (Design.instance().attributes.agent.enabled) {
            supports = true;
            $('#state-editor-body').trigger('SAVE_STATE');
          } else {
            supports = false;
          }
          if (design.modeIsApp()) {
            if (type === "component_server_group") {
              supports = false;
            }
            if (type === CONST.RESTYPE.LC) {
              supports = this.workspace.opsModel.testState(OpsModel.State.Stopped);
            }
          }
        }
        this.$el.toggleClass("no-state", !supports);
        if (supports) {
          count = design.component(uid) || design.component(PropertyBaseModule.activeModule().model.attributes.uid);
          count = (count != null ? (_ref = count.get("state")) != null ? _ref.length : void 0 : void 0) || 0;
          $('#btn-switch-state').find("b").text("(" + count + ")");
        }
        return supports;
      },
      forceShow: function() {
        var self;
        if (this.__rightPanelHidden) {
          this.__rightPanelHidden = false;
          this.$el.toggleClass("no-transition", true).removeClass("hidden");
          self = this;
          setTimeout(function() {
            return self.$el.removeClass("no-transition");
          }, 100);
        }
      },
      refresh: function() {
        var active;
        active = PropertyBaseModule.activeModule() || {};
        this.openPanel(active.handle, active.uid);
      },
      switchToProperty: function() {
        this.__showingState = false;
        this.$el.toggleClass("state", false);
        this.refresh();
      },
      showStateEditor: function(jqueryEvent, uid) {
        var allCompData, comp, compData, design, resId, _ref;
        if ((jqueryEvent != null ? jqueryEvent.type : void 0) === "SHOW_STATEEDITOR" && this.__showingState) {
          return false;
        }
        if (!uid) {
          uid = PropertyBaseModule.activeModule().uid;
        }
        design = this.workspace.design;
        comp = design.component(uid) || ((_ref = CloudResources(CONST.RESTYPE.INSTANCE, Design.instance().get('region')).findWhere({
          id: uid
        })) != null ? _ref.toJSON() : void 0);
        if (!comp) {
          return;
        }
        if (!comp.type) {
          comp.type = CONST.RESTYPE.INSTANCE;
        }
        if (!this.updateStateSwitcher(comp.type, uid)) {
          this.openPanel(comp.type, uid);
          return;
        }
        this.__showingState = true;
        this.$el.toggleClass("state", true);
        if (design.modeIsApp()) {
          uid = Design.modelClassForType(CONST.RESTYPE.INSTANCE).getEffectiveId(uid).uid;
        }
        allCompData = design.serialize().component;
        compData = allCompData[uid];
        if (comp && comp.id.indexOf('i-') === 0) {
          resId = comp.id;
        }
        stateeditor.loadModule(allCompData, uid, resId);
        this.forceShow();
      }
    });
  });

}).call(this);

define('workspaces/awseditor/template/TplOpsEditor',['handlebars'], function(Handlebars){ var __TEMPLATE__, TEMPLATE={"toolbar":{},"confirm":{},"export":{},"modal":{}};

__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<button class=\"btn-toolbar tooltip icon-export-png toolbar-btn-primary\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.EXPORT_AS_PNG", {hash:{},data:data}))
    + "' data-analytics-plus=\"export_vis_png\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.EXPORT_AS_PNG", {hash:{},data:data}))
    + "</button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnActionPng=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<button class=\"btn-toolbar icon-zoom-in tooltip\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_ZOOM_IN", {hash:{},data:data}))
    + "'></button>\n<button class=\"btn-toolbar icon-zoom-out seperator tooltip\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_ZOOM_OUT", {hash:{},data:data}))
    + "'></button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnZoom=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"selectbox btn-toolbar toolbar-line-style seperator\">\n  <button class=\"selection tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_SG_LINE_STYLE", {hash:{},data:data}))
    + "\"></button>\n  <ul class=\"dropdown\">\n    <li class='item' data-id=\"0\"><span class=\"icon-straight\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.LBL_LINESTYLE_STRAIGHT", {hash:{},data:data}))
    + "</span></li>\n    <li class='item' data-id=\"1\"><span class=\"icon-elbow\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.LBL_LINESTYLE_ELBOW", {hash:{},data:data}))
    + "</span></li>\n    <li class='item' data-id=\"2\"><span class=\"icon-bezier-q\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.LBL_LINESTYLE_CURVE", {hash:{},data:data}))
    + "</span></li>\n  </ul>\n</div>\n<button class=\"btn-toolbar icon-hide-sg tooltip\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.LBL_LINESTYLE_HIDE_SG", {hash:{},data:data}))
    + "'></button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnLinestyle=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<button class=\"btn-toolbar icon-play tooltip toolbar-btn-primary runApp\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_BTN_RUN_STACK", {hash:{},data:data}))
    + "'>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.BTN_RUN_STACK", {hash:{},data:data}))
    + "</button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnRunStack=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<button class=\"btn-toolbar tooltip icon-save\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_SAVE_STACK", {hash:{},data:data}))
    + "'></button>\n<button class=\"btn-toolbar icon-delete tooltip seperator\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_DELETE_STACK", {hash:{},data:data}))
    + "'></button>\n<button class=\"btn-toolbar tooltip icon-duplicate\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_DUPLICATE_STACK", {hash:{},data:data}))
    + "'></button>\n<button class=\"btn-toolbar icon-new-stack tooltip seperator\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_CREATE_STACK", {hash:{},data:data}))
    + "'></button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnStackOps=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"selectbox btn-toolbar seperator\">\n  <button class=\"selection tooltip icon-send\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.EXPORT", {hash:{},data:data}))
    + "'></button>\n  <ul class=\"dropdown\">\n    <li data-analytics-plus=\"export_png\" class=\"icon-export-png\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.EXPORT_AS_PNG", {hash:{},data:data}))
    + "</li>\n    <li data-analytics-plus=\"export_json\" class=\"icon-export-json\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.EXPORT_AS_JSON", {hash:{},data:data}))
    + "</li>\n    <li data-analytics-plus=\"cloudformation\" class=\"icon-toolbar-cloudformation\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.EXPORT_AS_CF", {hash:{},data:data}))
    + "</li>\n  </ul>\n</div>";
  return buffer;
  };
TEMPLATE.toolbar.BtnExport=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<button class=\"tooltip btn-toolbar icon-update-app toolbar-btn-primary\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_UPDATE_APP", {hash:{},data:data}))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.EDIT_APP", {hash:{},data:data}))
    + "</button>\n<button class=\"tooltip btn-toolbar icon-apply-app toolbar-btn-primary\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_SAVE_UPDATE_APP", {hash:{},data:data}))
    + "\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.APPLY_EDIT", {hash:{},data:data}))
    + "</button>\n<button class=\"tooltip btn-toolbar icon-cancel-update-app seperator\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_CANCEL_UPDATE_APP", {hash:{},data:data}))
    + "\"></button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnEditApp=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression;


  buffer += "<button class=\"tooltip btn-toolbar icon-stop\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_STOP_APP", {hash:{},data:data}))
    + "\"></button>\n<button class=\"tooltip btn-toolbar icon-play startApp\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_START_APP", {hash:{},data:data}))
    + "\"><span style=\"display: none\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.START_APP", {hash:{},data:data}))
    + "</span></button>\n<button class=\"btn-toolbar tooltip icon-terminate seperator\" data-tooltip=\"";
  stack1 = helpers.i18n.call(depth0, "TOOLBAR.TIP_TERMINATE_APP", {hash:{},data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"></button>\n<button class=\"btn-toolbar tooltip icon-forget-app seperator\" data-tooltip=\"";
  stack1 = helpers.i18n.call(depth0, "TOOLBAR.TIP_FORGET_APP", {hash:{},data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"></button>\n<button class=\"btn-toolbar tooltip icon-save-app seperator\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_SAVE_APP_TO_STACK", {hash:{},data:data}))
    + "'></button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnAppOps=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<button class=\"btn-toolbar icon-export-png tooltip seperator\" data-analytics-plus=\"export_png\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.EXPORT_AS_PNG", {hash:{},data:data}))
    + "'></button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnPng=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<button class=\"btn-toolbar tooltip icon-refresh seperator\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_REFRESH_REOURCES", {hash:{},data:data}))
    + "\"></button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnReloadRes=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, self=this, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  
  return " on";
  }

  buffer += "<label class=\"switch toolbar-visual-ops-switch tooltip";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.stateOn), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TIP_CUSTOM_USER_DATA", {hash:{},data:data}))
    + "\">\n    <span class=\"switch-label\" data-on=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TOGGLE_VISUALOPS_ON", {hash:{},data:data}))
    + "\" data-off=\""
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.TOGGLE_VISUALOPS_OFF", {hash:{},data:data}))
    + "\"></span>\n    <span class=\"switch-handle\"></span>\n</label>";
  return buffer;
  };
TEMPLATE.toolbar.BtnSwitchStates=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<button class=\"icon-reload tooltip btn btn-blue reload-states\" data-original=\"Reload States\" data-disabled=\"Initiating…\"  data-tooltip=\"Instantly rerun all states in this app.\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.RELOAD_STATES", {hash:{},data:data}))
    + "</button>";
  return buffer;
  };
TEMPLATE.toolbar.BtnReloadStates=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"modal-text-wraper\">\n    <div class=\"modal-center-align-helper\">\n        <div class=\"modal-text-major\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CONFIRM_ENABLE_STATE", {hash:{},data:data}))
    + "</div>\n    </div>\n</div>";
  return buffer;
  };
TEMPLATE.confirm.enableState=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n            <div class=\"modal-text-highlight\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.EXPORT_CLOUDFORMATION_WARNNING", {hash:{},data:data}))
    + "</div>";
  return buffer;
  }

  buffer += "<div class=\"modal-text-wraper\">\n    <div class=\"modal-center-align-helper\">\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasCustomOG), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <div class=\"modal-text-minor\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_EXPORT_CF_INFO", {hash:{},data:data}))
    + "</div>\n    </div>\n</div>\n<div class=\"stack-validation\">\n    <details open style=\"display:none;\">\n        <summary>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.STACK_VALIDATION", {hash:{},data:data}))
    + "</summary>\n        <div id=\"stack-run-validation-container\"></div>\n    </details>\n    <div class=\"nutshell\">:<label></label></div>\n    <div class=\"validating\">\n        <div class=\"loading-spinner loading-spinner-small\"></div>\n        <p>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.VALIDATING_STACK", {hash:{},data:data}))
    + "</p>\n    </div>\n</div>\n<div style=\"padding-top:20px;text-align:right;\">\n    <a class=\"btn btn-blue disabled\">"
    + escapeExpression(helpers.i18n.call(depth0, "HEAD_INFO_LOADING", {hash:{},data:data}))
    + "</a>\n    <button class=\"btn modal-close btn-silver\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_BTN_CANCEL", {hash:{},data:data}))
    + "</button>\n</div>";
  return buffer;
  };
TEMPLATE.export.CF=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<div class=\"modal-text-wraper\">\n    <div class=\"modal-center-align-helper\" style=\"padding:40px 20px;\">\n        <div class=\"modal-text-major\"></div>\n        <div class=\"modal-text-minor\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_BODY_EXPORT_AS_JSON", {hash:{},data:data}))
    + "</div>\n    </div>\n</div>\n<div class=\"modal-footer\">\n    <a class=\"btn btn-blue\" href=\""
    + escapeExpression(((stack1 = (depth0 && depth0.data)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" target=\"_blank\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_BTN_DOWNLOAD", {hash:{},data:data}))
    + "</a>\n    <button id=\"tpl-cancel\" class=\"btn modal-close btn-silver\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_BTN_CANCEL", {hash:{},data:data}))
    + "</button>\n</div>";
  return buffer;
  };
TEMPLATE.export.JSON=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"loading-spinner\"></div>\n<section style=\"margin:10px 10px 0;max-height:420px;overflow:hidden;text-align:center;display:none;\"></section>\n<div class=\"modal-footer\">\n    <a class=\"btn btn-blue\" style=\"display: inline-block;\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.LBL_DOWNLOAD", {hash:{},data:data}))
    + "</a>\n    <button class=\"btn modal-close btn-silver\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.LBL_CANCEL", {hash:{},data:data}))
    + "</button>\n</div>";
  return buffer;
  };
TEMPLATE.export.PNG=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"modal-text-wraper\">\n    <div class=\"modal-center-align-helper\">\n        <div class=\"modal-text-major\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CANCEL_UPDATE_CONFIRM", {hash:{},data:data}))
    + "</div>\n        <div class=\"modal-text-major\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.DISCARD_UPDATE_CHANGE", {hash:{},data:data}))
    + "</div>\n    </div>\n</div>";
  return buffer;
  };
TEMPLATE.modal.cancelUpdate=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <div id=\"replace_stack\" style=\"padding: 10px 0\">\n            <div class=\"radio\">\n                <input id=\"radio-replace-stack\" type=\"radio\" name=\"save-stack-type\" value=\"replace\" checked>\n                <label for=\"radio-replace-stack\"></label>\n            </div>\n            <label class=\"modal-text-minor\" for=\"radio-replace-stack\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_REPLACE_STACK", {hash:{},data:data}))
    + "</label>\n            <div style=\"padding: 10px 22px\" class=\"radio-instruction\">\n                "
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_REPLACE_STACK_INTRO", {hash:{},data:data}))
    + " \""
    + escapeExpression(((stack1 = (depth0 && depth0.input)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" "
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_REPLACE_STACK_INTRO_END", {hash:{},data:data}))
    + "\n            </div>\n        </div>\n        <div id=\"save_new_stack\">\n            <div class=\"radio\">\n                <input id=\"radio-new-stack\" type=\"radio\" name=\"save-stack-type\">\n                <label for=\"radio-new-stack\"></label>\n            </div>\n            <label class=\"modal-text-minor\" for=\"radio-new-stack\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_SAVE_NEW_STACK", {hash:{},data:data}))
    + "</label>\n            <div style=\"padding: 10px 22px\" class=\"radio-instruction hide\">\n                <p>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_SAVE_STACK_INSTRUCTION", {hash:{},data:data}))
    + "</p>\n                <input class=\"input\" id=\"modal-input-value\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.stackName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" type=\"text\" style=\"width: 400px\"/>\n                <div id=\"stack-name-exist\" class=\"hide\" style=\"color: #ec3c38\">\n                  "
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_STACK_NAME_ERROR", {hash:{},data:data}))
    + "</div>\n            </div>\n        </div>\n        ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <div id=\"name_new_stack\">\n            <input id=\"radio-new-stack\" type=\"hidden\" name=\"save-stack-type\" checked>\n            <div style=\"padding: 10px 22px\" class=\"radio-instruction\">\n                <p>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_SAVE_STACK_INSTRUCTION", {hash:{},data:data}))
    + "</p>\n                <input class=\"input\" id=\"modal-input-value\" value=\""
    + escapeExpression(((stack1 = (depth0 && depth0.stackName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" type=\"text\" style=\"width: 400px\"/>\n                <div id=\"stack-name-exist\" class=\"hide\" style=\"color: #ec3c38\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_STACK_NAME_ERROR", {hash:{},data:data}))
    + "</div>\n            </div>\n        </div>\n        ";
  return buffer;
  }

  buffer += "<p class=\"modal-text-minor\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_INTRO_1", {hash:{},data:data}))
    + "</p>\n<p class=\"modal-text-minor\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.POP_INTRO_2", {hash:{},data:data}))
    + "</p>\n<div class=\"modal-center-align-helper\">\n    <div class=\"modal-control-group\">\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.originStackExist), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n</div>";
  return buffer;
  };
TEMPLATE.saveAppToStack=Handlebars.template(__TEMPLATE__);


return TEMPLATE; });
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/subviews/Toolbar',["OpsModel", "../template/TplOpsEditor", "ThumbnailUtil", "JsonExporter", "ApiRequest", "i18n!/nls/lang.js", "UI.modalplus", 'kp_dropdown', "ResDiff", 'constant', 'event', 'TaGui', "CloudResources", "AppAction", "UI.notification", "backbone"], function(OpsModel, OpsEditorTpl, Thumbnail, JsonExporter, ApiRequest, lang, Modal, kpDropdown, ResDiff, constant, ide_event, TA, CloudResources, appAction) {
    var API_HOST, API_URL, hosts, location;
    location = window.location;
    if (/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/.exec(location.hostname)) {
      console.error("VisualOps IDE can not be browsed with IP address.");
      return;
    }
    hosts = location.hostname.split(".");
    if (hosts.length >= 3) {
      API_HOST = hosts[hosts.length - 2] + "." + hosts[hosts.length - 1];
    } else {
      API_HOST = location.hostname;
    }
    API_URL = window.location.protocol + "//api." + API_HOST + "/v1/apps/";
    return Backbone.View.extend({
      events: {
        "click .icon-save": "saveStack",
        "click .icon-delete": "deleteStack",
        "click .icon-duplicate": "duplicateStack",
        "click .icon-new-stack": "createStack",
        "click .icon-zoom-in": "zoomIn",
        "click .icon-zoom-out": "zoomOut",
        "click .icon-export-png": "exportPNG",
        "click .icon-export-json": "exportJson",
        "click .icon-toolbar-cloudformation": "exportCF",
        "click .runApp": 'runStack',
        "OPTION_CHANGE .toolbar-line-style": "setTbLineStyle",
        "click .icon-hide-sg": "toggleSgLine",
        "click .icon-stop": "stopApp",
        "click .startApp": "startApp",
        "click .icon-terminate": "terminateApp",
        "click .icon-forget-app": "forgetApp",
        "click .icon-refresh": "refreshResource",
        "click .icon-update-app": "switchToAppEdit",
        "click .icon-apply-app": "applyAppEdit",
        "click .icon-cancel-update-app": "cancelAppEdit",
        'click .toolbar-visual-ops-switch': 'opsOptionChanged',
        'click .reload-states': "reloadState",
        'click .icon-save-app': 'appToStack'
      },
      initialize: function(options) {
        var attr, btn, btns, opsModel, that, tpl, _i, _len;
        _.extend(this, options);
        opsModel = this.workspace.opsModel;
        if (opsModel.isStack()) {
          btns = ["BtnRunStack", "BtnStackOps", "BtnZoom", "BtnExport", "BtnLinestyle", "BtnSwitchStates"];
        } else {
          btns = ["BtnEditApp", "BtnAppOps", "BtnZoom", "BtnPng", "BtnLinestyle", "BtnReloadRes"];
        }
        tpl = "";
        for (_i = 0, _len = btns.length; _i < _len; _i++) {
          btn = btns[_i];
          attr = {
            stateOn: this.workspace.design.get("agent").enabled
          };
          tpl += OpsEditorTpl.toolbar[btn](attr);
        }
        if (this.workspace.opsModel.isApp() && this.workspace.design.attributes.agent.enabled) {
          tpl += OpsEditorTpl.toolbar.BtnReloadStates();
        }
        this.setElement(this.parent.$el.find(".OEPanelTop").html(tpl));
        that = this;
        setTimeout(function() {
          return that.updateTbBtns();
        }, 1000);
        this.updateZoomButtons();
      },
      updateTbBtns: function() {
        var ami, hasState, isAppEdit, opsModel, running, stopped;
        opsModel = this.workspace.opsModel;
        this.$el.children(".toolbar-line-style").children(".dropdown").children().eq(parseInt(localStorage.getItem("canvas/lineStyle"), 10) || 2).click();
        if (opsModel.isApp()) {
          isAppEdit = this.workspace.isAppEditMode && this.workspace.isAppEditMode();
          this.$el.children(".icon-update-app").toggle(!isAppEdit);
          this.$el.children(".icon-apply-app, .icon-cancel-update-app").toggle(isAppEdit);
          if (isAppEdit) {
            this.$el.children(".icon-terminate, .icon-forget-app, .icon-stop, .icon-play, .icon-refresh, .icon-save-app, .icon-reload").hide();
            this.$el.find(".icon-refresh").hide();
          } else {
            running = opsModel.testState(OpsModel.State.Running);
            stopped = opsModel.testState(OpsModel.State.Stopped);
            this.$el.children(".icon-terminate, .icon-forget-app, .icon-refresh, .icon-save-app, .icon-reload").show();
            this.$el.children(".icon-stop").toggle(opsModel.get("stoppable") && running);
            this.$el.children(".icon-play").toggle(stopped).toggleClass("toolbar-btn-primary seperator", opsModel.testState(OpsModel.State.Stopped)).find("span").toggle(stopped);
            this.$el.children('.icon-update-app').toggle(!stopped);
            this.$el.find(".icon-refresh").toggle(running);
            ami = [].concat(this.workspace.design.componentsOfType(constant.RESTYPE.INSTANCE), this.workspace.design.componentsOfType(constant.RESTYPE.LC));
            hasState = _.find(ami, function(comp) {
              var _ref;
              return comp && (((_ref = comp.attributes.state) != null ? _ref.length : void 0) > 0);
            });
            this.$el.find('.reload-states').toggle(!!hasState);
          }
        }
        if (this.__saving) {
          this.$el.children(".icon-save").attr("disabled", "disabled");
        } else {
          this.$el.children(".icon-save").removeAttr("disabled");
        }
        this.updateZoomButtons();
      },
      setTbLineStyle: function(ls, attr) {
        localStorage.setItem("canvas/lineStyle", attr);
        if (this.parent.canvas) {
          this.parent.canvas.updateLineStyle();
        }
      },
      toggleSgLine: function() {
        var sgBtn, show;
        sgBtn = $(".icon-hide-sg");
        show = sgBtn.hasClass("selected");
        if (show) {
          sgBtn.data("tooltip", lang.TOOLBAR.LBL_LINESTYLE_HIDE_SG).removeClass("selected");
        } else {
          sgBtn.data("tooltip", lang.TOOLBAR.LBL_LINESTYLE_SHOW_SG).addClass("selected");
        }
        this.parent.canvas.toggleSgLine(show);
      },
      saveStack: function(evt) {
        var newJson, self;
        $(evt.currentTarget).attr("disabled", "disabled");
        self = this;
        this.__saving = true;
        newJson = this.workspace.design.serialize();
        return Thumbnail.generate(this.parent.getSvgElement())["catch"](function() {
          return null;
        }).then(function(thumbnail) {
          self.workspace.opsModel.save(newJson, thumbnail).then(function() {
            self.__saving = false;
            $(evt.currentTarget).removeAttr("disabled");
            return notification("info", sprintf(lang.NOTIFY.ERR_SAVE_SUCCESS, newJson.name));
          }, function(err) {
            var message;
            self.__saving = false;
            $(evt.currentTarget).removeAttr("disabled");
            if (err.error === 252) {
              message = lang.NOTIFY.ERR_SAVE_FAILED_NAME;
            } else {
              message = sprintf(lang.NOTIFY.ERR_SAVE_FAILED, newJson.name);
            }
            return notification("error", message);
          });
        });
      },
      deleteStack: function() {
        return appAction.deleteStack(this.workspace.opsModel.cid, this.workspace.design.get("name"));
      },
      createStack: function() {
        return App.createOps(this.workspace.opsModel.get("region"));
      },
      duplicateStack: function() {
        var newOps;
        newOps = App.model.createStackByJson(this.workspace.design.serialize({
          duplicateStack: true
        }));
        App.openOps(newOps);
      },
      zoomIn: function() {
        this.parent.canvas.zoomIn();
        return this.updateZoomButtons();
      },
      zoomOut: function() {
        this.parent.canvas.zoomOut();
        return this.updateZoomButtons();
      },
      updateZoomButtons: function() {
        var scale;
        scale = this.parent.canvas ? this.parent.canvas.scale() : 1;
        if (scale <= 1) {
          this.$el.find(".icon-zoom-in").attr("disabled", "disabled");
        } else {
          this.$el.find(".icon-zoom-in").removeAttr("disabled");
        }
        if (scale >= 1.6) {
          this.$el.find(".icon-zoom-out").attr("disabled", "disabled");
        } else {
          this.$el.find(".icon-zoom-out").removeAttr("disabled");
        }
      },
      exportPNG: function() {
        var design, modal, name;
        modal = new Modal({
          title: lang.IDE.TITLE_EXPORT_PNG,
          template: OpsEditorTpl["export"].PNG(),
          width: "470",
          disableFooter: true,
          compact: true,
          onClose: function() {
            modal = null;
          }
        });
        design = this.workspace.design;
        name = design.get("name");
        Thumbnail.exportPNG(this.parent.getSvgElement(), {
          isExport: true,
          createBlob: true,
          name: name,
          id: design.get("id"),
          onFinish: function(data) {
            var btn;
            if (!modal) {
              return;
            }
            modal.tpl.find(".loading-spinner").remove();
            modal.tpl.find("section").show().prepend("<img style='max-height:100%;display:inline-block;' src='" + data.image + "' />");
            btn = modal.tpl.find("a.btn-blue").click(function() {
              return modal.close();
            });
            if (data.blob) {
              btn.click(function() {
                JsonExporter.download(data.blob, "" + name + ".png");
                return false;
              });
            } else {
              btn.attr({
                href: data.image,
                download: "" + name + ".png"
              });
            }
            modal.resize();
          }
        });
      },
      exportJson: function() {
        var data, date, design, name, username;
        design = this.workspace.design;
        username = App.user.get('username');
        date = MC.dateFormat(new Date(), "yyyy-MM-dd");
        name = [design.get("name"), username, date].join("-");
        data = JsonExporter.exportJson(design.serialize(), "" + name + ".json");
        if (data) {
          return new Modal({
            title: lang.TOOLBAR.EXPORT_AS_JSON,
            template: OpsEditorTpl["export"].JSON(data),
            width: "470",
            disableFooter: true,
            compact: true
          });
        }
      },
      exportCF: function() {
        var ApiPromise, TAPromise, components, design, hasCustomOG, modal, name;
        design = this.workspace.design;
        hasCustomOG = false;
        components = design.serialize({
          usage: 'runStack'
        }).component;
        _.each(components, function(e) {
          if (e.type === constant.RESTYPE.DBOG) {
            return hasCustomOG = true;
          }
        });
        modal = new Modal({
          title: lang.TOOLBAR.POP_EXPORT_CF,
          template: OpsEditorTpl["export"].CF({
            hasCustomOG: hasCustomOG
          }),
          width: "470",
          disableFooter: true
        });
        name = design.get("name");
        TAPromise = TA.loadModule('stack');
        ApiPromise = ApiRequest("stack_export_cloudformation", {
          region: design.get("region"),
          stack: design.serialize()
        });
        return Q.spread([TAPromise, ApiPromise], function(taError, apiReturn) {
          var btn;
          if (modal != null) {
            modal.resize();
          }
          btn = modal.tpl.find("a.btn-blue").text(lang.TOOLBAR.POP_BTN_EXPORT_CF).removeClass("disabled");
          JsonExporter.genericExport(btn, apiReturn, "" + name + ".json");
          btn.click(function() {
            return modal.close();
          });
        }, function(err) {
          if (modal != null) {
            modal.resize();
          }
          modal.tpl.find("a.btn-blue").text(lang.TOOLBAR.POP_BTN_EXPORT_CF);
          if (err.error) {
            notification("error", sprintf(lang.NOTIFY.FAIL_TO_EXPORT_TO_CLOUDFORMATION, err.error));
          }
        });
      },
      reloadState: function(event) {
        var $target, app_id, data;
        $target = $(event.currentTarget);
        if ($target.hasClass('disabled')) {
          return false;
        }
        $target.toggleClass('disabled').html($target.attr('data-disabled'));
        app_id = Design.instance().get('id');
        data = {
          'encoded_user': App.user.get('usercode'),
          'token': App.user.get('defaultToken')
        };
        return $.ajax({
          url: API_URL + app_id,
          method: "POST",
          data: JSON.stringify(data),
          dataType: 'json',
          statusCode: {
            200: function() {
              notification('info', lang.NOTIFY.RELOAD_STATE_SUCCESS);
              return ide_event.trigger(ide_event.REFRESH_PROPERTY);
            },
            401: function() {
              return notification('error', lang.NOTIFY.RELOAD_STATE_INVALID_REQUEST);
            },
            404: function() {
              return notification('error', lang.NOTIFY.RELOAD_STATE_NETWORKERROR);
            },
            429: function() {
              return notification('error', lang.NOTIFY.RELOAD_STATE_NOT_READY);
            },
            500: function() {
              return notification('error', lang.NOTIFY.RELOAD_STATE_INTERNAL_SERVER_ERROR);
            }
          },
          error: function() {
            return console.log('Error while Reload State');
          },
          success: function() {
            return console.debug('Reload State Success!');
          }
        }).always(function() {
          return window.setTimeout(function() {
            return $target.removeClass('disabled').html($target.attr('data-original'));
          });
        });
      },
      runStack: function(event) {
        var that;
        that = this;
        if ($(event.currentTarget).attr('disabled')) {
          return false;
        }
        return appAction.showPayment().then(function(result) {
          var paymentModal, paymentUpdate;
          paymentUpdate = result.result;
          paymentModal = result.modal;
          return that.__runStack(paymentUpdate, paymentModal);
        });
      },
      __runStack: function(paymentUpdate, paymentModal) {
        var appNameDom, checkAppNameRepeat, cost, costString, paymentState, self, that, _ref;
        that = this;
        paymentState = App.user.get('paymentState');
        if (paymentModal) {
          this.modal = paymentModal;
          this.modal.setTitle(lang.IDE.RUN_STACK_MODAL_TITLE).setWidth('665px').setContent(MC.template.modalRunStack({
            paymentState: paymentState,
            paymentUpdate: paymentUpdate
          })).compact().find('.modal-footer').show();
        } else {
          this.modal = new Modal({
            title: lang.IDE.RUN_STACK_MODAL_TITLE,
            template: MC.template.modalRunStack({
              paymentState: paymentState
            }),
            disableClose: true,
            width: '665px',
            compact: true,
            confirm: {
              text: App.user.hasCredential() ? lang.IDE.RUN_STACK_MODAL_CONFIRM_BTN : lang.IDE.RUN_STACK_MODAL_NEED_CREDENTIAL,
              disabled: true
            }
          });
        }
        this.renderKpDropdown(this.modal);
        cost = Design.instance().getCost();
        this.modal.find('.modal-input-value').val(this.workspace.opsModel.get("name"));
        costString = "$" + cost.totalFee;
        if ((_ref = Design.instance().region()) === 'cn-north-1') {
          costString = "￥" + cost.totalFee;
        }
        this.modal.find("#label-total-fee").find('b').text(costString);
        this.modal.find("#label-visualops-fee").find('b').text("$" + cost.visualOpsFee);
        TA.loadModule('stack').then((function(_this) {
          return function() {
            var _ref1;
            _this.modal.resize();
            return (_ref1 = _this.modal) != null ? _ref1.toggleConfirm(false) : void 0;
          };
        })(this));
        appNameDom = this.modal.tpl.find('#app-name');
        checkAppNameRepeat = this.checkAppNameRepeat.bind(this);
        appNameDom.keyup(function() {
          return checkAppNameRepeat(appNameDom.val());
        });
        self = this;
        this.modal.on('confirm', (function(_this) {
          return function() {
            var appNameRepeated;
            _this.hideError();
            if (!App.user.hasCredential()) {
              App.showSettings(App.showSettings.TAB.Credential);
              return false;
            }
            appNameRepeated = _this.checkAppNameRepeat(appNameDom.val());
            if (!_this.defaultKpIsSet() || appNameRepeated) {
              return false;
            }
            _this.modal.tpl.find(".btn.modal-confirm").attr("disabled", "disabled");
            _this.json = _this.workspace.design.serialize({
              usage: 'runStack'
            });
            _this.json.usage = $("#app-usage-selectbox").find(".dropdown .item.selected").data('value');
            _this.json.name = appNameDom.val();
            return _this.workspace.opsModel.run(_this.json, appNameDom.val()).then(function(ops) {
              self.modal.close();
              return App.openOps(ops);
            }, function(err) {
              var error;
              self.modal.close();
              error = err.awsError ? err.error + "." + err.awsError : " " + err.error + " : " + (err.result || err.msg);
              return notification('error', sprintf(lang.NOTIFY.FAILA_TO_RUN_STACK_BECAUSE_OF_XXX, self.workspace.opsModel.get('name'), error));
            });
          };
        })(this));
        this.modal.listenTo(App.user, 'change:credential', function() {
          if (App.user.hasCredential() && that.modal.isOpen()) {
            return that.modal.find(".modal-confirm").text(lang.IDE.RUN_STACK_MODAL_CONFIRM_BTN);
          }
        });
        return this.modal.on('close', function() {
          return that.modal.stopListening(App.user);
        });
      },
      appToStack: function() {
        var appToStackModal, name, newName, onConfirm, originStackExist, stack;
        name = this.workspace.design.attributes.name;
        newName = this.getStackNameFromApp(name);
        stack = App.model.stackList().get(this.workspace.design.attributes.stack_id);
        onConfirm = (function(_this) {
          return function() {
            var isNew, newJson, newOps;
            MC.Analytics.increase("app_to_stack");
            isNew = !(appToStackModal.tpl.find("input[name='save-stack-type']:checked").val() === "replace");
            if (isNew) {
              newOps = App.model.createStackByJson(_this.workspace.design.serializeAsStack(appToStackModal.tpl.find('#modal-input-value').val()));
              appToStackModal.close();
              App.openOps(newOps);
            } else {
              newJson = Design.instance().serializeAsStack();
              newJson.id = _this.workspace.design.attributes.stack_id;
              appToStackModal.close();
              newJson.name = stack.get("name");
              return stack.save(newJson).then(function() {
                notification("info", sprintf(lang.NOTIFY.INFO_HDL_SUCCESS, lang.TOOLBAR.TOOLBAR_HANDLE_SAVE_STACK, newJson.name));
                return App.openOps(stack, true);
              }, function() {
                return notification('error', sprintf(lang.NOTIFY.ERR_SAVE_FAILED, newJson.name));
              });
            }
          };
        })(this);
        originStackExist = !!stack;
        appToStackModal = new Modal({
          title: lang.TOOLBAR.POP_TIT_APP_TO_STACK,
          template: OpsEditorTpl.saveAppToStack({
            input: name,
            stackName: newName,
            originStackExist: originStackExist
          }),
          confirm: {
            text: lang.TOOLBAR.POP_BTN_SAVE_TO_STACK
          },
          onConfirm: onConfirm
        });
        return appToStackModal.tpl.find("input[name='save-stack-type']").change(function() {
          return appToStackModal.tpl.find(".radio-instruction").toggleClass('hide');
        });
      },
      getStackNameFromApp: function(app_name) {
        var copy_name, idx, name_list, prefix, reg_name, stack_reg;
        if (!app_name) {
          app_name = "untitled";
        }
        idx = 0;
        reg_name = /.*-\d+$/;
        if (reg_name.test(app_name)) {
          prefix = app_name.substr(0, app_name.lastIndexOf("-"));
          idx = Number(app_name.substr(app_name.lastIndexOf("-") + 1));
          copy_name = prefix;
        } else {
          if (app_name.charAt(app_name.length - 1) === "-") {
            copy_name = app_name.substr(0, app_name.length - 1);
          } else {
            copy_name = app_name;
          }
        }
        stack_reg = /.-stack+$/;
        if (stack_reg.test(copy_name)) {
          copy_name = copy_name;
        } else {
          copy_name = copy_name + "-stack";
        }
        name_list = App.model.stackList().pluck("name") || [];
        idx++;
        while (idx <= name_list.length) {
          if ($.inArray(copy_name + "-" + idx, name_list) === -1) {
            break;
          }
          idx++;
        }
        return copy_name + "-" + idx;
      },
      checkAppNameRepeat: function(nameVal) {
        if (App.model.appList().findWhere({
          name: nameVal
        })) {
          this.showError('appname', lang.PROP.MSG_WARN_REPEATED_APP_NAME);
          return true;
        } else if (!nameVal) {
          this.showError('appname', lang.PROP.MSG_WARN_NO_APP_NAME);
          return true;
        } else {
          this.hideError('appname');
          return false;
        }
      },
      renderKpDropdown: function(modal) {
        var hideKpError, keyPairDropdown;
        if (kpDropdown.hasResourceWithDefaultKp()) {
          keyPairDropdown = new kpDropdown();
          if (modal) {
            modal.tpl.find("#kp-runtime-placeholder").html(keyPairDropdown.render().el);
          } else {
            return false;
          }
          hideKpError = this.hideError.bind(this);
          keyPairDropdown.dropdown.on('change', function() {
            return hideKpError('kp');
          });
          modal.tpl.find('.default-kp-group').show();
          if (this.modal) {
            this.modal.on('close', function() {
              return keyPairDropdown.remove();
            });
          }
          if (this.updateModal) {
            this.updateModal.on('close', function() {
              return keyPairDropdown.remove();
            });
          }
        }
        return null;
      },
      hideDefaultKpError: function(context) {
        return context.hideError('kp');
      },
      hideError: function(type) {
        var selector;
        selector = type ? $("#runtime-error-" + type) : $(".runtime-error");
        return selector.hide();
      },
      showError: function(id, msg) {
        return $("#runtime-error-" + id).text(msg).show();
      },
      defaultKpIsSet: function() {
        var defaultKP, kpModal;
        if (!kpDropdown.hasResourceWithDefaultKp()) {
          return true;
        }
        kpModal = Design.modelClassForType(constant.RESTYPE.KP);
        defaultKP = kpModal.getDefaultKP();
        if (!defaultKP.get('isSet') || !((this.modal || this.updateModal) && (this.modal || this.updateModal).tpl.find("#kp-runtime-placeholder .item.selected").size())) {
          this.showError('kp', lang.IDE.RUN_STACK_MODAL_KP_WARNNING);
          return false;
        }
        return true;
      },
      startApp: function() {
        appAction.startApp(this.workspace.opsModel.id);
        return false;
      },
      stopApp: function() {
        appAction.stopApp(this.workspace.opsModel.id);
        return false;
      },
      terminateApp: function() {
        appAction.terminateApp(this.workspace.opsModel.id);
        return false;
      },
      forgetApp: function() {
        appAction.forgetApp(this.workspace.opsModel.id);
        return false;
      },
      refreshResource: function() {
        this.workspace.reloadAppData();
        return false;
      },
      switchToAppEdit: function() {
        this.workspace.switchToEditMode();
        return false;
      },
      checkDBinstance: function(oldDBInstanceList) {
        var DBInstances, checkDB;
        checkDB = new Q.defer();
        if (oldDBInstanceList.length) {
          DBInstances = CloudResources(constant.RESTYPE.DBINSTANCE, Design.instance().get("region"));
          DBInstances.fetchForce().then(function() {
            return checkDB.resolve(DBInstances);
          });
        } else {
          checkDB.resolve([]);
        }
        return checkDB.promise;
      },
      applyAppEdit: function() {
        var DBInstances, components, dbInstanceList, differ, newJson, oldDBInstanceList, oldJson, removes, result, that;
        that = this;
        oldJson = this.workspace.opsModel.getJsonData();
        newJson = this.workspace.design.serialize({
          usage: 'updateApp'
        });
        differ = new ResDiff({
          old: oldJson,
          "new": newJson
        });
        result = differ.getDiffInfo();
        if (!result.compChange && !result.layoutChange && !result.stateChange) {
          return this.workspace.applyAppEdit();
        }
        removes = differ.removedComps;
        console.log(differ);
        dbInstanceList = [];
        console.log(newJson);
        components = newJson.component;
        _.each(components, function(e) {
          if (e.type === constant.RESTYPE.DBINSTANCE) {
            return dbInstanceList.push(e.resource.DBInstanceIdentifier);
          }
        });
        DBInstances = CloudResources(constant.RESTYPE.DBINSTANCE, Design.instance().get("region"));
        this.updateModal = new Modal({
          title: lang.IDE.HEAD_INFO_LOADING,
          template: MC.template.loadingSpiner,
          disableClose: true,
          cancel: "Close"
        });
        this.updateModal.tpl.find(".modal-footer").hide();
        oldDBInstanceList = [];
        _.each(oldJson.component, function(e) {
          if (e.type === constant.RESTYPE.DBINSTANCE) {
            return oldDBInstanceList.push(e.resource.DBInstanceIdentifier);
          }
        });
        return this.checkDBinstance(oldDBInstanceList).then(function(DBInstances) {
          var $diffTree, cost, costSymbol, notAvailableDB, removeList, removeListNotReady, _ref;
          notAvailableDB = DBInstances.filter(function(e) {
            var _ref;
            return (_ref = e.attributes.DBInstanceIdentifier, __indexOf.call(dbInstanceList, _ref) >= 0) && e.attributes.DBInstanceStatus !== "available";
          });
          if (notAvailableDB.length) {
            that.updateModal.find(".modal-footer").show().find(".modal-confirm").hide();
            that.updateModal.setContent(MC.template.cantUpdateApp({
              data: notAvailableDB
            }));
            that.updateModal.setTitle(lang.IDE.UPDATE_APP_MODAL_TITLE);
            return false;
          }
          removeList = [];
          _.each(removes, function(e) {
            var dbModel;
            if (e.type === constant.RESTYPE.DBINSTANCE) {
              dbModel = DBInstances.get(e.resource.DBInstanceIdentifier);
              if (dbModel) {
                return removeList.push(DBInstances.get(e.resource.DBInstanceIdentifier));
              }
            }
          });
          removeListNotReady = _.filter(removeList, function(e) {
            return e.attributes.DBInstanceStatus !== "available";
          });
          that.updateModal.tpl.children().css('width', "450px").find(".modal-footer").show();
          that.updateModal.find(".modal-wrapper-fix").width(665).find('.modal-body').css('padding', 0);
          that.updateModal.setContent(MC.template.updateApp({
            isRunning: that.workspace.opsModel.testState(OpsModel.State.Running),
            notReadyDB: removeListNotReady,
            removeList: removeList
          }));
          that.updateModal.tpl.find(".modal-header").find("h3").text(lang.IDE.UPDATE_APP_MODAL_TITLE);
          that.updateModal.tpl.find('.modal-confirm').prop("disabled", true).text((App.user.hasCredential() ? lang.IDE.UPDATE_APP_CONFIRM_BTN : lang.IDE.UPDATE_APP_MODAL_NEED_CREDENTIAL));
          that.updateModal.resize();
          cost = Design.instance().getCost();
          costSymbol = "$";
          if ((_ref = Design.instance().region()) === 'cn-north-1') {
            costSymbol = "￥";
          }
          that.updateModal.find("#label-total-fee").find('b').text("" + (costSymbol + cost.totalFee));
          that.updateModal.find("#label-visualops-fee").find('b').text("" + (costSymbol + cost.visualOpsFee));
          window.setTimeout(function() {
            return that.updateModal.resize();
          }, 100);
          if (removeListNotReady != null ? removeListNotReady.length : void 0) {
            that.updateModal.tpl.find("#take-rds-snapshot").attr("checked", false).on("change", function() {
              return that.updateModal.tpl.find(".modal-confirm").prop('disabled', $(this).is(":checked"));
            });
          }
          that.updateModal.on('confirm', function() {
            var _ref1;
            if (!App.user.hasCredential()) {
              App.showSettings(App.showSettings.TAB.Credential);
              return false;
            }
            if (!that.defaultKpIsSet()) {
              return false;
            }
            newJson = that.workspace.design.serialize({
              usage: 'updateApp'
            });
            that.workspace.applyAppEdit(newJson, !result.compChange);
            return (_ref1 = that.updateModal) != null ? _ref1.close() : void 0;
          });
          if (result.compChange) {
            $diffTree = differ.renderAppUpdateView();
            $('#app-update-summary-table').html($diffTree);
          }
          that.renderKpDropdown(that.updateModal);
          TA.loadModule('stack').then(function() {
            var _ref1;
            that.updateModal && that.updateModal.toggleConfirm(false);
            return (_ref1 = that.updateModal) != null ? _ref1.resize() : void 0;
          }, function(err) {
            var _ref1;
            console.log(err);
            that.updateModal && that.updateModal.toggleConfirm(true);
            that.updateModal && that.updateModal.tpl.find("#take-rds-snapshot").off('change');
            return (_ref1 = that.updateModal) != null ? _ref1.resize() : void 0;
          });
        });
      },
      opsOptionChanged: function() {
        var $switcher, agent, confirmModal, instancesNoUserData, stateEnabled, workspace;
        $switcher = $(".toolbar-visual-ops-switch").toggleClass('on');
        stateEnabled = $switcher.hasClass("on");
        agent = this.workspace.design.get('agent');
        if (stateEnabled) {
          instancesNoUserData = this.workspace.design.instancesNoUserData();
          workspace = this.workspace;
          if (!instancesNoUserData) {
            $switcher.removeClass('on');
            confirmModal = new Modal({
              title: lang.IDE.TITLE_CONFIRM_TO_ENABLE_VISUALOPS,
              width: "420px",
              template: OpsEditorTpl.confirm.enableState(),
              confirm: {
                text: lang.IDE.ENABLE_VISUALOPS
              },
              onConfirm: function() {
                agent.enabled = true;
                confirmModal.close();
                $switcher.addClass('on');
                workspace.design.set('agent', agent);
                return ide_event.trigger(ide_event.FORCE_OPEN_PROPERTY);
              }
            });
            return null;
          } else {
            agent.enabled = true;
            this.workspace.design.set("agent", agent);
            return ide_event.trigger(ide_event.REFRESH_PROPERTY);
          }
        } else {
          agent.enabled = false;
          this.workspace.design.set('agent', agent);
          return ide_event.trigger(ide_event.FORCE_OPEN_PROPERTY);
        }
      },
      cancelAppEdit: function() {
        var modal, self;
        if (!this.workspace.cancelEditMode()) {
          self = this;
          modal = new Modal({
            title: lang.IDE.TITLE_CHANGE_NOT_APPLIED,
            template: OpsEditorTpl.modal.cancelUpdate(),
            width: "400",
            confirm: {
              text: "Discard",
              color: "red"
            },
            onConfirm: function() {
              modal.close();
              self.workspace.cancelEditMode(true);
            }
          });
        }
        return false;
      }
    });
  });

}).call(this);

define('workspaces/awseditor/template/TplLeftPanel',['handlebars'], function(Handlebars){ var __TEMPLATE__, TEMPLATE={};

__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {
  
  
  return "disabled";
  }

function program3(depth0,data) {
  
  
  return "disableRds";
  }

function program5(depth0,data) {
  
  var buffer = "";
  buffer += "<li class=\"tooltip resource-item vgw\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_NEW_VGW", {hash:{},data:data}))
    + "' data-type=\"VGW\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_VGW", {hash:{},data:data}))
    + "</li>";
  return buffer;
  }

function program7(depth0,data) {
  
  var buffer = "";
  buffer += "<li class=\"tooltip resource-item cgw\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_NEW_CGW", {hash:{},data:data}))
    + "' data-type=\"CGW\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_CGW", {hash:{},data:data}))
    + "</li>";
  return buffer;
  }

  buffer += "<button class=\"tooltip sidebar-hider icon-caret-left HideOEPanelLeft\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_TOGGLE_RESOURCE_PANEL", {hash:{},data:data}))
    + "'></button>\n\n<header class=\"sidebar-title\"> "
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_RESOURCES", {hash:{},data:data}))
    + "\n  <i class=\"icon-resources js-toggle-dropdown menu-manage-shard-res tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_SHARED_RESOURCES", {hash:{},data:data}))
    + "\"></i>\n  <ul class=\"dropdown-menu resources-dropdown-wrapper\">\n    <li data-action=\"keypair\" class=\"icon-kp\"><span>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_KEY_PAIR", {hash:{},data:data}))
    + "</span></li>\n    <li data-action=\"snapshot\" class=\"icon-ebs-snap\"><span>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_EBS_SNAPSHOT", {hash:{},data:data}))
    + "</span></li>\n    <li data-action=\"sns\" class=\"icon-sns\"><span>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_SNS_SUBSCRIPTION", {hash:{},data:data}))
    + "</span></li>\n    <li data-action=\"sslcert\" class=\"icon-cert\"><span>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_SERVER_CERTIFICATE", {hash:{},data:data}))
    + "</span></li>\n    <li data-action=\"dhcp\" class=\"icon-dhcp\"><span>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_DHCP_OPTION_SETS", {hash:{},data:data}))
    + "</span></li>\n    <li data-action=\"rdspg\" class=\"icon-pg ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.rdsDisabled), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"><span>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_DB_PARAMETER_GROUPS", {hash:{},data:data}))
    + "</span></li>\n    <li data-action=\"rdssnapshot\" class=\"icon-rds-snap ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.rdsDisabled), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"><span>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_DB_SNAPSHOT", {hash:{},data:data}))
    + "</span></li>\n  </ul>\n  <i class=\"refresh-resource-panel icon-refresh tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_REFRESH_RESOURCE_LIST", {hash:{},data:data}))
    + "\"></i>\n</header>\n\n<div class=\"fixedaccordion accordion-default\">\n  <section class=\"accordion-group\">\n    <header class=\"fixedaccordion-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_AZ", {hash:{},data:data}))
    + "</header>\n    <ul class=\"resource-list-az clearfix accordion-body\">\n      <li class=\"tooltip resource-item az\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_AZ", {hash:{},data:data}))
    + "' data-type=\"AZ\">\n        <div class=\"resource-count\">"
    + escapeExpression(((stack1 = (depth0 && depth0.count)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        <div class=\"res-name\">"
    + escapeExpression(helpers.i18n.call(depth0, "PROP.AZ_AND_SUBNET", {hash:{},data:data}))
    + "</div>\n      </li>\n      <li class=\"tooltip resource-item subnet\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_NEW_SUBNET", {hash:{},data:data}))
    + "' data-type=\"SUBNET\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_SUBNET", {hash:{},data:data}))
    + "</li>\n      <li class=\"tooltip resource-item subnetgroup\" data-type=\"DBSBG\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_SUBNET_GROUP", {hash:{},data:data}))
    + "</li>\n    </ul>\n  </section>\n\n  <section class=\"accordion-group\">\n    <header class=\"fixedaccordion-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_AMI", {hash:{},data:data}))
    + "\n      <nav class=\"selectbox resource-select AmiTypeSelect js-toggle-dropdown\">\n        <div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_QUICK_START_AMI", {hash:{},data:data}))
    + "</div>\n        <ul class=\"dropdown\">\n          <li class=\"item selected\" data-id=\"QuickStartAmi\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_QUICK_START_AMI", {hash:{},data:data}))
    + "</li>\n          <li class=\"item\" data-id=\"MyAmi\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_MY_AMI", {hash:{},data:data}))
    + "</li>\n          <li class=\"item\" data-id=\"FavoriteAmi\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_FAVORITE_AMI", {hash:{},data:data}))
    + "</li>\n        </ul>\n      </nav>\n    </header>\n    <div class=\"accordion-body nano\">\n      <button class=\"btn btn-primary BrowseCommunityAmi\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_BTN_BROWSE_COMMUNITY_AMI", {hash:{},data:data}))
    + "</button>\n      <ul class=\"nano-content resource-list-ami\"></ul>\n    </div>\n  </section>\n\n  <section class=\"accordion-group\">\n    <header class=\"fixedaccordion-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_VOL", {hash:{},data:data}))
    + "</header>\n    <div class=\"accordion-body nano\">\n      <button class=\"btn btn-primary ManageSnapshot ManageEbsSnapshot\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_SNAPSHOT_MANAGE", {hash:{},data:data}))
    + "</button>\n      <div class=\"nano-content\">\n        <div class=\"resource-list-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_BLANK_VOL", {hash:{},data:data}))
    + "</div>\n        <ul class=\"clearfix\"><li class=\"tooltip resource-item volume\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_NEW_VOLUME", {hash:{},data:data}))
    + "' data-type=\"VOL\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_VOL", {hash:{},data:data}))
    + "</li></ul>\n        <div class=\"resource-list-head\">\n          "
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_VOL_FROM_SNAPSHOT", {hash:{},data:data}))
    + "\n          <div class=\"selectbox resource-list-sort-select dark\" id=\"resource-list-sort-select-snapshot\">\n            <div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_SORT_BY_DATE", {hash:{},data:data}))
    + "</div>\n            <ul class=\"dropdown\">\n              <li class=\"item selected focused\" data-id=\"date\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_SORT_BY_DATE", {hash:{},data:data}))
    + "</li>\n              <li class=\"item\" data-id=\"storge\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_SORT_BY_STORAGE", {hash:{},data:data}))
    + "</li>\n            </ul>\n          </div>\n        </div>\n        <ul class=\"resource-list-snapshot\"></ul>\n      </div>\n    </div>\n  </section>\n\n  <section class=\"accordion-group\">\n    <header class=\"fixedaccordion-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_RDS", {hash:{},data:data}))
    + "</header>\n    <div class=\"accordion-body nano ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.rdsDisabled), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n      <div class=\"disableRds-content\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_MSG_RDS_DISABLED", {hash:{},data:data}))
    + "</div>\n      <button class=\"btn btn-primary ManageSnapshot ManageRdsSnapshot\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_RDS_SNAPSHOT_MANAGE", {hash:{},data:data}))
    + "</button>\n      <div class=\"nano-content\">\n        <div class=\"resource-list-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_RDS_INSTANCE", {hash:{},data:data}))
    + "</div>\n        <ul class=\"resource-list-rds\"></ul>\n        <div class=\"resource-list-head\">\n          "
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_RDS_INSTANCE_FROM_SNAPSHOT", {hash:{},data:data}))
    + "\n          <div class=\"selectbox resource-list-sort-select dark\" id=\"resource-list-sort-select-rds-snapshot\">\n            <div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_SORT_BY_DATE", {hash:{},data:data}))
    + "</div>\n            <ul class=\"dropdown\">\n              <li class=\"item selected focused\" data-id=\"date\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_SORT_BY_DATE", {hash:{},data:data}))
    + "</li>\n              <li class=\"item\" data-id=\"engine\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_SORT_BY_ENGINE", {hash:{},data:data}))
    + "</li>\n              <li class=\"item\" data-id=\"storge\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_SORT_BY_STORAGE", {hash:{},data:data}))
    + "</li>\n            </ul>\n          </div>\n        </div>\n        <ul class=\"resource-list-rds-snapshot\"></ul>\n      </div>\n    </div>\n  </section>\n\n  <section class=\"accordion-group\">\n    <header class=\"fixedaccordion-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_ELB_ASG", {hash:{},data:data}))
    + "</header>\n    <ul class=\"resource-list-asg clearfix accordion-body\">\n      <li class=\"tooltip resource-item elb\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_NEW_ELB", {hash:{},data:data}))
    + "' data-type=\"ELB\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_ELB", {hash:{},data:data}))
    + "</li>\n      <li class=\"tooltip resource-item asg\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_NEW_ASG", {hash:{},data:data}))
    + "' data-type=\"ASG\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_ASG", {hash:{},data:data}))
    + "</li>\n    </ul>\n  </section>\n\n  <section class='accordion-group'>\n    <header class=\"fixedaccordion-head\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_VPC", {hash:{},data:data}))
    + "</header>\n    <ul class=\"accordion-body\">\n      <li class=\"tooltip resource-item rtb\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_NEW_RTB", {hash:{},data:data}))
    + "' data-type=\"RT\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_RTB", {hash:{},data:data}))
    + "</li>\n\n      <li class=\"tooltip resource-item igw\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_NEW_IGW", {hash:{},data:data}))
    + "' data-type=\"IGW\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_IGW", {hash:{},data:data}))
    + "</li>\n\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasVGW), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n      ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasCGW), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n      <li class=\"tooltip resource-item eni\" data-tooltip='"
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIP_DRAG_NEW_ENI", {hash:{},data:data}))
    + "' data-type=\"ENI\">"
    + escapeExpression(helpers.i18n.call(depth0, "RES_LBL_NEW_ENI", {hash:{},data:data}))
    + "</li>\n    </ul>\n  </section>\n</div>";
  return buffer;
  };
TEMPLATE.panel=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var stack1;
  stack1 = helpers['with'].call(depth0, (depth0 && depth0.attributes), {hash:{},inverse:self.noop,fn:self.programWithDepth(2, program2, data, depth1),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program2(depth0,data,depth2) {
  
  var buffer = "", stack1;
  buffer += "\n<li class=\"resource-item bubble snapshot\" data-date=\""
    + escapeExpression(((stack1 = (depth0 && depth0.startTime)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-storge=\""
    + escapeExpression(((stack1 = (depth0 && depth0.volumeSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-bubble-template=\"resPanelSnapshot\" data-bubble-data='{\"id\":\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\", \"region\":\""
    + escapeExpression(((stack1 = (depth2 && depth2.region)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"}' data-type=\"VOL\" data-option='{\"volumeSize\":"
    + escapeExpression(((stack1 = (depth0 && depth0.volumeSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ", \"snapshotId\": \""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\", \"encrypted\": \"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.encrypted), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"}'>\n  <div class=\"ebs-size\">"
    + escapeExpression(((stack1 = (depth0 && depth0.volumeSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " GB</div>"
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n</li>";
  return buffer;
  }
function program3(depth0,data) {
  
  
  return "true";
  }

function program5(depth0,data) {
  
  
  return "false";
  }

function program7(depth0,data) {
  
  var buffer = "";
  buffer += "\n<div style=\"padding-bottom:15px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_NO_EBS_SNAPSHOT", (depth0 && depth0.region), {hash:{},data:data}))
    + "</div>\n";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.program(7, program7, data),fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  };
TEMPLATE.snapshot=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  stack1 = helpers['with'].call(depth0, ((stack1 = (depth0 && depth0[0])),stack1 == null || stack1 === false ? stack1 : stack1.attributes), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<li class=\"resource-item dbinstance tooltip\" data-tooltip=\""
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-type=\"DBINSTANCE\" data-option='{\"engine\":\""
    + escapeExpression(((stack1 = (depth0 && depth0.Engine)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"}'>\n<div class=\"resource-icon-dbinstance\"><img src=\"/assets/images/ide/icon/rds-"
    + escapeExpression(helpers.firstOfSplit.call(depth0, (depth0 && depth0.Engine), "-", {hash:{},data:data}))
    + ".png\" width=\"42\" height=\"30\"></div>\n"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n</li>\n";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  };
TEMPLATE.rds=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1;
  buffer += "\n<li class=\"resource-item dbsnapshot bubble\" data-date=\""
    + escapeExpression(((stack1 = (depth0 && depth0.SnapshotCreateTime)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-engine=\""
    + escapeExpression(((stack1 = (depth0 && depth0.EngineVersion)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-storge=\""
    + escapeExpression(((stack1 = (depth0 && depth0.AllocatedStorage)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-type=\"DBINSTANCE\" data-option='{\"engine\":\""
    + escapeExpression(((stack1 = (depth0 && depth0.Engine)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\", \"snapshotId\": \""
    + escapeExpression(((stack1 = (depth0 && depth0.DBSnapshotIdentifier)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\",\"allocatedStorage\": \""
    + escapeExpression(((stack1 = (depth0 && depth0.AllocatedStorage)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" }' data-bubble-template=\"resPanelDbSnapshot\" data-bubble-data='{\"id\":\""
    + escapeExpression(((stack1 = (depth0 && depth0.DBSnapshotIdentifier)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\",\"region\":\""
    + escapeExpression(((stack1 = (depth1 && depth1.region)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"}'>\n  <div class=\"resource-icon-dbsnapshot\"><img src=\"/assets/images/ide/icon/rds-"
    + escapeExpression(helpers.firstOfSplit.call(depth0, (depth0 && depth0.Engine), "-", {hash:{},data:data}))
    + ".png\" width=\"32\" height=\"23\">\n  <div class=\"rds-snapshot-size\">"
    + escapeExpression(((stack1 = (depth0 && depth0.AllocatedStorage)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " GB</div></div>"
    + escapeExpression(((stack1 = (depth0 && depth0.DBInstanceIdentifier)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n</li>\n";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "";
  buffer += "\n<div style=\"padding-bottom:15px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_NO_DB_SNAPSHOT", (depth0 && depth0.region), {hash:{},data:data}))
    + "</div>\n";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.program(3, program3, data),fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  };
TEMPLATE.rds_snapshot=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1;
  stack1 = helpers['with'].call(depth0, (depth0 && depth0.attributes), {hash:{},inverse:self.noop,fn:self.programWithDepth(2, program2, data, depth1),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program2(depth0,data,depth2) {
  
  var buffer = "", stack1;
  buffer += "\n<li class=\"bubble resource-item instance\" data-bubble-template=\"resPanelAmiInfo\" data-bubble-data='{\"region\":\""
    + escapeExpression(((stack1 = (depth2 && depth2.region)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\",\"imageId\":\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"}' data-type=\"INSTANCE\" data-option='{\"imageId\":\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"}'>\n  ";
  stack1 = helpers['if'].call(depth0, (depth2 && depth2.fav), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  <div class=\"resource-icon-instance\"><img src=\"/assets/images/ide/ami/"
    + escapeExpression(((stack1 = (depth0 && depth0.osType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "."
    + escapeExpression(((stack1 = (depth0 && depth0.architecture)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "."
    + escapeExpression(((stack1 = (depth0 && depth0.rootDeviceType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ".png\" width='39' height='27' /></div>\n  "
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n</li>";
  return buffer;
  }
function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<button class=\"btn-fav-ami fav tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_TOGGLE_FAVORITE", {hash:{},data:data}))
    + "\" data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></button>";
  return buffer;
  }

function program5(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.fav), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program6(depth0,data) {
  
  var buffer = "";
  buffer += "<p class=\"blank-slate\">"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_BROWSE_COMMUNITY_AMI", {hash:{},data:data}))
    + "</p>";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.program(5, program5, data),fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  };
TEMPLATE.ami=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"resource-icon resource-icon-instance\" >\n  <img src=\"/assets/images/ide/ami/"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.cachedAmi)),stack1 == null || stack1 === false ? stack1 : stack1.osType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "."
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.cachedAmi)),stack1 == null || stack1 === false ? stack1 : stack1.architecture)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "."
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.cachedAmi)),stack1 == null || stack1 === false ? stack1 : stack1.rootDeviceType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ".png\"/>\n</div>"
    + escapeExpression(helpers.i18n.call(depth0, "TOOLBAR.CLOUD_RESOURCE_AUTO_SCALING_GROUP", {hash:{},data:data}))
    + " ("
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")";
  return buffer;
  };
TEMPLATE.reuse_lc=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<dt>"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</dt><dd>"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</dd>";
  return buffer;
  }

  buffer += "<div class=\"bubble-head\">"
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n<dl class=\"bubble-content dl-horizontal\">";
  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</dl>";
  return buffer;
  };
TEMPLATE.resourcePanelBubble=Handlebars.template(__TEMPLATE__);


return TEMPLATE; });
define('workspaces/awseditor/template/TplAmiBrowser',['handlebars'], function(Handlebars){ var __TEMPLATE__, TEMPLATE={};

__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"content-wrap\" style=\"position:relative;\">\n  <div id=\"ami-search-option\">\n    <div>\n      <input id=\"community-ami-input\" class=\"input\" type=\"text\" placeholder=\"";
  stack1 = helpers.i18n.call(depth0, "AMI_LBL_ALL_SEARCH_AMI_BY_NAME_OR_ID", {hash:{},data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" />\n    </div>\n\n    <div id=\"selectbox-ami-platform\" class=\"selectbox\">\n      <div class=\"selection\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_ALL_PLATFORMS", {hash:{},data:data}))
    + "</div>\n      <ul class=\"dropdown\" tabindex=\"-1\">\n        <li class=\"item selected\" data-id=\"\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_ALL_PLATFORMS", {hash:{},data:data}))
    + "</li>\n        <li class=\"item\" data-id=\"amazonlinux\"> <span class=\"icon-ami-os amz-linux\">Amazon Linux</span> </li>\n        <li class=\"item\" data-id=\"centos\"> <span class=\"icon-ami-os centos\">Cent OS</span> </li>\n        <li class=\"item\" data-id=\"debian\"> <span class=\"icon-ami-os debian\">Debian</span> </li>\n        <li class=\"item\" data-id=\"fedora\"> <span class=\"icon-ami-os fedora\">Fedora</span> </li>\n        <li class=\"item\" data-id=\"gentoo\"> <span class=\"icon-ami-os gentoo\">Gentoo</span> </li>\n        <li class=\"item\" data-id=\"opensuse\"><span class=\"icon-ami-os opensuse\">OpenSUSE</span> </li>\n        <li class=\"item\" data-id=\"ubuntu\"> <span class=\"icon-ami-os ubuntu\">Ubuntu</span> </li>\n        <li class=\"item\" data-id=\"redhat\"> <span class=\"icon-ami-os redhat\">Red Hat</span> </li>\n        <li class=\"item\" data-id=\"windows\"><span class=\"icon-ami-os windows\">Windows</span> </li>\n        <li class=\"item\" data-id=\"otherlinux\"> <span class=\"icon-ami-os linux-other\">Other Linux</span> </li>\n      </ul>\n    </div>\n\n    <div class=\"ami-option-group\">\n      <h5>"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_VISIBILITY", {hash:{},data:data}))
    + "</h5>\n      <div class=\"ami-option-wrap\" id=\"filter-ami-type\">\n        <button type=\"button\" class=\"btn active\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_PUBLIC", {hash:{},data:data}))
    + "</button>\n        <button type=\"button\" class=\"btn\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_PRIVATE", {hash:{},data:data}))
    + "</button>\n      </div>\n    </div>\n\n    <div class=\"ami-option-group\">\n      <h5>"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_ARCHITECTURE", {hash:{},data:data}))
    + "</h5>\n      <div class=\"ami-option-wrap\" id=\"filter-ami-32bit-64bit\">\n        <button type=\"button\" class=\"btn active\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_32_BIT", {hash:{},data:data}))
    + "</button>\n        <button type=\"button\" class=\"btn\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_64_BIT", {hash:{},data:data}))
    + "</button>\n      </div>\n    </div>\n\n    <div class=\"ami-option-group\">\n      <h5>"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_ROOT_DEVICE_TYPE", {hash:{},data:data}))
    + "</h5>\n      <div class=\"ami-option-wrap\" id=\"filter-ami-EBS-Instance\">\n        <button type=\"button\" class=\"btn active\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_EBS", {hash:{},data:data}))
    + "</button>\n        <button type=\"button\" class=\"btn\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_INSTANCE_STORE", {hash:{},data:data}))
    + "</button>\n      </div>\n    </div>\n\n    <div id=\"btn-search-ami\" class=\"btn btn-blue\" disabled>"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_SEARCHING", {hash:{},data:data}))
    + "</div>\n  </div>\n\n  <div id=\"ami-data-wrap\">\n    <div id=\"ami-table-wrap\" class=\"table-head-fix\">\n      <table class=\"table-head\">\n        <thead>\n        <tr>\n          <th style=\"width: 44px;\"></th>\n          <th style=\"width: 104px;\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_AMI_ID", {hash:{},data:data}))
    + "</th>\n          <th>"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_AMI_NAME", {hash:{},data:data}))
    + "</th>\n          <th style=\"width: 62px;padding-left:4px;text-align:left;\" class=\"sortable\">"
    + escapeExpression(helpers.i18n.call(depth0, "AMI_LBL_SIZE", {hash:{},data:data}))
    + "</th>\n        </tr>\n        </thead>\n      </table>\n      <div class=\"scroll-wrap\">\n        <div class=\"scrollbar-veritical-wrap\" style=\"display: block;\"><div class=\"scrollbar-veritical-thumb\"></div></div>\n        <div class=\"show-loading\">\n          <div class=\"loading-spinner\"></div>\n        </div>\n        <div class=\"scroll-content\" style=\"display:block;\">\n          <table class=\"table\">\n            <thead>\n            <tr>\n              <th style=\"width: 16px;\"><div class=\"th-inner\"></div></th>\n              <th style=\"width: 80px;\"><div class=\"th-inner\"></div></th>\n              <th><div class=\"th-inner\"></div></th>\n              <th style=\"width: 42px;\"><div class=\"th-inner\"></div></th>\n            </tr>\n            </thead>\n            <tbody id=\"community_ami_table\"></tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n\n    <div id=\"community-ami-page\">\n      <div class=\"page-tip\" style=\"display: none;\"></div>\n      <div class=\"pagination\" style=\"display: none;\">\n        <a href=\"#\" class=\"previous\" data-action=\"previous\">&lsaquo;</a>\n        <input type=\"text\" readonly=\"readonly\" data-max-page=\"40\" />\n        <a href=\"#\" class=\"next\" data-action=\"next\">&rsaquo;</a>\n      </div>\n    </div>\n  </div>\n</div>";
  return buffer;
  };
TEMPLATE.dialog=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<tr class=\"item\" data-id=\""
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n  <td><div class=\"toggle-fav ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.faved), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " tooltip\" data-tooltip=\""
    + escapeExpression(helpers.i18n.call(depth0, "RES_TIT_TOGGLE_FAVORITE", {hash:{},data:data}))
    + "\"></div></td>\n  <td>"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n  <td>\n    <span class=\"ami-table-name\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n    <div class=\"ami-meta "
    + escapeExpression(((stack1 = (depth0 && depth0.osType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " icon-ami-os\"> ";
  stack1 = helpers.ifCond.call(depth0, (depth0 && depth0.isPublic), "true", {hash:{},inverse:self.program(6, program6, data),fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " | "
    + escapeExpression(((stack1 = (depth0 && depth0.architecture)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " | "
    + escapeExpression(((stack1 = (depth0 && depth0.rootDeviceType)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n  </td>\n  <td>"
    + escapeExpression(((stack1 = (depth0 && depth0.imageSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</td>\n</tr>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return "fav";
  }

function program4(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "AMI_TYPE_PUBLIC", {hash:{},data:data}));
  }

function program6(depth0,data) {
  
  
  return escapeExpression(helpers.i18n.call(depth0, "AMI_TYPE_PRIVATE", {hash:{},data:data}));
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  };
TEMPLATE.amiItem=Handlebars.template(__TEMPLATE__);


return TEMPLATE; });
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/subviews/AmiBrowser',['../template/TplAmiBrowser', 'i18n!/nls/lang.js', 'UI.modalplus', "ApiRequest", 'CloudResources', 'backbone', 'jqpagination'], function(TplAmiBrowser, lang, Modal, ApiRequest, CloudResources) {
    return Backbone.View.extend({
      events: {
        'click .ami-option-group .ami-option-wrap .btn': 'clickOptionBtn',
        'keypress #community-ami-input': "search",
        'click    #btn-search-ami': "search",
        'click    .toggle-fav': "toggleFav"
      },
      initialize: function(attr) {
        var modal, self;
        $.extend(this, attr);
        modal = new Modal({
          title: lang.IDE.AMI_LBL_COMMUNITY_AMIS,
          width: "855px",
          template: TplAmiBrowser.dialog(),
          disableFooter: true,
          compact: true
        });
        self = this;
        modal.on("close", function() {
          if (self.onClose) {
            self.onClose();
          }
        });
        this.setElement(modal.tpl);
        this.doSearch();
      },
      clickOptionBtn: function(event) {
        var active_btns;
        if ($(event.target).hasClass('active')) {
          active_btns = $(event.target).parent().find('.active');
          if (active_btns.length === 1 && active_btns[0] === event.target) {
            return;
          } else {
            $(event.target).removeClass('active');
          }
        } else {
          $(event.target).addClass('active');
        }
        return null;
      },
      toggleFav: function(event) {
        var amiElem, data, favAmis, id, promise, that;
        amiElem = $(event.target);
        that = this;
        favAmis = CloudResources("FavoriteAmi", this.region);
        promise = null;
        id = amiElem.closest("tr").attr("data-id");
        if (amiElem.hasClass('fav')) {
          promise = favAmis.unfav(id);
        } else {
          data = $.extend({
            id: id
          }, this.communityAmiData[id]);
          promise = favAmis.fav(data);
        }
        return promise.then(function() {
          return amiElem.toggleClass('fav');
        });
      },
      doSearch: function(pageNum, perPage) {
        var amiId, amiRes, architecture, isPublic, name, perPageNum, platform, reg_ami, returnPage, rootDeviceType, self, visibility;
        pageNum = pageNum || 1;
        this.renderAmiLoading();
        name = $("#community-ami-input").val();
        platform = $('#selectbox-ami-platform').find('.selected').data('id');
        isPublic = 'true';
        architecture = '32-bit';
        rootDeviceType = "EBS";
        if ($('#filter-ami-type').find('.active').length === 1) {
          visibility = radiobuttons.data($('#filter-ami-type'));
          isPublic = visibility === 'Private' ? 'false' : 'true';
        } else if ($('#filter-ami-type').find('.active').length === 2) {
          isPublic = null;
        }
        if ($('#filter-ami-32bit-64bit').find('.active').length === 1) {
          if (radiobuttons.data($('#filter-ami-32bit-64bit')).slice(0, 2) === '32') {
            architecture = '32-bit';
          } else {
            architecture = '64-bit';
          }
        } else if ($('#filter-ami-32bit-64bit').find('.active').length === 2) {
          architecture = null;
        }
        if ($('#filter-ami-EBS-Instance').find('.active').length === 1) {
          rootDeviceType = radiobuttons.data($('#filter-ami-EBS-Instance'));
        } else if ($('#filter-ami-EBS-Instance').find('.active').length === 2) {
          rootDeviceType = null;
        }
        perPageNum = parseInt(perPage || 50, 10);
        returnPage = parseInt(pageNum, 10);
        self = this;
        reg_ami = /ami-[a-zA-Z0-9]{8}$/;
        amiId = name.trim();
        if (amiId && reg_ami.test(amiId)) {
          amiRes = CloudResources("AWS.EC2.AMI", self.region);
          return amiRes.fetchAmis([amiId]).then(function() {
            var amiData, result, _ref;
            amiData = amiRes.where({
              id: amiId
            });
            result = {
              "ami": {
                "curPageNum": 1,
                "result": {},
                "totalNum": 0,
                "totalPageNum": 1
              }
            };
            if (amiData.length > 0) {
              result.ami.result[amiId] = amiData[0].toJSON();
              result.ami.totalNum = 1;
            }
            result = self.addFavStar(result);
            self.communityAmiData = ((_ref = result.ami) != null ? _ref.result : void 0) || {};
            return self.communityAmiRender(result);
          });
        } else {
          return ApiRequest("aws_public", {
            region_name: this.region,
            filters: {
              ami: {
                name: name,
                platform: platform,
                isPublic: isPublic,
                architecture: architecture,
                rootDeviceType: rootDeviceType,
                perPageNum: perPageNum,
                returnPage: returnPage
              }
            }
          }).then(function(result) {
            var _ref;
            result = self.addFavStar(result);
            self.communityAmiData = ((_ref = result.ami) != null ? _ref.result : void 0) || {};
            return self.communityAmiRender(result);
          }, function(result) {
            notification('error', lang.NOTIFY.UNABLE_TO_LOAD_COMMUNITY_AMIS);
            return self.communityAmiRender({
              ami: []
            });
          });
        }
      },
      searchPrev: function() {
        var page;
        page = parseInt($("#community_ami_page_current").attr("page"), 10);
        return this.doSearch(page + 1);
      },
      searchNext: function() {
        var page;
        page = parseInt($("#community_ami_page_current").attr("page"), 10);
        return this.doSearch(page - 1);
      },
      search: function(event) {
        if (event.keyCode && event.keyCode !== 13) {
          return;
        }
        return this.doSearch();
      },
      addFavStar: function(result) {
        var dumpObj, favAmis, favIds;
        favAmis = CloudResources("FavoriteAmi", this.region).getModels() || [];
        dumpObj = _.clone(result.ami.result);
        favIds = _.pluck(_.pluck(favAmis, "attributes"), "id");
        _.each(dumpObj, function(e, k) {
          if (__indexOf.call(favIds, k) >= 0) {
            return e.faved = true;
          }
        });
        result.ami.result = dumpObj;
        return result;
      },
      communityAmiRender: function(data) {
        var totalNum;
        this.communityShowContent();
        totalNum = 0;
        if (!data.ami) {
          return;
        }
        data = data.ami;
        $("#community_ami_table").html(TplAmiBrowser.amiItem(data.result));
        return this.communityPagerRender(data.curPageNum, data.totalPageNum, data.totalNum);
      },
      communityPagerRender: function(current_page, max_page, total) {
        var itemBegin, itemEnd, pageSize, pagination, resourceView;
        resourceView = this;
        pageSize = total > 50 ? 50 : total;
        itemBegin = (current_page - 1) * 50 + 1;
        itemEnd = itemBegin + pageSize - 1;
        if (itemEnd > total) {
          itemEnd = total;
        }
        $('.page-tip').text(sprintf(lang.IDE.AMI_LBL_PAGEINFO, itemBegin, itemEnd, total));
        pagination = $('.pagination');
        if (max_page === 0) {
          pagination.hide();
        } else {
          pagination.show();
        }
        if (pagination.data('jqPagination')) {
          pagination.jqPagination('destroy');
          pagination.find('input').data('current-page', current_page);
        }
        return pagination.jqPagination({
          current_page: current_page,
          max_page: max_page,
          page_string: "{current_page} / {max_page}",
          paged: (function(current_page, max_page) {
            return function(page) {
              if (page !== current_page && (max_page >= page && page > 0)) {
                return resourceView.doSearch(page);
              }
            };
          })(current_page, max_page)
        });
      },
      communityShowContent: function() {
        $(".show-loading").hide();
        $("#ami-table-wrap .scroll-content").show();
        $("#btn-search-ami").text(lang.IDE.AMI_LBL_SEARCH).removeAttr("disabled");
        return $("#community-ami-page>div").show();
      },
      renderAmiLoading: function() {
        $("#ami-table-wrap .scroll-content").hide();
        $(".show-loading").show();
        $("#btn-search-ami").text(lang.IDE.AMI_LBL_SEARCHING).attr("disabled", "");
        return $("#community-ami-page>div").hide();
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/subviews/ResourcePanel',["CloudResources", "Design", "../template/TplLeftPanel", "constant", 'dhcp', 'snapshotManager', 'rds_snapshot', 'sslcert_manage', 'sns_manage', 'kp_manage', 'rds_pg', 'rds_snapshot', './AmiBrowser', 'i18n!/nls/lang.js', 'ApiRequest', 'OpsModel', "backbone", 'UI.radiobuttons', "UI.nanoscroller", "UI.dnd"], function(CloudResources, Design, LeftPanelTpl, constant, dhcpManager, EbsSnapshotManager, RdsSnapshotManager, sslCertManager, snsManager, keypairManager, rdsPgManager, rdsSnapshot, AmiBrowser, lang, ApiRequest, OpsModel) {
    var LcItemView, __resizeAccdTO;
    __resizeAccdTO = null;
    $(window).on("resize", function() {
      if (__resizeAccdTO) {
        clearTimeout(__resizeAccdTO);
      }
      __resizeAccdTO = setTimeout(function() {
        return $("#OpsEditor").filter(":visible").children(".OEPanelLeft").trigger("RECALC");
      }, 150);
    });
    MC.template.resPanelAmiInfo = function(data) {
      var ami, config, e, _ref;
      if (!data.region || !data.imageId) {
        return;
      }
      ami = CloudResources(constant.RESTYPE.AMI, data.region).get(data.imageId);
      if (!ami) {
        return;
      }
      ami = ami.toJSON();
      ami.imageSize = ami.imageSize || ((_ref = ami.blockDeviceMapping[ami.rootDeviceName]) != null ? _ref.volumeSize : void 0);
      try {
        config = App.model.getOsFamilyConfig(data.region);
        config = config[ami.osFamily] || config[constant.OS_TYPE_MAPPING[ami.osType]];
        config = ami.rootDeviceType === "ebs" ? config.ebs : config['instance store'];
        config = config[ami.architecture];
        config = config[ami.virtualizationType || "paravirtual"];
        ami.instanceType = config.join(", ");
      } catch (_error) {
        e = _error;
      }
      return MC.template.bubbleAMIInfo(ami);
    };
    MC.template.resPanelDbSnapshot = function(data) {
      var ss;
      if (!data.region || !data.id) {
        return;
      }
      ss = CloudResources(constant.RESTYPE.DBSNAP, data.region).get(data.id);
      if (!ss) {
        return;
      }
      return LeftPanelTpl.resourcePanelBubble(ss.toJSON());
    };
    MC.template.resPanelSnapshot = function(data) {
      var ss;
      if (!data.region || !data.id) {
        return;
      }
      ss = CloudResources(constant.RESTYPE.SNAP, data.region).get(data.id);
      if (!ss) {
        return;
      }
      return LeftPanelTpl.resourcePanelBubble(ss.toJSON());
    };
    LcItemView = Backbone.View.extend({
      tagName: 'li',
      className: 'resource-item asg',
      initialize: function(options) {
        this.parent = options.parent;
        (this.parent || this).$el.find(".resource-list-asg").append(this.$el);
        this.listenTo(this.model, 'change:name', this.render);
        this.listenTo(this.model, 'change:imageId', this.render);
        this.listenTo(this.model, 'destroy', this.remove);
        this.render();
        this.$el.attr({
          "data-type": "ASG",
          "data-option": '{"lcId":"' + this.model.id + '"}'
        });
      },
      render: function() {
        return this.$el.html(LeftPanelTpl.reuse_lc({
          name: this.model.get("name"),
          cachedAmi: this.model.getAmi() || this.model.get("cachedAmi")
        }));
      }
    });
    return Backbone.View.extend({
      events: {
        "click .btn-fav-ami": "toggleFav",
        "OPTION_CHANGE .AmiTypeSelect": "changeAmiType",
        "click .BrowseCommunityAmi": "browseCommunityAmi",
        "click .ManageEbsSnapshot": "manageEbsSnapshot",
        "click .ManageRdsSnapshot": "manageRdsSnapshot",
        "click .fixedaccordion-head": "updateAccordion",
        "RECALC": "recalcAccordion",
        "mousedown .resource-item": "startDrag",
        "click .refresh-resource-panel": "refreshPanelData",
        'click .resources-dropdown-wrapper li': 'resourcesMenuClick',
        'OPTION_CHANGE #resource-list-sort-select-snapshot': 'resourceListSortSelectSnapshotEvent',
        'OPTION_CHANGE #resource-list-sort-select-rds-snapshot': 'resourceListSortSelectRdsEvent'
      },
      initialize: function(options) {
        var design, region;
        _.extend(this, options);
        this.subViews = [];
        region = this.workspace.opsModel.get("region");
        this.listenTo(CloudResources("MyAmi", region), "update", this.updateMyAmiList);
        this.listenTo(CloudResources(constant.RESTYPE.AZ, region), "update", this.updateAZ);
        this.listenTo(CloudResources(constant.RESTYPE.SNAP, region), "update", this.updateSnapshot);
        this.listenTo(CloudResources(constant.RESTYPE.DBSNAP, region), "update", this.updateRDSSnapshotList);
        design = this.workspace.design;
        this.listenTo(design, Design.EVENT.ChangeResource, this.onResChanged);
        this.listenTo(design, Design.EVENT.AddResource, this.updateDisableItems);
        this.listenTo(design, Design.EVENT.RemoveResource, this.updateDisableItems);
        this.listenTo(design, Design.EVENT.AddResource, this.updateLc);
        this.listenTo(this.workspace, "toggleRdsFeature", this.toggleRdsFeature);
        this.__amiType = "QuickStartAmi";
        this.setElement(this.parent.$el.find(".OEPanelLeft"));
        $(document).off('keydown', this.bindKey.bind(this)).on('keydown', this.bindKey.bind(this));
        return this.render();
      },
      render: function() {
        var hasCGW, hasVGW;
        hasVGW = hasCGW = true;
        if (Design.instance().region() === 'cn-north-1') {
          hasVGW = hasCGW = false;
        }
        this.$el.html(LeftPanelTpl.panel({
          rdsDisabled: this.workspace.isRdsDisabled(),
          hasVGW: hasVGW,
          hasCGW: hasCGW
        }));
        this.$el.toggleClass("hidden", this.__leftPanelHidden || false);
        this.recalcAccordion();
        this.updateAZ();
        this.updateSnapshot();
        this.updateAmi();
        this.updateRDSList();
        this.updateRDSSnapshotList();
        this.updateDisableItems();
        this.renderReuse();
        this.$el.find(".nano").nanoScroller();
      },
      resourceListSortSelectRdsEvent: function(event) {
        var $currentTarget, $sortedList, selectedId;
        selectedId = 'date';
        if (event) {
          $currentTarget = $(event.currentTarget);
          selectedId = $currentTarget.find('.selected').data('id');
        }
        $sortedList = [];
        if (selectedId === 'date') {
          $sortedList = this.$el.find('.resource-list-rds-snapshot li').sort(function(a, b) {
            return (new Date($(b).data('date'))) - (new Date($(a).data('date')));
          });
        }
        if (selectedId === 'engine') {
          $sortedList = this.$el.find('.resource-list-rds-snapshot li').sort(function(a, b) {
            return $(a).data('engine') - $(b).data('engine');
          });
        }
        if (selectedId === 'storge') {
          $sortedList = this.$el.find('.resource-list-rds-snapshot li').sort(function(a, b) {
            return Number($(b).data('storge')) - Number($(a).data('storge'));
          });
        }
        if ($sortedList.length) {
          return this.$el.find('.resource-list-rds-snapshot').html($sortedList);
        }
      },
      resourceListSortSelectSnapshotEvent: function(event) {
        var $currentTarget, $sortedList, selectedId;
        selectedId = 'date';
        if (event) {
          $currentTarget = $(event.currentTarget);
          selectedId = $currentTarget.find('.selected').data('id');
        }
        $sortedList = [];
        if (selectedId === 'date') {
          $sortedList = this.$el.find('.resource-list-snapshot li').sort(function(a, b) {
            return (new Date($(b).data('date'))) - (new Date($(a).data('date')));
          });
        }
        if (selectedId === 'storge') {
          $sortedList = this.$el.find('.resource-list-snapshot li').sort(function(a, b) {
            return Number($(a).data('storge')) - Number($(b).data('storge'));
          });
        }
        if ($sortedList.length) {
          return this.$el.find('.resource-list-snapshot').html($sortedList);
        }
      },
      bindKey: function(event) {
        var is_input, keyCode, metaKey, shiftKey, tagName, that;
        that = this;
        keyCode = event.which;
        metaKey = event.ctrlKey || event.metaKey;
        shiftKey = event.shiftKey;
        tagName = event.target.tagName.toLowerCase();
        is_input = tagName === 'input' || tagName === 'textarea';
        if (metaKey === false && shiftKey === false && keyCode === 82 && is_input === false) {
          that.toggleResourcePanel();
          return false;
        }
      },
      renderReuse: function() {
        var lc, _i, _len, _ref;
        _ref = this.workspace.design.componentsOfType(constant.RESTYPE.LC);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lc = _ref[_i];
          if (!lc.get('appId')) {
            new LcItemView({
              model: lc,
              parent: this
            });
          }
        }
        return this;
      },
      updateLc: function(resModel) {
        if (resModel.type === constant.RESTYPE.LC && !resModel.get('appId')) {
          return new LcItemView({
            model: resModel,
            parent: this
          });
        }
      },
      onResChanged: function(resModel) {
        if (!resModel) {
          return;
        }
        if (resModel.type !== constant.RESTYPE.AZ) {
          return;
        }
        this.updateAZ();
      },
      updateAZ: function(resModel) {
        var availableAZ, az, region, usedAZ, _i, _len, _ref;
        if (!this.workspace.isAwake()) {
          return;
        }
        if (resModel && resModel.type !== constant.RESTYPE.AZ) {
          return;
        }
        region = this.workspace.opsModel.get("region");
        usedAZ = (function() {
          var _i, _len, _ref, _results;
          _ref = this.workspace.design.componentsOfType(constant.RESTYPE.AZ) || [];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            az = _ref[_i];
            _results.push(az.get("name"));
          }
          return _results;
        }).call(this);
        availableAZ = [];
        _ref = CloudResources(constant.RESTYPE.AZ, region).where({
          category: region
        }) || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          az = _ref[_i];
          if (usedAZ.indexOf(az.id) === -1) {
            availableAZ.push(az.id);
          }
        }
        this.$el.find(".az").toggleClass("disabled", availableAZ.length === 0).data("option", {
          name: availableAZ[0]
        }).children(".resource-count").text(availableAZ.length);
      },
      updateSnapshot: function() {
        var cln, region;
        region = this.workspace.opsModel.get("region");
        cln = CloudResources(constant.RESTYPE.SNAP, region).where({
          category: region
        }) || [];
        cln.region = cln.length ? region : constant.REGION_SHORT_LABEL[region];
        return this.$el.find(".resource-list-snapshot").html(LeftPanelTpl.snapshot(cln));
      },
      toggleRdsFeature: function() {
        this.$el.find(".ManageRdsSnapshot").parent().toggleClass("disableRds", this.workspace.isRdsDisabled());
        if (!this.workspace.isRdsDisabled()) {
          this.updateRDSList();
          this.updateRDSSnapshotList();
        }
        this.updateDisableItems();
        this.$el.children(".sidebar-title").find(".icon-rds-snap,.icon-pg").toggleClass("disabled", this.workspace.isRdsDisabled());
      },
      updateRDSList: function() {
        var cln;
        cln = CloudResources(constant.RESTYPE.DBENGINE, this.workspace.opsModel.get("region")).groupBy("DBEngineDescription");
        return this.$el.find(".resource-list-rds").html(LeftPanelTpl.rds(cln));
      },
      updateRDSSnapshotList: function() {
        var cln, region;
        region = this.workspace.opsModel.get("region");
        cln = CloudResources(constant.RESTYPE.DBSNAP, region).toJSON();
        cln.region = cln.length ? region : constant.REGION_SHORT_LABEL[region];
        return this.$el.find(".resource-list-rds-snapshot").html(LeftPanelTpl.rds_snapshot(cln));
      },
      changeAmiType: function(evt, attr) {
        this.__amiType = attr || "QuickStartAmi";
        this.updateAmi();
        if (!$(evt.currentTarget).parent().hasClass(".open")) {
          $(evt.currentTarget).parent().click();
        }
      },
      updateAmi: function() {
        var html, ms;
        ms = CloudResources(this.__amiType, this.workspace.opsModel.get("region")).getModels().sort(function(a, b) {
          var ca, cb;
          a = a.attributes;
          b = b.attributes;
          if (a.osType === "windows" && b.osType !== "windows") {
            return 1;
          }
          if (a.osType !== "windows" && b.osType === "windows") {
            return -1;
          }
          ca = a.osType;
          cb = b.osType;
          if (ca === cb) {
            ca = a.architecture;
            cb = b.architecture;
            if (ca === cb) {
              ca = a.name;
              cb = b.name;
            }
          }
          if (ca > cb) {
            return 1;
          } else {
            return -1;
          }
        });
        ms.fav = this.__amiType === "FavoriteAmi";
        ms.region = this.workspace.opsModel.get("region");
        html = LeftPanelTpl.ami(ms);
        return this.$el.find(".resource-list-ami").html(html).parent().nanoScroller("reset");
      },
      updateDisableItems: function(resModel) {
        var $ul, RESTYPE, az, design, disabled, minAZCount, subnet, tooltip, _i, _len, _ref, _ref1;
        if (!this.workspace.isAwake()) {
          return;
        }
        this.updateAZ(resModel);
        design = this.workspace.design;
        RESTYPE = constant.RESTYPE;
        $ul = this.$el.find(".resource-item.igw").parent();
        $ul.children(".resource-item.igw").toggleClass("disabled", design.componentsOfType(RESTYPE.IGW).length > 0);
        $ul.children(".resource-item.vgw").toggleClass("disabled", design.componentsOfType(RESTYPE.VGW).length > 0);
        az = {};
        _ref = design.componentsOfType(RESTYPE.SUBNET);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subnet = _ref[_i];
          az[subnet.parent().get("name")] = true;
        }
        this.sbg = this.$el.find(".resource-item.subnetgroup");
        if ((_ref1 = Design.instance().region()) === 'cn-north-1') {
          minAZCount = 1;
        } else {
          minAZCount = 2;
        }
        if (_.keys(az).length < minAZCount) {
          disabled = true;
          tooltip = sprintf(lang.IDE.RES_TIP_DRAG_CREATE_SUBNET_GROUP, minAZCount);
          this.sbg.toggleClass("disabled", true).attr("data-tooltip");
        } else {
          disabled = false;
          tooltip = lang.IDE.RES_TIP_DRAG_NEW_SUBNET_GROUP;
        }
        if (this.workspace.isRdsDisabled()) {
          disabled = true;
          tooltip = lang.IDE.RES_MSG_RDS_DISABLED;
        }
        this.sbg.toggleClass("disabled", disabled).attr("data-tooltip", tooltip);
      },
      updateFavList: function() {
        if (this.__amiType === "FavoriteAmi") {
          return this.updateAmi();
        }
      },
      updateMyAmiList: function() {
        if (this.__amiType === "MyAmi") {
          return this.updateAmi();
        }
      },
      toggleFav: function(evt) {
        var $tgt, amiCln;
        $tgt = $(evt.currentTarget).toggleClass("fav");
        amiCln = CloudResources("FavoriteAmi", this.workspace.opsModel.get("region"));
        if ($tgt.hasClass("fav")) {
          amiCln.fav($tgt.attr("data-id"));
        } else {
          amiCln.unfav($tgt.attr("data-id"));
        }
        return false;
      },
      toggleLeftPanel: function() {
        this.__leftPanelHidden = this.$el.toggleClass("hidden").hasClass("hidden");
        return null;
      },
      toggleResourcePanel: function() {
        return this.toggleLeftPanel();
      },
      updateAccordion: function(event, noAnimate) {
        var $accordion, $accordionParent, $accordionWrap, $body, $expanded, $target, $visibleAccordion, height;
        $target = $(event.currentTarget);
        $accordion = $target.closest(".accordion-group");
        if (event.target && !$(event.target).hasClass("fixedaccordion-head")) {
          return;
        }
        if ($accordion.hasClass("expanded")) {
          return false;
        }
        this.__openedAccordion = $accordion.index();
        $expanded = $accordion.siblings(".expanded");
        $body = $accordion.children(".accordion-body");
        $accordionWrap = $accordion.closest(".fixedaccordion");
        $accordionParent = $accordionWrap.parent();
        $visibleAccordion = $accordionWrap.children().filter(function() {
          return $(this).css('display') !== 'none';
        });
        height = $accordionParent.outerHeight() - 39 - $visibleAccordion.length * $target.outerHeight();
        $body.outerHeight(height);
        if (noAnimate) {
          $accordion.addClass("expanded").children(".nano").nanoScroller("reset");
          $expanded.removeClass("expanded");
          return false;
        }
        $body.slideDown(200, function() {
          return $accordion.addClass("expanded").children(".nano").nanoScroller("reset");
        });
        $expanded.children(".accordion-body").slideUp(200, function() {
          return $expanded.closest(".accordion-group").removeClass("expanded");
        });
        return false;
      },
      recalcAccordion: function() {
        var $accordion, $accordions, $target, leftpane;
        leftpane = this.$el;
        if (!leftpane.length) {
          return;
        }
        $accordions = leftpane.children(".fixedaccordion").children();
        $accordion = $accordions.filter(".expanded");
        if ($accordion.length === 0) {
          $accordion = $accordions.eq(this.__openedAccordion || 0);
        }
        $target = $accordion.removeClass('expanded').children('.fixedaccordion-head');
        return this.updateAccordion({
          currentTarget: $target[0]
        }, true);
      },
      browseCommunityAmi: function() {
        var amiBrowser, region;
        region = this.workspace.opsModel.get("region");
        this.listenTo(CloudResources("FavoriteAmi", region), "update", this.updateFavList);
        amiBrowser = new AmiBrowser({
          region: region
        });
        amiBrowser.onClose = (function(_this) {
          return function() {
            return _this.stopListening(CloudResources("FavoriteAmi", region), "update", _this.updateFavList);
          };
        })(this);
        return false;
      },
      manageEbsSnapshot: function() {
        return new EbsSnapshotManager().render();
      },
      manageRdsSnapshot: function() {
        return new RdsSnapshotManager().render();
      },
      refreshPanelData: function(evt) {
        var $tgt, jobs, region;
        $tgt = $(evt.currentTarget);
        if ($tgt.hasClass("reloading")) {
          return;
        }
        $tgt.addClass("reloading");
        region = this.workspace.opsModel.get("region");
        jobs = [CloudResources("MyAmi", region).fetchForce(), CloudResources(constant.RESTYPE.SNAP, region).fetchForce()];
        if (this.workspace.isRdsDisabled()) {
          jobs.push(this.workspace.fetchRdsData());
        } else {
          jobs.push(CloudResources(constant.RESTYPE.DBSNAP, region).fetchForce());
        }
        Q.all(jobs).done(function() {
          return $tgt.removeClass("reloading");
        });
      },
      resourcesMenuClick: function(event) {
        var $currentDom, currentAction;
        $currentDom = $(event.currentTarget);
        currentAction = $currentDom.data('action');
        switch (currentAction) {
          case 'keypair':
            return new keypairManager().render();
          case 'snapshot':
            return new EbsSnapshotManager().render();
          case 'sns':
            return new snsManager().render();
          case 'sslcert':
            return new sslCertManager().render();
          case 'dhcp':
            return (new dhcpManager()).manageDhcp();
          case 'rdspg':
            return new rdsPgManager().render();
          case 'rdssnapshot':
            return new rdsSnapshot().render();
        }
      },
      startDrag: function(evt) {
        var $tgt, dropTargets, option, type;
        if (evt.button !== 0) {
          return false;
        }
        $tgt = $(evt.currentTarget);
        if ($tgt.hasClass("disabled")) {
          return false;
        }
        if (evt.target && $(evt.target).hasClass("btn-fav-ami")) {
          return;
        }
        type = constant.RESTYPE[$tgt.attr("data-type")];
        dropTargets = "#OpsEditor .OEPanelCenter";
        if (type === constant.RESTYPE.INSTANCE) {
          dropTargets += ",#changeAmiDropZone";
        }
        option = $.extend(true, {}, $tgt.data("option") || {});
        option.type = type;
        $tgt.dnd(evt, {
          dropTargets: $(dropTargets),
          dataTransfer: option,
          eventPrefix: type === constant.RESTYPE.VOL ? "addVol_" : "addItem_",
          onDragStart: function(data) {
            if (type === constant.RESTYPE.AZ) {
              return data.shadow.children(".res-name").text($tgt.data("option")["name"]);
            } else if (type === constant.RESTYPE.ASG) {
              return data.shadow.text("ASG");
            }
          }
        });
        return false;
      },
      remove: function() {
        _.invoke(this.subViews, 'remove');
        this.subViews = null;
        Backbone.View.prototype.remove.call(this);
      }
    });
  });

}).call(this);

define('workspaces/awseditor/template/TplStatusbar',['handlebars'], function(Handlebars){ var __TEMPLATE__, TEMPLATE={};

__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<ul class=\"status-bar\"></ul>\n<div class=\"status-bar-modal\" style=\"display: none;\"></div>";
  };
TEMPLATE.frame=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", escapeExpression=this.escapeExpression;


  buffer += escapeExpression(helpers.i18n.call(depth0, "IDE.LAST_SAVED", {hash:{},data:data}))
    + " <span class=\"stack-save-time\">-<span>";
  return buffer;
  };
TEMPLATE.lastSaved=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<span class=\"state-success\"><i class=\"status status-green icon-label\"></i><b>"
    + escapeExpression(((stack1 = (depth0 && depth0.successCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</b></span>\n<span class=\"state-failed\"><i class=\"status status-red icon-label\"></i><b>"
    + escapeExpression(((stack1 = (depth0 && depth0.failCount)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</b></span>";
  return buffer;
  };
TEMPLATE.state=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var escapeExpression=this.escapeExpression;


  return escapeExpression(helpers.i18n.call(depth0, "IDE.LBL_VALIDATE", {hash:{},data:data}));
  };
TEMPLATE.ta=Handlebars.template(__TEMPLATE__);


return TEMPLATE; });
(function() {
  define('workspaces/awseditor/subviews/Statusbar',["OpsModel", "Design", "../template/TplStatusbar", "constant", "backbone", "event", "state_status", "i18n!/nls/lang.js"], function(OpsModel, Design, template, constant, Backbone, ide_event, stateStatus, lang) {
    var itemView, items;
    items = [
      {
        name: 'lastSaved',
        className: 'info',
        visible: true,
        events: {
          update: function() {
            return [
              {
                obj: null,
                event: 'jsonDataSaved'
              }
            ];
          }
        },
        update: function($, workspace) {
          var save_time;
          save_time = jQuery.now() / 1000;
          if (this.timer) {
            clearInterval(this.timer);
          }
          this.timer = setInterval(function() {
            var $item, new_interval_time;
            $item = $('.stack-save-time');
            new_interval_time = MC.intervalDate(save_time);
            if ($item.text() !== new_interval_time) {
              return $item.text(new_interval_time);
            }
          }, 1000);
          return null;
        },
        click: function(event) {
          return null;
        },
        remove: function() {
          return clearInterval(this.timer);
        }
      }, {
        name: 'ta',
        className: 'status-bar-btn',
        visible: function(toggle, workspace) {
          var isVisible, mode;
          mode = workspace.design.mode();
          if (mode === 'app' || mode === 'appview') {
            isVisible = false;
          } else {
            isVisible = true;
          }
          if (typeof toggle === "function") {
            toggle(isVisible);
          }
          return isVisible;
        },
        changeVisible: true,
        click: function(event) {
          var btnDom, currentText;
          btnDom = $(event.currentTarget);
          currentText = lang.IDE.LBL_VALIDATE;
          btnDom.text(lang.IDE.VALIDATING_3DOT);
          return setTimeout(function() {
            MC.ta.validAll();
            btnDom.text(currentText);
            return require(['TaGui'], function(trustedadvisor_main) {
              return trustedadvisor_main.loadModule('statusbar', null);
            });
          }, 50);
        }
      }, {
        name: 'state',
        className: 'status-bar-btn',
        visible: function(toggle, workspace) {
          var appStoped, isVisible, mode;
          mode = workspace.design.mode();
          appStoped = _.every([OpsModel.State.Updating, OpsModel.State.Running, OpsModel.State.Saving], function(state) {
            return !workspace.opsModel.testState(state);
          });
          isVisible = false;
          if (mode === 'app' || mode === 'appedit') {
            isVisible = !appStoped;
          } else if (mode === 'appview') {
            isVisible = false;
          }
          if (typeof toggle === "function") {
            toggle(isVisible);
          }
          return isVisible;
        },
        events: {
          update: [
            {
              obj: ide_event,
              event: ide_event.UPDATE_STATE_STATUS_DATA
            }
          ]
        },
        changeVisible: true,
        update: function($, workspace) {
          var data;
          data = this.renderData(true, workspace);
          $('.state-success b').text(data.successCount);
          return $('.state-failed b').text(data.failCount);
        },
        renderData: function(visible, workspace) {
          var failed, state, stateList, status, succeed, _i, _j, _len, _len1, _ref;
          this.workspace = workspace;
          if (!visible) {
            return {};
          }
          stateList = App.WS.collection.status.find().fetch();
          succeed = failed = 0;
          if (!_.isArray(stateList)) {
            stateList = [stateList];
          }
          for (_i = 0, _len = stateList.length; _i < _len; _i++) {
            state = stateList[_i];
            if (state.app_id !== workspace.opsModel.get('id')) {
              continue;
            }
            if (state.status) {
              _ref = state.status;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                status = _ref[_j];
                if (status.result === 'success') {
                  succeed++;
                } else if (status.result === 'failure') {
                  failed++;
                }
              }
            }
          }
          return {
            successCount: succeed,
            failCount: failed
          };
        },
        click: function(event) {
          return stateStatus.loadModule();
        }
      }
    ];
    itemView = Backbone.View.extend({
      tagName: 'li',
      initialize: function() {
        _.bindAll(this, 'render', 'toggle');
        this.clearGarbage = [];
        return this.needUpdate = [];
      },
      render: function() {
        this.$el.html(this.template(this.data));
        return this;
      },
      toggle: function(showOrHide) {
        return this.$el.toggle(showOrHide);
      },
      remove: function() {
        var garbage, _i, _len, _ref;
        this.$el.remove();
        this.stopListening();
        _ref = this.clearGarbage;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          garbage = _ref[_i];
          if (_.isArray(garbage)) {
            garbage[1].apply(garbage[0], garbage.slice(2));
          } else {
            garbage();
          }
        }
        this.clearGarbage = [];
        this.needUpdate = [];
        return this;
      },
      update: function() {
        var needUpdate, _i, _len, _ref;
        _ref = this.needUpdate;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          needUpdate = _ref[_i];
          needUpdate();
        }
        return this;
      }
    });
    return Backbone.View.extend({
      initialize: function(options) {
        var workspace;
        _.extend(this, options);
        workspace = this.workspace;
        this.itemViews = [];
        this.setElement(this.parent.$el.find(".OEPanelBottom").html(template.frame()));
        return this.renderItem();
      },
      ready: false,
      bindItem: function() {
        var e, event, index, isVisible, item, type, view, wrap$, wrapToggle, wrapUpdate, wrapVisible, _i, _j, _len, _len1, _ref, _ref1;
        _ref = jQuery.extend(true, [], items).reverse();
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          item = _ref[index];
          view = new itemView();
          view.delegateEvents({
            click: item.click
          });
          view.template = template[item.name];
          view.$el.addClass(item.className);
          wrap$ = _.bind(view.$, view);
          wrapToggle = _.bind(view.toggle, view);
          if (_.isFunction(item.visible)) {
            wrapVisible = _.bind(item.visible, item, wrapToggle, this.workspace);
          }
          if (_.isFunction(item.update)) {
            wrapUpdate = _.bind(item.update, item, wrap$, this.workspace);
          }
          _ref1 = item.events;
          for (type in _ref1) {
            event = _ref1[type];
            if (_.isFunction(event)) {
              event = event();
            }
            if (!_.isArray(event)) {
              continue;
            }
            for (_j = 0, _len1 = event.length; _j < _len1; _j++) {
              e = event[_j];
              if (type === 'update') {
                if (e.obj === ide_event) {
                  ide_event.onLongListen(e.event, wrapUpdate);
                  view.clearGarbage.push([ide_event, ide_event.offListen, e.event, wrapUpdate]);
                } else {
                  view.listenTo(e.obj || this.workspace.opsModel, e.event, wrapUpdate);
                }
              }
            }
          }
          if (item.changeVisible) {
            if (item.visible) {
              view.needUpdate.push(wrapVisible);
            }
            if (item.update) {
              view.needUpdate.push(wrapUpdate);
            }
          }
          if (_.isFunction(item.visible)) {
            isVisible = item.visible(view.toggle, this.workspace);
          } else {
            view.toggle(item.visible);
            isVisible = item.visible;
          }
          view.data = (typeof item.renderData === "function" ? item.renderData(isVisible, this.workspace) : void 0) || {};
          if (item.remove) {
            view.clearGarbage.push(_.bind(item.remove, item));
          }
          this.itemViews.push(view);
        }
        return null;
      },
      renderItem: function() {
        var that, view, _i, _len, _ref;
        that = this;
        if (!this.ready) {
          this.bindItem();
          this.ready = true;
        }
        _ref = this.itemViews;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          this.$('ul').append(view.render().el);
        }
        return this;
      },
      update: function() {
        var view, _i, _len, _ref, _results;
        _ref = this.itemViews;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          _results.push(view.update());
        }
        return _results;
      },
      remove: function() {
        var view, _i, _len, _ref;
        this.$el.remove();
        this.stopListening();
        _ref = this.itemViews;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          view.remove();
        }
        return this;
      }
    });
  });

}).call(this);

define('workspaces/awseditor/canvas/TplPopup',['handlebars'], function(Handlebars){ var __TEMPLATE__, TEMPLATE={};

__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<header class=\"volume-pph\">"
    + escapeExpression(helpers.i18n.call(depth0, "CANVAS.CVS_POP_ATTACHED_VOLUMES", {hash:{},data:data}))
    + " <span>("
    + escapeExpression(((stack1 = (depth0 && depth0.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")</span></header>\n<ul class=\"popup-content popup-volume\">\n\n    ";
  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <li data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.snapshot), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n        <div class=\"vpp-name\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n        <div class=\"vpp-size\">"
    + escapeExpression(((stack1 = (depth0 && depth0.size)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "GB</div>\n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.appId), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </li>\n";
  return buffer;
  }
function program3(depth0,data) {
  
  
  return "vpp-snapshot";
  }

function program5(depth0,data) {
  
  
  return "vpp-volume";
  }

function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<i class=\"status res-state tooltip "
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>";
  return buffer;
  }

function program9(depth0,data) {
  
  var buffer = "";
  buffer += "\n<div class=\"volume-pp-empty\">"
    + escapeExpression(helpers.i18n.call(depth0, "CANVAS.CVS_POP_NO_ATTACHED_VOLUME", {hash:{},data:data}))
    + "</div>\n";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, (depth0 && depth0.length), {hash:{},inverse:self.program(9, program9, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  };
TEMPLATE.volume=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<ul class=\"popup-content popup-instance\">\n  ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<li data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"vpp-instance\">\n    <i class=\"vpp-ins-state tooltip status-"
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.state)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></i>\n    <img src=\"/assets/images/"
    + escapeExpression(((stack1 = (depth0 && depth0.icon)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" width=\"39\" height=\"27\">\n    <div class=\"vpp-ins-vol\">"
    + escapeExpression(((stack1 = (depth0 && depth0.volume)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n    <div class=\"vpp-ins-name\">"
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div></li>";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "";
  buffer += "\n<div class=\"instance-pp-empty\">"
    + escapeExpression(helpers.i18n.call(depth0, "CANVAS.CVS_POP_NO_INSTANCES", {hash:{},data:data}))
    + "</div>\n";
  return buffer;
  }

  buffer += "<header class=\"instance-pph\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " <span class=\"instance-pph-close\">×</span></header>\n";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.items)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  return buffer;
  };
TEMPLATE.instance=Handlebars.template(__TEMPLATE__);


__TEMPLATE__ =function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<ul class=\"popup-content popup-instance\">\n  ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<li data-id=\""
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"vpp-instance vpp-eni\">\n  ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.eip), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  "
    + escapeExpression(((stack1 = (depth0 && depth0.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</li>";
  return buffer;
  }
function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<div class=\"vpp-eip tooltip\" data-tooltip=\""
    + escapeExpression(((stack1 = (depth0 && depth0.eip)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></div>";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "";
  buffer += "\n<div class=\"instance-pp-empty\">"
    + escapeExpression(helpers.i18n.call(depth0, "CANVAS.CVS_POP_NO_NETWORK_INTERFACE", {hash:{},data:data}))
    + "</div>\n";
  return buffer;
  }

  buffer += "<header class=\"instance-pph\">"
    + escapeExpression(((stack1 = (depth0 && depth0.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " <span class=\"instance-pph-close\">×</span></header>\n";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.items)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.program(5, program5, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  return buffer;
  };
TEMPLATE.eni=Handlebars.template(__TEMPLATE__);


return TEMPLATE; });
(function() {
  define('workspaces/awseditor/canvas/CpVolume',["CanvasPopup", "./TplPopup", "constant", "CloudResources"], function(CanvasPopup, TplPopup, constant, CloudResources) {
    return CanvasPopup.extend({
      type: "VolumePopup",
      events: {
        "mousedown li": "clickVolume"
      },
      closeOnBlur: true,
      initialize: function() {
        var data, volume, _i, _len, _ref;
        CanvasPopup.prototype.initialize.apply(this, arguments);
        if (this.host) {
          this.listenTo(this.host, "change:volumeList", this.render);
        }
        data = this.models || [];
        if (data[0] && data[0].get) {
          _ref = this.models;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            volume = _ref[_i];
            this.listenTo(volume, "change:name", this.updateVolume);
            this.listenTo(volume, "change:volumeSize", this.updateVolume);
          }
        }
        if (this.selectAtBegin) {
          this.clickVolume({
            currentTarget: this.$el.find('[data-id=' + this.selectAtBegin.id + ']')[0]
          });
        }
      },
      migrate: function(oldPopup) {
        var id;
        id = oldPopup.$el.find(".selected").attr("data-id");
        this.$el.find('[data-id="' + id + '"]').addClass("selected");
      },
      updateVolume: function(volume) {
        var $vol;
        $vol = this.$el.find('[data-id=' + volume.id + ']');
        $vol.children(".vpp-name").text(volume.get("name"));
        $vol.children(".vpp-size").text(volume.get("volumeSize") + "GB");
      },
      content: function() {
        var appData, appId, data, volume, _i, _len, _ref;
        data = this.models || [];
        if (data[0] && data[0].get) {
          data = [];
          _ref = this.models;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            volume = _ref[_i];
            appId = volume.get("appId");
            data.push({
              id: volume.get("id"),
              appId: appId,
              name: volume.get("name"),
              size: volume.get("volumeSize"),
              snapshot: volume.get("snapshotId")
            });
            if (appId) {
              appData = CloudResources(volume.type, volume.design().region()).get(appId);
              _.last(data).state = (appData != null ? appData.get('state') : void 0) || 'unknown';
            }
          }
        }
        return TplPopup.volume(data);
      },
      clickVolume: function(evt) {
        var $vol, volId;
        if (this.selected === evt.currentTarget) {
          return;
        }
        $vol = $(evt.currentTarget).addClass("selected");
        volId = $vol.attr("data-id");
        this.canvas.selectVolume(volId);
        if (this.selected) {
          $(this.selected).removeClass("selected");
        }
        this.selected = evt.currentTarget;
        if (!this.canvas.design.modeIsApp() && evt.which === 1) {
          $vol.dnd(evt, {
            dropTargets: this.canvas.$el,
            dataTransfer: {
              id: volId
            },
            eventPrefix: "addVol_"
          });
        }
        return false;
      },
      remove: function() {
        this.canvas.selectVolume(null);
        CanvasPopup.prototype.remove.call(this);
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CanvasViewAws',["CanvasView", "constant", "i18n!/nls/lang.js", "./CpVolume", "CanvasManager", "Design"], function(CanvasView, constant, lang, VolumePopup, CanvasManager, Design) {
    var AwsCanvasView, isPointInRect;
    isPointInRect = function(point, rect) {
      return rect.x1 <= point.x && rect.y1 <= point.y && rect.x2 >= point.x && rect.y2 >= point.y;
    };
    AwsCanvasView = CanvasView.extend({
      events: function() {
        return $.extend({
          "addVol_dragover": "__addVolDragOver",
          "addVol_dragleave": "__addVolDragLeave",
          "addVol_drop": "__addVolDrop"
        }, CanvasView.prototype.events);
      },
      recreateStructure: function() {
        this.svg.clear().add([this.svg.group().classes("layer_vpc"), this.svg.group().classes("layer_az"), this.svg.group().classes("layer_subnet"), this.svg.group().classes("layer_asg"), this.svg.group().classes("layer_line"), this.svg.group().classes("layer_sgline"), this.svg.group().classes("layer_node")]);
      },
      appendVpc: function(svgEl) {
        return this.__appendSvg(svgEl, ".layer_vpc");
      },
      appendAz: function(svgEl) {
        return this.__appendSvg(svgEl, ".layer_az");
      },
      appendSubnet: function(svgEl) {
        return this.__appendSvg(svgEl, ".layer_subnet");
      },
      appendAsg: function(svgEl) {
        return this.__appendSvg(svgEl, ".layer_asg");
      },
      appendSgline: function(svgEl) {
        return this.__appendSvg(svgEl, ".layer_sgline");
      },
      fixConnection: function(coord, initiator, target) {
        var toPort;
        if (target.type === constant.RESTYPE.ELB && (initiator.type === constant.RESTYPE.INSTANCE || initiator.type === constant.RESTYPE.LC)) {
          if (coord.x > target.pos().x + target.size().width / 2) {
            toPort = "elb-sg-out";
          } else {
            toPort = "elb-sg-in";
          }
        } else if (target.type === constant.RESTYPE.ASG || target.type === "ExpandedAsg") {
          target = target.getLc();
          if (target) {
            target = this.getItem(target.id);
          }
        }
        return {
          toPort: toPort,
          target: target
        };
      },
      errorMessageForDrop: function(type) {
        switch (type) {
          case constant.RESTYPE.VOL:
            return lang.CANVAS.WARN_NOTMATCH_VOLUME;
          case constant.RESTYPE.SUBNET:
            return lang.CANVAS.WARN_NOTMATCH_SUBNET;
          case constant.RESTYPE.INSTANCE:
            return lang.CANVAS.WARN_NOTMATCH_INSTANCE_SUBNET;
          case constant.RESTYPE.ENI:
            return lang.CANVAS.WARN_NOTMATCH_ENI;
          case constant.RESTYPE.RT:
            return lang.CANVAS.WARN_NOTMATCH_RTB;
          case constant.RESTYPE.ELB:
            return lang.CANVAS.WARN_NOTMATCH_ELB;
          case constant.RESTYPE.CGW:
            return lang.CANVAS.WARN_NOTMATCH_CGW;
          case constant.RESTYPE.ASG:
            return lang.CANVAS.WARN_NOTMATCH_ASG;
          case constant.RESTYPE.IGW:
            return lang.CANVAS.WARN_NOTMATCH_IGW;
          case constant.RESTYPE.VGW:
            return lang.CANVAS.WARN_NOTMATCH_VGW;
          case constant.RESTYPE.DBSBG:
            return lang.CANVAS.WARN_NOTMATCH_SGP_VPC;
          case constant.RESTYPE.DBINSTANCE:
            return lang.CANVAS.WARN_NOTMATCH_DBINSTANCE_SGP;
        }
      },
      selectVolume: function(volumeId) {
        this.deselectItem(true);
        this.__selectedVolume = volumeId;
        if (volumeId) {
          this.triggerSelected(constant.RESTYPE.VOL, volumeId);
        }
        return false;
      },
      isReadOnly: function() {
        return this.design.modeIsApp();
      },
      delSelectedItem: function() {
        var nextVol, res, s, volume;
        if (this.isReadOnly()) {
          return false;
        }
        if (this.__selectedVolume) {
          volume = this.design.component(this.__selectedVolume);
          res = volume.isRemovable();
          if (_.isString(res)) {
            notification("error", res);
            return;
          }
          s = this.__selectedVolume;
          this.__selectedVolume = null;
          volume.remove();
          nextVol = $(".canvas-pp .popup-volume").children().eq(0);
          if (nextVol.length) {
            nextVol.trigger("mousedown");
          } else {
            this.deselectItem();
          }
          return;
        }
        return CanvasView.prototype.delSelectedItem.apply(this, arguments);
      },
      __addVolDragOver: function(evt, data) {
        var RTP, dropzones, el, hoverItem, model, pos, r, targets, tgt, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
        this.__scrollOnDrag(data);
        if (!data.volDropTargets) {
          data.hoverItem = null;
          RTP = constant.RESTYPE;
          targets = this.design.componentsOfType(RTP.INSTANCE).concat(this.design.componentsOfType(RTP.LC));
          data.volDropTargets = dropzones = [];
          for (_i = 0, _len = targets.length; _i < _len; _i++) {
            tgt = targets[_i];
            tgt = this.getItem(tgt.id);
            _ref = tgt.$el;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              el = _ref[_j];
              r = tgt.rect(el);
              r.tgt = tgt;
              r.el = el;
              dropzones.push(r);
            }
          }
        }
        if (!data.effect) {
          data.effect = true;
          _ref1 = data.volDropTargets || [];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            tgt = _ref1[_k];
            CanvasManager.addClass(tgt.tgt.$el, "droppable");
          }
        }
        pos = this.__localToCanvasCoor(data.pageX - data.zoneDimension.x1, data.pageY - data.zoneDimension.y1);
        hoverItem = null;
        _ref2 = data.volDropTargets;
        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
          tgt = _ref2[_l];
          if (isPointInRect(pos, tgt)) {
            hoverItem = tgt;
            break;
          }
        }
        if (hoverItem !== data.hoverItem) {
          if (data.popup) {
            data.popup.remove();
          }
          data.hoverItem = hoverItem;
          if (hoverItem) {
            model = hoverItem.tgt.model;
            data.popup = new VolumePopup({
              attachment: hoverItem.el,
              host: model,
              models: model.get("volumeList"),
              canvas: this
            });
          }
        }
      },
      __addVolDragLeave: function(evt, data) {
        var tgt, _i, _len, _ref;
        this.__clearDragScroll();
        _ref = data.volDropTargets || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tgt = _ref[_i];
          CanvasManager.removeClass(tgt.tgt.$el, "droppable");
        }
        data.effect = false;
        if (data.popup) {
          data.popup.remove();
        }
      },
      __addVolDrop: function(evt, data) {
        var VolumeModel, attr, doable, owner, v, volume;
        if (!data.hoverItem) {
          return;
        }
        attr = data.dataTransfer || {};
        owner = data.hoverItem.tgt.model;
        if (attr.id) {
          volume = this.design.component(attr.id);
          doable = volume.isReparentable(owner);
          if (_.isString(doable)) {
            return notification("error", doable);
          } else if (doable) {
            volume.attachTo(owner);
            this.selectItem(data.hoverItem.el);
          }
          return;
        }
        if (owner.type === constant.RESTYPE.LC && owner.get("appId")) {
          notification("error", lang.NOTIFY.WARN_OPERATE_NOT_SUPPORT_YET);
          return;
        }
        attr.owner = owner;
        if (_.isString(attr.encrypted)) {
          attr.encrypted = attr.encrypted === 'true';
        }
        VolumeModel = Design.modelClassForType(constant.RESTYPE.VOL);
        v = new VolumeModel(attr);
        new VolumePopup({
          attachment: data.hoverItem.el,
          host: owner,
          models: owner.get("volumeList"),
          canvas: this,
          selectAtBegin: v
        });
      }
    });
    return AwsCanvasView;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/AwsViewStack',["CoreEditorView", "./subviews/PropertyPanel", "./subviews/Toolbar", "./subviews/ResourcePanel", "./subviews/Statusbar", "./canvas/CanvasViewAws", "event"], function(CoreEditorView, PropertyPanel, Toolbar, ResourcePanel, Statusbar, CanvasView, ide_event) {
    return CoreEditorView.extend({
      constructor: function(options) {
        _.extend(options, {
          TopPanel: Toolbar,
          RightPanel: PropertyPanel,
          LeftPanel: ResourcePanel,
          BottomPanel: Statusbar,
          CanvasView: CanvasView
        });
        return CoreEditorView.apply(this, arguments);
      },
      showProperty: function() {
        ide_event.trigger(ide_event.FORCE_OPEN_PROPERTY);
      },
      onItemSelected: function(type, id) {
        ide_event.trigger(ide_event.OPEN_PROPERTY, type, id);
      },
      showStateEditor: function() {
        var com;
        com = this.workspace.getSelectedComponent();
        if (com) {
          ide_event.trigger(ide_event.SHOW_STATE_EDITOR, com.id);
        }
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/DesignAws',["Design", "constant", 'CloudResources'], function(Design, constant, CloudResources) {
    var AwsDesign;
    AwsDesign = Design.extend({
      serialize: function(options) {
        var json;
        json = Design.prototype.serialize.apply(this, arguments);
        json.property.stoppable = this.isStoppable();
        return json;
      },
      preserveName: function() {
        var comp, names, uid, _ref;
        if (!this.modeIsAppEdit()) {
          return;
        }
        this.__preservedNames = {};
        _ref = this.__componentMap;
        for (uid in _ref) {
          comp = _ref[uid];
          switch (comp.type) {
            case constant.RESTYPE.ELB:
            case constant.RESTYPE.ASG:
            case constant.RESTYPE.LC:
            case constant.RESTYPE.DBINSTANCE:
              names = this.__preservedNames[comp.type] || (this.__preservedNames[comp.type] = {});
              names[comp.get("name")] = true;
          }
        }
      },
      isStoppable: function() {
        var InstanceModel, LcModel, allObjects, ami, bdm, comp, ins, instanceAry, vpc, vpcId, _i, _j, _k, _len, _len1, _len2, _ref;
        InstanceModel = Design.modelClassForType(constant.RESTYPE.INSTANCE);
        LcModel = Design.modelClassForType(constant.RESTYPE.LC);
        allObjects = InstanceModel.allObjects(this).concat(LcModel.allObjects(this));
        for (_i = 0, _len = allObjects.length; _i < _len; _i++) {
          comp = allObjects[_i];
          ami = comp.getAmi() || comp.get("cachedAmi");
          if (ami && ami.rootDeviceType === 'instance-store') {
            return false;
          }
        }
        vpc = Design.modelClassForType(constant.RESTYPE.VPC).allObjects(this);
        if (vpc.length > 0) {
          vpcId = vpc[0].get("appId");
          instanceAry = CloudResources(constant.RESTYPE.INSTANCE, this.region()).filter(function(m) {
            return m.get("vpcId") === vpcId;
          });
          for (_j = 0, _len1 = instanceAry.length; _j < _len1; _j++) {
            ins = instanceAry[_j];
            ins = ins.attributes;
            _ref = ins.blockDeviceMapping || [];
            for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
              bdm = _ref[_k];
              if (bdm.ebs === null && bdm.VirtualName) {
                return false;
              }
            }
          }
        }
        return true;
      },
      instancesNoUserData: function() {
        var instanceModels, lcModels, result;
        result = true;
        instanceModels = Design.modelClassForType(constant.RESTYPE.INSTANCE).allObjects();
        _.each(instanceModels, function(instanceModel) {
          result = instanceModel.get('userData') ? false : true;
          return null;
        });
        lcModels = Design.modelClassForType(constant.RESTYPE.LC).allObjects();
        _.each(lcModels, function(lcModel) {
          result = lcModel.get('userData') ? false : true;
          return null;
        });
        return result;
      },
      getCost: function(stopped) {
        var c, comp, cost, costList, currency, e, priceMap, totalFee, uid, _i, _len, _ref, _ref1;
        costList = [];
        totalFee = 0;
        priceMap = App.model.getPriceData(this.region());
        if (priceMap) {
          currency = priceMap.currency || 'USD';
          _ref = this.__componentMap;
          for (uid in _ref) {
            comp = _ref[uid];
            if (stopped && !((_ref1 = comp.type) === constant.RESTYPE.EIP || _ref1 === constant.RESTYPE.VOL || _ref1 === constant.RESTYPE.ELB || _ref1 === constant.RESTYPE.CW)) {
              continue;
            }
            if (comp.getCost) {
              cost = null;
              try {
                cost = comp.getCost(priceMap, currency);
              } catch (_error) {
                e = _error;
                console.error("Error occured when calc-ing price:", e);
              }
              if (!cost) {
                continue;
              }
              if (cost.length) {
                for (_i = 0, _len = cost.length; _i < _len; _i++) {
                  c = cost[_i];
                  totalFee += c.fee;
                  costList.push(c);
                }
              } else {
                totalFee += cost.fee;
                costList.push(cost);
              }
            }
          }
          costList = _.sortBy(costList, "resource");
        }
        return {
          costList: costList,
          totalFee: Math.round(totalFee * 100) / 100
        };
      }
    });
    return AwsDesign;
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('workspaces/awseditor/AwsEditorStack',["CoreEditor", "./AwsViewStack", "./model/DesignAws", "CloudResources", "constant"], function(CoreEditor, StackView, DesignAws, CloudResources, constant) {

    /*
      StackEditor is mainly for editing a stack
     */
    var StackEditor;
    StackEditor = (function(_super) {
      __extends(StackEditor, _super);

      function StackEditor() {
        return StackEditor.__super__.constructor.apply(this, arguments);
      }

      StackEditor.prototype.viewClass = StackView;

      StackEditor.prototype.designClass = DesignAws;

      StackEditor.prototype.title = function() {
        return (this.design || this.opsModel).get("name") + " - stack";
      };

      StackEditor.prototype.isReady = function() {
        var region, stateModule;
        if (this.__hasAdditionalData) {
          return true;
        }
        if (!this.opsModel.hasJsonData() || !this.opsModel.isPersisted()) {
          return false;
        }
        region = this.opsModel.get("region");
        stateModule = this.opsModel.getJsonData().agent.module;
        return CloudResources(constant.RESTYPE.AZ, region).isReady() && CloudResources(constant.RESTYPE.SNAP, region).isReady() && CloudResources(constant.RESTYPE.DBENGINE, region).isReady() && CloudResources(constant.RESTYPE.DBOG, region).isReady() && CloudResources(constant.RESTYPE.DBSNAP, region).isReady() && CloudResources("QuickStartAmi", region).isReady() && CloudResources("MyAmi", region).isReady() && CloudResources("FavoriteAmi", region).isReady() && !!App.model.getStateModule(stateModule.repo, stateModule.tag) && this.hasAmiData();
      };

      StackEditor.prototype.fetchAdditionalData = function() {
        var jobs, region, stateModule;
        region = this.opsModel.get("region");
        stateModule = this.opsModel.getJsonData().agent.module;
        jobs = [App.model.fetchStateModule(stateModule.repo, stateModule.tag), CloudResources(constant.RESTYPE.AZ, region).fetch(), CloudResources(constant.RESTYPE.SNAP, region).fetch(), CloudResources("QuickStartAmi", region).fetch(), CloudResources("MyAmi", region).fetch(), CloudResources("FavoriteAmi", region).fetch(), this.fetchAmiData(), this.fetchRdsData(false)];
        return Q.all(jobs);
      };

      StackEditor.prototype.hasAmiData = function() {
        var cln, comp, imageId, json, uid, _ref;
        json = this.opsModel.getJsonData();
        cln = CloudResources(constant.RESTYPE.AMI, this.opsModel.get("region"));
        _ref = json.component;
        for (uid in _ref) {
          comp = _ref[uid];
          if (comp.type === constant.RESTYPE.INSTANCE || comp.type === constant.RESTYPE.LC) {
            imageId = comp.resource.ImageId;
            if (imageId && !cln.get(imageId) && !cln.isInvalidAmiId(imageId)) {
              return false;
            }
          }
        }
        return true;
      };

      StackEditor.prototype.fetchAmiData = function() {
        var comp, imageId, json, toFetch, uid, _ref;
        json = this.opsModel.getJsonData();
        toFetch = {};
        _ref = json.component;
        for (uid in _ref) {
          comp = _ref[uid];
          if (comp.type === constant.RESTYPE.INSTANCE || comp.type === constant.RESTYPE.LC) {
            imageId = comp.resource.ImageId;
            if (imageId) {
              toFetch[imageId] = true;
            }
          }
        }
        return CloudResources(constant.RESTYPE.AMI, this.opsModel.get("region")).fetchAmis(_.keys(toFetch));
      };

      StackEditor.prototype.isRdsDisabled = function() {
        return !!this.__disableRds;
      };

      StackEditor.prototype.fetchRdsData = function(isForce) {
        var method, region, self;
        if (isForce == null) {
          isForce = true;
        }
        self = this;
        region = this.opsModel.get("region");
        if (isForce) {
          method = "fetchForce";
        } else {
          method = "fetch";
        }
        return Q.all([CloudResources(constant.RESTYPE.DBENGINE, region)[method](), CloudResources(constant.RESTYPE.DBOG, region)[method](), CloudResources(constant.RESTYPE.DBSNAP, region)[method]()]).then(function() {
          if (self.__disableRds !== false) {
            self.__disableRds = false;
            return self.trigger("toggleRdsFeature", true);
          }
        }, function(error) {
          if (error.awsErrorCode) {
            console.error("No authority to load rds data. Rds feature will be disabled.", error);
            self.__disableRds = true;
            self.trigger("toggleRdsFeature", false);
            return;
          }
          throw error;
        });
      };

      StackEditor.prototype.isModified = function() {
        if (!this.opsModel.isPersisted()) {
          return true;
        }
        return this.design && this.design.isModified();
      };

      return StackEditor;

    })(CoreEditor);
    return StackEditor;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/AwsViewApp',["CoreEditorViewApp", "./subviews/ResourcePanel", "./subviews/PropertyPanel", "./subviews/Toolbar", "./subviews/Statusbar", "./canvas/CanvasViewAws", "event"], function(CoreEditorViewApp, ResourcePanel, PropertyPanel, Toolbar, Statusbar, CanvasView, ide_event) {
    return CoreEditorViewApp.extend({
      constructor: function(options) {
        _.extend(options, {
          TopPanel: Toolbar,
          RightPanel: PropertyPanel,
          LeftPanel: ResourcePanel,
          BottomPanel: Statusbar,
          CanvasView: CanvasView
        });
        return CoreEditorViewApp.apply(this, arguments);
      },
      showProperty: function() {
        ide_event.trigger(ide_event.FORCE_OPEN_PROPERTY);
      },
      onItemSelected: function(type, id) {
        ide_event.trigger(ide_event.OPEN_PROPERTY, type, id);
      },
      showStateEditor: function() {
        var com;
        com = this.workspace.getSelectedComponent();
        if (com) {
          ide_event.trigger(ide_event.SHOW_STATE_EDITOR, com.id);
        }
      }
    });
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('workspaces/awseditor/AwsEditorApp',["CoreEditorApp", "./AwsViewApp", "./model/DesignAws", "./AwsEditorStack", "OpsModel", "CloudResources", "constant"], function(CoreEditorApp, AppView, DesignAws, StackEditor, OpsModel, CloudResources, constant) {
    var AppEditor;
    AppEditor = (function(_super) {
      __extends(AppEditor, _super);

      function AppEditor() {
        return AppEditor.__super__.constructor.apply(this, arguments);
      }

      AppEditor.prototype.viewClass = AppView;

      AppEditor.prototype.designClass = DesignAws;

      AppEditor.prototype.fetchAdditionalData = function() {
        var region, self, stateModule;
        self = this;
        region = this.opsModel.get("region");
        stateModule = this.opsModel.getJsonData().agent.module;
        return Q.all([App.model.fetchStateModule(stateModule.repo, stateModule.tag), CloudResources(constant.RESTYPE.AZ, region).fetch(), CloudResources(constant.RESTYPE.SNAP, region).fetch(), CloudResources(constant.RESTYPE.DHCP, region).fetch(), CloudResources("QuickStartAmi", region).fetch(), CloudResources("MyAmi", region).fetch(), CloudResources("FavoriteAmi", region).fetch(), this.loadVpcResource(), this.fetchAmiData(), this.fetchRdsData(false)]).fail(function(err) {
          return self.__handleDataError(err);
        });
      };

      AppEditor.prototype.__handleDataError = function(err) {
        if (err.error === 286) {
          this.view.showVpcNotExist(this.opsModel.get("name"), (function(_this) {
            return function() {
              return _this.opsModel.terminate(true);
            };
          })(this));
          this.remove();
          return;
        }
        throw err;
      };

      AppEditor.prototype.fetchAmiData = StackEditor.prototype.fetchAmiData;

      AppEditor.prototype.fetchRdsData = StackEditor.prototype.fetchRdsData;

      AppEditor.prototype.isRdsDisabled = StackEditor.prototype.isRdsDisabled;

      return AppEditor;

    })(CoreEditorApp);
    return AppEditor;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/EniAttachment',["constant", "ConnectionModel", "i18n!/nls/lang.js"], function(constant, ConnectionModel, lang) {
    var C;
    C = ConnectionModel.extend({
      type: "EniAttachment",
      defaults: {
        index: 1
      },
      initialize: function(attributes) {
        var ami;
        ami = this.getTarget(constant.RESTYPE.INSTANCE);
        if (attributes && attributes.index) {
          this.ensureAttachmentOrder();
        } else {
          this.attributes.index = ami.connectionTargets("EniAttachment").length + 1;
        }
        return null;
      },
      ensureAttachmentOrder: function() {
        var ami, amiConnections, attach, attachments, cnn, idx, newArray, _i, _j, _k, _len, _len1, _len2, _ref;
        ami = this.getTarget(constant.RESTYPE.INSTANCE);
        attachments = ami.connections("EniAttachment");
        for (_i = 0, _len = attachments.length; _i < _len; _i++) {
          attach = attachments[_i];
          if (attach !== this && attach.attributes.index === this.attributes.index) {
            for (idx = _j = 0, _len1 = attachments.length; _j < _len1; idx = ++_j) {
              attach = attachments[idx];
              attach.attributes.index = idx + 1;
              attach.getOtherTarget(ami).updateName();
            }
            return;
          }
        }
        newArray = attachments.sort(function(a, b) {
          return a.attributes.index - b.attributes.index;
        });
        if (attachments.indexOf(this) !== newArray.indexOf(this)) {
          amiConnections = [];
          _ref = ami.get("__connections");
          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
            cnn = _ref[_k];
            if (cnn.type !== "EniAttachment") {
              amiConnections.push(cnn);
            }
          }
          ami.attributes.__connections = amiConnections.concat(newArray);
        }
        return null;
      },
      remove: function() {
        var SgModel, ami, attach, attachments, eni, startIdx;
        ConnectionModel.prototype.remove.apply(this, arguments);
        ami = this.getTarget(constant.RESTYPE.INSTANCE);
        eni = this.getTarget(constant.RESTYPE.ENI);
        if (!ami.isRemoved()) {
          attachments = ami.connections("EniAttachment");
          startIdx = 1;
          while (startIdx <= attachments.length) {
            attach = attachments[startIdx - 1];
            if (attach.attributes.index !== startIdx) {
              attach.attributes.index = startIdx;
              attach.getTarget(constant.RESTYPE.ENI).updateName();
            }
            ++startIdx;
          }
        }
        if (!ami.isRemoved() && !eni.isRemoved()) {
          SgModel = Design.modelClassForType(constant.RESTYPE.SG);
          SgModel.tryDrawLine(ami, eni);
        }
        return null;
      },
      portDefs: {
        port1: {
          name: "instance-attach",
          type: constant.RESTYPE.INSTANCE
        },
        port2: {
          name: "eni-attach",
          type: constant.RESTYPE.ENI
        }
      }
    }, {
      isConnectable: function(p1Comp, p2Comp) {
        var eni, instance, maxEniCount, p1p, p2p;
        p1p = p1Comp.parent();
        p2p = p2Comp.parent();
        if (!p1p || !p2p) {
          return false;
        }
        if (p1p.type === constant.RESTYPE.SUBNET) {
          p1p = p1p.parent();
          p2p = p2p.parent();
        }
        if (p1p !== p2p) {
          return false;
        }
        if (p1Comp.type === constant.RESTYPE.INSTANCE) {
          instance = p1Comp;
          eni = p2Comp;
        } else {
          instance = p2Comp;
          eni = p1Comp;
        }
        if (eni.connections("EniAttachment").length > 0) {
          return false;
        }
        maxEniCount = instance.getMaxEniCount();
        if (instance.connections("EniAttachment").length + 1 >= maxEniCount) {
          return sprintf(lang.CANVAS.CVS_WARN_EXCEED_ENI_LIMIT, instance.get("name"), instance.get("instanceType"), maxEniCount);
        }
        if (instance.getEmbedEni().get("assoPublicIp") === true) {
          return {
            confirm: true,
            title: lang.CANVAS.ATTACH_NETWORK_INTERFACE_TO_INTERFACE,
            action: lang.CANVAS.ATTACH_AND_REMOVE_PUBLIC_IP,
            template: MC.template.modalAttachingEni({
              host: instance.get("name"),
              eni: eni.get("name")
            })
          };
        }
        return true;
      }
    });
    return C;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/VPNConnection',["constant", "ConnectionModel"], function(constant, ConnectionModel) {
    var C;
    C = ConnectionModel.extend({
      type: constant.RESTYPE.VPN,
      defaults: function() {
        return {
          routes: []
        };
      },
      portDefs: {
        port1: {
          name: "vgw-vpn",
          type: constant.RESTYPE.VGW
        },
        port2: {
          name: "cgw-vpn",
          type: constant.RESTYPE.CGW
        }
      },
      serialize: function(component_data) {
        var cgw, routes, vgw;
        vgw = this.getTarget(constant.RESTYPE.VGW);
        cgw = this.getTarget(constant.RESTYPE.CGW);
        if (cgw.isDynamic()) {
          routes = [];
        } else {
          routes = _.map(this.get("routes"), function(r) {
            return {
              DestinationCidrBlock: r
            };
          });
        }
        component_data[this.id] = {
          name: "vpn:" + cgw.get("name"),
          type: this.type,
          uid: this.id,
          resource: {
            CustomerGatewayId: cgw.createRef("CustomerGatewayId"),
            Options: {
              StaticRoutesOnly: !cgw.isDynamic()
            },
            Type: "ipsec.1",
            Routes: routes,
            VpnConnectionId: this.get("appId"),
            VpnGatewayId: vgw.createRef("VpnGatewayId")
          }
        };
        return null;
      }
    }, {
      handleTypes: constant.RESTYPE.VPN,
      deserialize: function(data, layout_data, resolve) {
        var cgw, vpn;
        cgw = resolve(MC.extractID(data.resource.CustomerGatewayId));
        vpn = resolve(MC.extractID(data.resource.VpnGatewayId));
        if (!cgw || !vpn) {
          return;
        }
        return new C(cgw, vpn, {
          id: data.uid,
          appId: data.resource.VpnConnectionId,
          routes: _.map(data.resource.Routes, function(r) {
            return r.DestinationCidrBlock;
          })
        });
      }
    });
    return C;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/DbReplication',["constant", "ConnectionModel"], function(constant, ConnectionModel) {
    return ConnectionModel.extend({
      type: "DbReplication",
      portDefs: {
        port1: {
          name: "replica",
          type: constant.RESTYPE.DBINSTANCE
        },
        port2: {
          name: "replica",
          type: constant.RESTYPE.DBINSTANCE
        }
      },
      master: function() {
        return this.__port1Comp;
      },
      slave: function() {
        return this.__port2Comp;
      },
      isRemovable: function() {
        return false;
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/InstanceModel',["ComplexResModel", "Design", "constant", "i18n!/nls/lang.js", 'CloudResources'], function(ComplexResModel, Design, constant, lang, CloudResources) {
    var Model, emptyArray;
    emptyArray = [];
    Model = ComplexResModel.extend({
      type: constant.RESTYPE.INSTANCE,
      newNameTmpl: "host-",
      defaults: function() {
        return {
          count: 1,
          imageId: '',
          tenancy: 'default',
          ebsOptimized: false,
          instanceType: "m1.small",
          monitoring: false,
          userData: "",
          volumeList: [],
          rdSize: 0,
          rdIops: 0,
          rdType: 'gp2',
          cachedAmi: null,
          state: null
        };
      },
      initialize: function(attr, option) {
        var EniModel, KpModel, SgAsso, SgModel, defaultKp, defaultSg, tenancy, volSize, vpc;
        option = option || {};
        if (option.cloneSource) {
          attr.imageId = option.cloneSource.get("imageId");
        }
        console.assert(attr.imageId, "Invalid attributes when creating InstanceModel", attr);
        this.setAmi(attr.imageId);
        if (option.createByUser || option.cloneSource) {
          EniModel = Design.modelClassForType(constant.RESTYPE.ENI);
          this.setEmbedEni(new EniModel({
            name: "eni0",
            assoPublicIp: false
          }, {
            instance: this
          }));
        }
        if (option.cloneSource) {
          this.clone(option.cloneSource);
        } else if (option.createByUser) {
          this.initInstanceType();
        }
        if (!this.get("rdSize")) {
          volSize = this.getAmiRootDeviceVolumeSize();
          if (volSize > 0) {
            this.set("rdSize", volSize);
          }
        }
        if (option.createByUser && !option.cloneSource) {
          KpModel = Design.modelClassForType(constant.RESTYPE.KP);
          defaultKp = KpModel.getDefaultKP();
          if (defaultKp) {
            defaultKp.assignTo(this);
          } else {
            console.error("No DefaultKP found when initialize InstanceModel");
          }
          SgModel = Design.modelClassForType(constant.RESTYPE.SG);
          defaultSg = SgModel.getDefaultSg();
          if (defaultSg) {
            SgAsso = Design.modelClassForType("SgAsso");
            new SgAsso(this, defaultSg);
          } else {
            console.error("No DefaultSG found when initialize InstanceModel");
          }
        }
        tenancy = this.get("tenancy");
        vpc = Design.modelClassForType(constant.RESTYPE.VPC).theVPC();
        if (vpc && !vpc.isDefaultTenancy()) {
          tenancy = "dedicated";
        }
        this.setTenancy(tenancy);
        return null;
      },
      groupMembers: function() {
        if (!this.__groupMembers) {
          this.__groupMembers = [];
        }
        return this.__groupMembers;
      },
      getAvailabilityZone: function() {
        var p;
        p = this.parent();
        if (p.type === constant.RESTYPE.SUBNET) {
          return p.parent();
        } else {
          return p;
        }
      },
      getOSFamily: function() {
        var ami;
        ami = this.getAmi() || this.get("cachedAmi");
        if (!ami || !ami.osType || !ami.osFamily) {
          console.warn("Cannot find ami infomation for instance :", this);
          return "linux";
        }
        if (ami.osFamily) {
          return ami.osFamily;
        }
        return CloudResources(constant.RESTYPE.AMI, this.design.region()).getOSFamily(ami.id);
      },
      initInstanceType: function() {
        var i, type, _i, _len, _ref;
        _ref = this.getInstanceTypeList();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.name !== "t1.micro") {
            type = i.name;
            break;
          }
        }
        this.attributes.instanceType = type || "m1.small";
      },
      getCost: function(priceMap, currency) {
        var ami, count, cw_fee, fee, formatedFee, instanceType, name, osFamily, osType, priceObj, t, unit, _i, _len, _ref;
        if (!priceMap.instance) {
          return null;
        }
        ami = this.getAmi() || this.get("cachedAmi");
        osType = ami ? ami.osType : "linux-other";
        osFamily = this.getOSFamily();
        instanceType = this.get("instanceType").split(".");
        unit = priceMap.instance.unit;
        fee = priceMap.instance[instanceType[0]][instanceType[1]];
        fee = fee ? fee.onDemand : void 0;
        if (fee) {
          if (fee[osFamily] === void 0 && osFamily.indexOf("mswin") === 0) {
            osFamily = "mswin";
          }
          fee = fee[osFamily];
        }
        fee = fee ? fee[currency] : void 0;
        if (!fee) {
          return null;
        }
        if (unit === "perhr") {
          formatedFee = fee + "/hr";
          fee *= 24 * 30;
        } else {
          formatedFee = fee + "/mo";
        }
        count = this.get("count") || 1;
        name = this.get("name");
        if (count > 1) {
          name += " (x" + count + ")";
          fee *= count;
        }
        priceObj = {
          resource: name,
          type: this.get("instanceType"),
          fee: fee,
          formatedFee: formatedFee
        };
        if (this.get("monitoring")) {
          _ref = priceMap.cloudwatch.types;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            t = _ref[_i];
            if (t.ec2Monitoring) {
              fee = t.ec2Monitoring[currency];
              cw_fee = {
                resource: this.get("name") + "-monitoring",
                type: "CloudWatch",
                fee: fee * count,
                formatedFee: fee + "/mo"
              };
              return [priceObj, cw_fee];
            }
          }
        }
        return priceObj;
      },
      isReparentable: function(newParent) {
        var check;
        if (newParent.type === constant.RESTYPE.ASG || newParent.type === "ExpandedAsg") {
          return false;
        }
        if (newParent.type === constant.RESTYPE.SUBNET) {
          if (newParent.parent() !== this.parent().parent()) {
            check = true;
          }
        } else {
          check = true;
        }
        if (check && this.connectionTargets("EniAttachment").length > 0) {
          return lang.CANVAS.ERR_MOVE_ATTACHED_ENI;
        }
        return true;
      },
      connect: function(cn) {
        var eni;
        if (cn.type === "EniAttachment") {
          eni = this.getEmbedEni();
          if (eni) {
            return eni.set("assoPublicIp", false);
          }
        }
      },
      setPrimaryEip: function(toggle) {
        var eni;
        eni = this.getEmbedEni();
        if (eni) {
          eni.setPrimaryEip(toggle);
        } else {
          this.set("hasEip", toggle);
          if (toggle) {
            if (!this.attributes.eipData) {
              this.attributes.eipData = {};
            }
            if (!this.attributes.eipData.id) {
              this.attributes.eipData.id = MC.guid();
            }
          }
        }
      },
      hasPrimaryEip: function() {
        var eni;
        eni = this.getEmbedEni();
        if (eni) {
          return eni.hasPrimaryEip();
        } else {
          return this.get("hasEip");
        }
      },
      hasAutoAssignPublicIp: function() {
        return this.getEmbedEni().get('assoPublicIp');
      },
      setCount: function(count) {
        var c, eni, route, _i, _j, _len, _len1, _ref, _ref1;
        this.set("count", count);
        if (count > 1) {
          route = this.connections('RTB_Route')[0];
          if (route) {
            route.remove();
          }
        }
        _ref = this.connectionTargets("EniAttachment");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eni = _ref[_i];
          if (count > 1) {
            _ref1 = eni.connections("RTB_Route");
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              c = _ref1[_j];
              c.remove();
            }
          }
        }
        return null;
      },
      isDefaultTenancy: function() {
        var VpcModel, vpc;
        VpcModel = Design.modelClassForType(constant.RESTYPE.VPC);
        vpc = VpcModel.allObjects()[0];
        if (vpc && !vpc.isDefaultTenancy()) {
          return false;
        } else {
          return this.get("tenancy") !== "dedicated";
        }
        return null;
      },
      setAmi: function(amiId) {
        var ami, cached, minRdSize, rdEbs, rdName;
        this.set("imageId", amiId);
        ami = this.getAmi();
        cached = this.get("cachedAmi");
        if (ami && cached) {
          cached.osType = ami.osType;
          cached.architecture = ami.architecture;
          cached.rootDeviceType = ami.rootDeviceType;
        }
        if (ami && ami.blockDeviceMapping && !$.isEmptyObject(ami.blockDeviceMapping)) {
          rdName = ami.rootDeviceName;
          rdEbs = ami.blockDeviceMapping[rdName];
          if (!rdEbs) {
            _.each(ami.blockDeviceMapping, function(value, key) {
              if (rdName.indexOf(key) !== -1 && !rdEbs) {
                rdEbs = value;
              }
              return null;
            });
          }
          minRdSize = rdEbs ? parseInt(rdEbs.volumeSize, 10) : 10;
          if (this.get("rdSize") < minRdSize) {
            this.set("rdSize", minRdSize);
          }
        }
        return null;
      },
      getAmi: function() {
        var ami;
        ami = CloudResources(constant.RESTYPE.AMI, this.design().region()).get(this.get("imageId"));
        if (ami) {
          return ami.toJSON();
        } else {
          return null;
        }
      },
      getBlockDeviceMapping: function() {
        var ami, blockDeviceMapping, rdEbs, rdName;
        ami = this.getAmi() || this.get("cachedAmi");
        if (ami && ami.rootDeviceType === "ebs" && ami.blockDeviceMapping && !$.isEmptyObject(ami.blockDeviceMapping)) {
          rdName = ami.rootDeviceName;
          rdEbs = ami.blockDeviceMapping[rdName];
          if (!rdEbs) {
            _.each(ami.blockDeviceMapping, function(value, key) {
              if (rdName.indexOf(key) !== -1 && !rdEbs) {
                rdEbs = value;
                rdName = key;
              }
              return null;
            });
          }
          blockDeviceMapping = [
            {
              DeviceName: rdName,
              Ebs: {
                SnapshotId: rdEbs.snapshotId,
                VolumeSize: this.get("rdSize") || rdEbs.volumeSize,
                VolumeType: this.get('rdType')
              }
            }
          ];
          if (this.get("rdIops") && parseInt(this.get("rdSize"), 10) >= 10) {
            blockDeviceMapping[0].Ebs.Iops = this.get("rdIops");
          }
        }
        return blockDeviceMapping || [];
      },
      getAmiRootDevice: function() {
        var amiInfo, rd, rdEbs, rdName;
        amiInfo = this.getAmi() || this.get("cachedAmi");
        rd = null;
        if (amiInfo && amiInfo.rootDeviceType === "ebs" && amiInfo.blockDeviceMapping) {
          rdName = amiInfo.rootDeviceName;
          rdEbs = amiInfo.blockDeviceMapping[rdName];
          if (rdName && !rdEbs) {
            _.each(amiInfo.blockDeviceMapping, function(value, key) {
              if (rdName.indexOf(key) !== -1 && !rdEbs) {
                rdEbs = value;
                rdName = key;
              }
              return null;
            });
          }
          if (rdName && rdEbs) {
            rd = {
              "DeviceName": rdName,
              "Ebs": {
                "VolumeSize": Number(rdEbs.volumeSize),
                "SnapshotId": rdEbs.snapshotId,
                "VolumeType": rdEbs.volumeType
              }
            };
            if (rdEbs.volumeType === "io1") {
              rd.Ebs.Iops = rdEbs.iops;
            }
          } else {
            console.warn("getAmiRootDevice(): can not found root device of AMI(" + this.get("imageId") + ")", this);
          }
        }
        return rd;
      },
      getAmiRootDeviceVolumeSize: function() {
        var amiInfo, rd, volSize, volumeSize;
        volSize = 0;
        amiInfo = this.getAmi();
        if (amiInfo) {
          if (amiInfo.osType === "windows") {
            volumeSize = 30;
          } else {
            volumeSize = 10;
          }
          rd = this.getAmiRootDevice();
          if (rd) {
            volSize = rd.Ebs.VolumeSize;
          } else {
            console.warn("getAmiRootDeviceVolumeSize(): use default volumeSize " + volSize, this);
          }
        } else {
          console.warn("getAmiRootDeviceVolumeSize(): unknown volumeSize for " + this.get("imageId"));
        }
        return volSize;
      },
      getAmiRootDeviceName: function() {
        var rd;
        rd = this.getAmiRootDevice();
        if (rd && rd.DeviceName) {
          return rd.DeviceName;
        } else {
          return "";
        }
      },
      getInstanceTypeConfig: function(type) {
        var config;
        config = App.model.getInstanceTypeConfig(this.design().region());
        if (config) {
          return config[type || this.get("instanceType")];
        }
        return null;
      },
      getMaxEniCount: function() {
        var config;
        config = this.getInstanceTypeConfig();
        if (config) {
          config = config.max_eni;
        }
        return config || 16;
      },
      isEbsOptimizedEnabled: function() {
        var EbsMap, ami, instanceType;
        ami = this.getAmi() || this.get("cachedAmi");
        if (ami && ami.rootDeviceType === "instance-store") {
          return false;
        }
        instanceType = this.getInstanceTypeConfig();
        if (instanceType && instanceType.ebs_optimized) {
          return instanceType.ebs_optimized === 'Yes';
        }
        EbsMap = {
          "m1.large": true,
          "m1.xlarge": true,
          "m2.2xlarge": true,
          "m2.4xlarge": true,
          "m3.xlarge": true,
          "m3.2xlarge": true,
          "c1.xlarge": true,
          "c3.xlarge": true,
          "c3.2xlarge": true,
          "c3.4xlarge": true,
          "g2.2xlarge": true,
          "i2.xlarge": true,
          "i2.2xlarge": true,
          "i2.4xlarge": true
        };
        return !!EbsMap[this.get("instanceType")];
      },
      setInstanceType: function(type) {
        var eni, enis, volumeList, _i, _len;
        if (type === "t1.micro" && !this.isDefaultTenancy()) {
          type = "m1.small";
        }
        this.set("instanceType", type);
        if (!this.isEbsOptimizedEnabled()) {
          this.set("ebsOptimized", false);
        }
        volumeList = this.get('volumeList');
        if (volumeList) {
          _.each(volumeList, function(vol) {
            if (!vol.isSupportEncrypted()) {
              vol.set('encrypted', false);
            }
            return null;
          });
        }
        if (this.getEmbedEni) {
          enis = this.connectionTargets("EniAttachment");
          enis.push(this.getEmbedEni());
          for (_i = 0, _len = enis.length; _i < _len; _i++) {
            eni = enis[_i];
            eni.limitIpAddress();
          }
        }
        return null;
      },
      setTenancy: function(tenancy) {
        this.set("tenancy", tenancy);
        if (tenancy === "dedicated" && this.get("instanceType") === "t1.micro") {
          this.initInstanceType();
        }
        return null;
      },
      getInstanceType: function() {
        return Model.getInstanceType(this.getAmi(), this.design().region());
      },
      getInstanceTypeList: function() {
        var instanceType, region, tenancy;
        tenancy = this.isDefaultTenancy();
        instanceType = this.get("instanceType");
        region = this.design().region();
        return _.map(this.getInstanceType(), function(value) {
          var configs;
          configs = App.model.getInstanceTypeConfig(region);
          if (!configs) {
            return {};
          }
          configs = configs[value].formated_desc;
          return {
            main: configs[0],
            ecu: configs[1],
            core: configs[2],
            mem: configs[3],
            name: value,
            selected: instanceType === value,
            hide: !tenancy && value === "t1.micro"
          };
        });
      },
      remove: function() {
        var eni, v, _i, _j, _len, _len1, _ref, _ref1;
        if (this.__mainEni) {
          this.__mainEni.remove();
        }
        _ref = (this.get("volumeList") || emptyArray).slice(0);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          v.remove();
        }
        if (Design.instance().modeIsAppEdit()) {
          _ref1 = this.connectionTargets("EniAttachment");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            eni = _ref1[_j];
            eni.remove();
          }
        }
        ComplexResModel.prototype.remove.call(this);
        return null;
      },
      isRemovable: function() {
        var state;
        state = this.get("state");
        if ((state && _.isArray(state) && state.length > 0) || ($('#state-editor-model').is(':visible') && $('#state-editor-model .state-list .state-item').length >= 1)) {
          return MC.template.NodeStateRemoveConfirmation({
            name: this.get("name")
          });
        }
        return true;
      },
      clone: function(srcTarget) {
        var Volume, state, v, _i, _j, _len, _len1, _ref, _ref1;
        this.cloneAttributes(srcTarget, {
          reserve: "volumeList",
          copyConnection: ["KeypairUsage", "SgAsso", "ElbAmiAsso"]
        });
        _ref = this.get("state") || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          state = _ref[_i];
          state.id = "state-" + this.design().guid();
        }
        Volume = Design.modelClassForType(constant.RESTYPE.VOL);
        _ref1 = srcTarget.get("volumeList") || [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          v = _ref1[_j];
          new Volume({
            owner: this
          }, {
            cloneSource: v
          });
        }
        this.getEmbedEni().clone(srcTarget.getEmbedEni());
        return null;
      },
      setEmbedEni: function(eni) {
        this.__mainEni = eni;
        return null;
      },
      getEmbedEni: function() {
        return this.__mainEni;
      },
      getRealGroupMemberIds: function() {
        var c, mem, members, _i, _len, _ref;
        this.ensureEnoughMember();
        c = this.get("count");
        members = [this.id];
        _ref = this.groupMembers();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mem = _ref[_i];
          if (members.length >= c) {
            break;
          }
          members.push(mem.id);
        }
        return members;
      },
      ensureEnoughMember: function() {
        var totalCount;
        totalCount = this.get("count") - 1;
        while (this.groupMembers().length < totalCount) {
          this.groupMembers().push({
            id: MC.guid(),
            appId: "",
            eipData: {
              id: MC.guid()
            }
          });
        }
        return null;
      },
      onParentChanged: function() {
        var eniModel;
        eniModel = this.getEmbedEni();
        if (eniModel) {
          return eniModel.onParentChanged();
        }
      },
      generateJSON: function() {
        var blockDeviceMapping, component, name, p, tenancy, vpc;
        tenancy = this.get("tenancy");
        p = this.parent();
        if (p.type === constant.RESTYPE.SUBNET) {
          vpc = p.parent().parent();
          if (!vpc.isDefaultTenancy()) {
            tenancy = "dedicated";
          }
        }
        name = this.get("name");
        if (this.get("count") > 1) {
          name += "-0";
        }
        blockDeviceMapping = this.getBlockDeviceMapping();
        component = {
          type: this.type,
          uid: this.id,
          name: name,
          description: this.get("description") || "",
          index: 0,
          number: this.get("count"),
          serverGroupUid: this.id,
          serverGroupName: this.get("name"),
          state: this.get("state"),
          resource: {
            UserData: {
              Base64Encoded: false,
              Data: this.get("userData")
            },
            BlockDeviceMapping: blockDeviceMapping,
            Placement: {
              Tenancy: tenancy === "dedicated" ? "dedicated" : "",
              AvailabilityZone: this.getAvailabilityZone().createRef()
            },
            InstanceId: this.get("appId"),
            ImageId: this.get("imageId"),
            KeyName: this.get("keyName"),
            EbsOptimized: this.isEbsOptimizedEnabled() ? this.get("ebsOptimized") : false,
            VpcId: this.getVpcRef(),
            SubnetId: this.getSubnetRef(),
            Monitoring: this.get("monitoring") ? "enabled" : "disabled",
            NetworkInterface: [],
            InstanceType: this.get("instanceType"),
            DisableApiTermination: false,
            ShutdownBehavior: "terminate",
            SecurityGroup: [],
            SecurityGroupId: []
          }
        };
        return component;
      },
      createEipJson: function(eipData, instanceId) {
        instanceId = instanceId || this.id;
        return {
          uid: eipData.id,
          type: constant.RESTYPE.EIP,
          index: 0,
          name: "EIP",
          resource: {
            Domain: "standard",
            InstanceId: this.createRef("InstanceId", instanceId),
            AllocationId: eipData.allocationId || "",
            NetworkInterfaceId: "",
            PublicIp: eipData.publicIp || ""
          }
        };
      },
      getStateData: function() {
        return this.get("state");
      },
      setStateData: function(stateAryData) {
        return this.set("state", stateAryData);
      },
      setKey: function(keyName, defaultKey) {
        var KpModel, defaultKp, kp;
        KpModel = Design.modelClassForType(constant.RESTYPE.KP);
        defaultKp = KpModel.getDefaultKP();
        if (defaultKey) {
          if (defaultKp) {
            return defaultKp.assignTo(this);
          } else {
            return console.error("No DefaultKP found when initialize InstanceModel");
          }
        } else {
          kp = this.connectionTargets("KeypairUsage")[0];
          kp && kp.dissociate(this);
          return this.set('keyName', keyName);
        }
      },
      getKeyName: function() {
        var kp;
        kp = this.connectionTargets("KeypairUsage")[0];
        if (kp) {
          if (kp.isDefault()) {
            return '$DefaultKeyPair';
          } else {
            return kp.get('name');
          }
        } else {
          return this.get('keyName') || lang.PROP.INSTANCE_NO_KP;
        }
      },
      isDefaultKey: function() {
        var kp;
        kp = this.connectionTargets("KeypairUsage")[0];
        return kp && kp.isDefault();
      },
      isNoKey: function() {
        var kp;
        kp = this.connectionTargets("KeypairUsage")[0];
        return !kp && !this.get('keyName');
      },
      serialize: function() {
        var allResourceArray, ami, attach, eni, eniIndex, eniModels, enis, i, idx, instance, instances, layout, member, memberObj, res, serverGroupOption, v, volume, volumeModels, volumes, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
        allResourceArray = [];
        ami = this.getAmi() || this.get("cachedAmi");
        layout = this.generateLayout();
        if (ami) {
          layout.osType = ami.osType;
          layout.architecture = ami.architecture;
          layout.rootDeviceType = ami.rootDeviceType;
        }
        allResourceArray.push({
          layout: layout
        });
        instances = [this.generateJSON()];
        i = instances.length;
        this.ensureEnoughMember();
        while (i < this.get("count")) {
          member = $.extend(true, {}, instances[0]);
          member.name = this.get("name") + "-" + i;
          member.index = i;
          memberObj = this.groupMembers()[instances.length - 1];
          member.uid = memberObj.id;
          member.resource.InstanceId = memberObj.appId;
          ++i;
          instances.push(member);
        }
        serverGroupOption = {
          number: instances.length,
          instanceId: ""
        };
        volumeModels = this.get("volumeList") || emptyArray;
        eniModels = this.getEmbedEni() ? [this.getEmbedEni()] : [];
        _ref = this.connections("EniAttachment");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attach = _ref[_i];
          eniModels[attach.get("index")] = attach.getOtherTarget(this);
        }
        volumes = [];
        enis = [];
        for (idx = _j = 0, _len1 = instances.length; _j < _len1; idx = ++_j) {
          instance = instances[idx];
          serverGroupOption.instanceId = instance.uid;
          serverGroupOption.instanceName = instance.name + "-";
          for (_k = 0, _len2 = volumeModels.length; _k < _len2; _k++) {
            volume = volumeModels[_k];
            v = volume.generateJSON(idx, serverGroupOption);
            volumes.push(v);
          }
          for (eniIndex = _l = 0, _len3 = eniModels.length; _l < _len3; eniIndex = ++_l) {
            eni = eniModels[eniIndex];
            enis = enis.concat(eni.generateJSON(idx, serverGroupOption, eniIndex));
          }
        }
        _ref1 = instances.concat(volumes).concat(enis);
        for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
          res = _ref1[_m];
          allResourceArray.push({
            component: res
          });
        }
        return allResourceArray;
      }
    }, {
      handleTypes: constant.RESTYPE.INSTANCE,
      getInstanceType: function(ami, region) {
        var data, e;
        if (!ami || !region) {
          return [];
        }
        data = App.model.getOsFamilyConfig(region);
        try {
          data = data[ami.osFamily] || data[constant.OS_TYPE_MAPPING[ami.osType]];
          data = ami.rootDeviceType === "ebs" ? data.ebs : data['instance store'];
          data = data[ami.architecture];
          data = data[ami.virtualizationType || "paravirtual"];
        } catch (_error) {
          e = _error;
          console.error("Invalid instance type list data", ami, App.model.getOsFamilyConfig(region));
          data = [];
        }
        return data || [];
      },
      getEffectiveId: function(instance_id) {
        var asg, data, design, index, insAndEniAry, instance, member, obj, resource_list, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
        design = Design.instance();
        if (design.component(instance_id)) {
          return {
            uid: instance_id,
            mid: null
          };
        }
        insAndEniAry = Design.modelClassForType(constant.RESTYPE.INSTANCE).allObjects();
        insAndEniAry = insAndEniAry.concat(Design.modelClassForType(constant.RESTYPE.ENI).allObjects());
        for (_i = 0, _len = insAndEniAry.length; _i < _len; _i++) {
          instance = insAndEniAry[_i];
          if (instance.get("appId") === instance_id) {
            return {
              uid: instance.id,
              mid: "" + instance.id + "_0"
            };
          } else if (instance.groupMembers) {
            _ref = instance.groupMembers();
            for (index = _j = 0, _len1 = _ref.length; _j < _len1; index = ++_j) {
              member = _ref[index];
              if (member && member.appId === instance_id) {
                return {
                  uid: instance.id,
                  mid: "" + member.id + "_" + (index + 1)
                };
              }
            }
          }
        }
        resource_list = CloudResources(constant.RESTYPE.ASG, Design.instance().region());
        _ref1 = Design.modelClassForType(constant.RESTYPE.ASG).allObjects();
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          asg = _ref1[_k];
          data = (_ref2 = resource_list.get(asg.get('appId'))) != null ? _ref2.toJSON() : void 0;
          if (!data || !data.Instances) {
            continue;
          }
          data = data.Instances;
          _ref3 = data.member || data;
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            obj = _ref3[_l];
            if (obj === instance_id || obj.InstanceId === instance_id) {
              return {
                uid: asg.getLc().id,
                mid: instance_id
              };
            }
          }
        }
        return {
          uid: null,
          mid: null
        };
      },
      deserialize: function(data, layout_data, resolve) {
        var KP, attr, eipData, kpUid, m, members, model, rootDevice, _i, _len;
        if (data.serverGroupUid && data.serverGroupUid !== data.uid) {
          members = resolve(data.serverGroupUid).groupMembers();
          for (_i = 0, _len = members.length; _i < _len; _i++) {
            m = members[_i];
            if (m && m.id === data.uid) {
              console.debug("This instance servergroup member has already deserialized", data);
              return;
            }
          }
          if (data.resource.EipResource) {
            eipData = {
              id: data.resource.EipResource.uid,
              allocationId: data.resource.EipResource.resource.AllocationId,
              publicIp: data.resource.EipResource.resource.PublicIp
            };
          }
          members[data.index - 1] = {
            id: data.uid,
            appId: data.resource.InstanceId,
            eipData: eipData || {
              id: MC.guid()
            }
          };
          return;
        }
        rootDevice = data.resource.BlockDeviceMapping[0];
        if (!rootDevice || _.isString(rootDevice)) {
          rootDevice = {
            Ebs: {
              VolumeSize: 0,
              Iops: ""
            }
          };
        }
        if (!(_.isArray(data.state) && data.state.length)) {
          data.state = null;
        }
        attr = {
          id: data.uid,
          name: data.serverGroupName || data.name,
          description: data.description || "",
          appId: data.resource.InstanceId,
          count: data.number,
          imageId: data.resource.ImageId,
          tenancy: data.resource.Placement.Tenancy,
          ebsOptimized: data.resource.EbsOptimized,
          instanceType: data.resource.InstanceType,
          monitoring: data.resource.Monitoring !== "disabled",
          userData: data.resource.UserData.Data || "",
          rdSize: rootDevice.Ebs.VolumeSize,
          rdIops: rootDevice.Ebs.Iops,
          rdType: rootDevice.Ebs.VolumeType,
          parent: resolve(layout_data.groupUId),
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1],
          state: data.state
        };
        if (data.resource.EipResource) {
          attr.hasEip = true;
          attr.eipData = {
            id: data.resource.EipResource.uid,
            allocationId: data.resource.EipResource.resource.AllocationId
          };
        }
        if (layout_data.osType && layout_data.architecture && layout_data.rootDeviceType) {
          if (layout_data.osType === "win") {
            layout_data.osType = "windows";
          }
          attr.cachedAmi = {
            osType: layout_data.osType,
            architecture: layout_data.architecture,
            rootDeviceType: layout_data.rootDeviceType
          };
        }
        model = new Model(attr);
        kpUid = MC.extractID(data.resource.KeyName);
        if (kpUid && kpUid !== data.resource.KeyName) {
          KP = resolve(kpUid);
        }
        if (KP) {
          KP.assignTo(model);
        } else {
          model.set('keyName', data.resource.KeyName);
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/SgAsso',["constant", "ConnectionModel", "Design"], function(constant, ConnectionModel, Design) {
    var SgAsso;
    SgAsso = ConnectionModel.extend({
      type: "SgAsso",
      isVisual: function() {
        return true;
      },
      assignCompsToPorts: function(p1Comp, p2Comp) {
        if (p1Comp.type === constant.RESTYPE.SG) {
          this.__port1Comp = p1Comp;
          this.__port2Comp = p2Comp;
        } else if (p2Comp.type === constant.RESTYPE.SG) {
          this.__port1Comp = p2Comp;
          this.__port2Comp = p1Comp;
        } else {
          return false;
        }
        return true;
      },
      remove: function() {
        var defaultSg, resource;
        ConnectionModel.prototype.remove.apply(this, arguments);
        resource = this.getOtherTarget(constant.RESTYPE.SG);
        if (resource.isRemoved()) {
          return;
        }
        resource = this.getOtherTarget(constant.RESTYPE.SG);
        if (resource.connections("SgAsso").length === 0) {
          defaultSg = Design.modelClassForType(constant.RESTYPE.SG).getDefaultSg();
          if (defaultSg) {
            new SgAsso(resource, defaultSg);
          }
        }
        return null;
      },
      sortedSgList: function() {
        var resource, sgAssos, sgs;
        resource = this.getOtherTarget(constant.RESTYPE.SG);
        sgAssos = resource.connections("SgAsso");
        sgs = _.map(sgAssos, function(a) {
          return a.getTarget(constant.RESTYPE.SG);
        });
        return sgs.sort(function(a_sg, b_sg) {
          var a_nm, b_nm;
          if (a_sg.isDefault()) {
            return -1;
          }
          if (b_sg.isDefault()) {
            return 1;
          }
          a_nm = a_sg.get("name");
          b_nm = b_sg.get("name");
          if (a_nm < b_nm) {
            return -1;
          }
          if (a_nm === b_nm) {
            return 0;
          }
          if (a_nm > b_nm) {
            return 1;
          }
        });
      }
    });
    return SgAsso;
  });

}).call(this);

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/model/EniModel',["ComplexResModel", "Design", "./connection/SgAsso", "./connection/EniAttachment", "constant", 'i18n!/nls/lang.js'], function(ComplexResModel, Design, SgAsso, EniAttachment, constant, lang) {

    /*
    IpObject is used to represent an ip in Eni
     */
    var IpObject, Model;
    IpObject = function(attr) {
      if (!attr) {
        attr = {};
      }
      attr.ip = attr.ip || "";
      if (attr.ip.split(".").length !== 4 || attr.ip[attr.ip.length - 1] === ".") {
        attr.ip = "";
      }
      this.hasEip = attr.hasEip || false;
      this.autoAssign = attr.autoAssign !== void 0 ? attr.autoAssign : true;
      this.ip = attr.ip || "x.x.x.x";
      this.eipData = attr.eipData || {
        id: MC.guid()
      };
      this.fixedIpInApp = attr.fixedIpInApp || false;
      return null;
    };

    /*
    Defination of EniModel
     */
    Model = ComplexResModel.extend({
      defaults: function() {
        return {
          sourceDestCheck: true,
          description: "",
          ips: [],
          assoPublicIp: false,
          name: "eni"
        };
      },
      type: constant.RESTYPE.ENI,
      constructor: function(attributes, option) {
        if (option && option.instance) {
          this.__embedInstance = option.instance;
        }
        if (!attributes.ips) {
          attributes.ips = [];
        }
        if (attributes.ips.length === 0) {
          attributes.ips.push(new IpObject());
        }
        return ComplexResModel.call(this, attributes, option);
      },
      initialize: function(attributes, option) {
        var defaultSg;
        option = option || {};
        if (option.createByUser && !option.instance) {
          defaultSg = Design.modelClassForType(constant.RESTYPE.SG).getDefaultSg();
          SgAsso = Design.modelClassForType("SgAsso");
          new SgAsso(defaultSg, this);
        }
        if (option.cloneSource) {
          this.clone(option.cloneSource);
        }
        return null;
      },
      clone: function(srcTarget) {
        var ip, _i, _len, _ref;
        this.cloneAttributes(srcTarget);
        _ref = this.get("ips");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ip = _ref[_i];
          ip.ip = "x.x.x.x";
          ip.autoAssign = true;
          ip.eipData.id = this.design().guid();
        }
        return null;
      },
      groupMembers: function() {
        if (!this.__groupMembers) {
          this.__groupMembers = [];
        }
        return this.__groupMembers;
      },
      updateName: function() {
        var attachment, instance, name;
        instance = this.__embedInstance;
        if (instance) {
          name = "eni0";
        } else {
          attachment = this.connections("EniAttachment")[0];
          if (attachment) {
            name = "eni" + attachment.get("index");
          } else {
            name = "eni";
          }
        }
        this.set("name", name);
        return null;
      },
      isReparentable: function(newParent) {
        var check;
        if (newParent.type === constant.RESTYPE.SUBNET) {
          if (newParent.parent() !== this.parent().parent()) {
            check = true;
          }
        } else {
          check = true;
        }
        if (check && this.connectionTargets("EniAttachment").length > 0) {
          return lang.CANVAS.ERR_MOVE_ATTACHED_ENI;
        }
        return true;
      },
      isVisual: function() {
        return !this.__embedInstance;
      },
      embedInstance: function() {
        return this.__embedInstance;
      },
      attachedInstance: function() {
        var instance, target;
        instance = this.__embedInstance;
        if (!instance) {
          target = this.connectionTargets("EniAttachment");
          if (target.length) {
            instance = target[0];
          }
        }
        return instance;
      },
      serverGroupCount: function() {
        var count, instance;
        instance = this.attachedInstance();
        if (instance) {
          count = instance.get("count");
        }
        return count || 1;
      },
      maxIpCount: function() {
        var config, instance;
        instance = this.attachedInstance();
        if (instance) {
          config = instance.getInstanceTypeConfig();
          if (config) {
            return config.ip_per_eni;
          }
        }
        return 1;
      },
      limitIpAddress: function() {
        var instance, ipCount;
        instance = this.attachedInstance();
        if (instance && instance.getInstanceTypeConfig()) {
          ipCount = this.maxIpCount();
          if (this.get("ips").length > ipCount) {
            this.get("ips").length = ipCount;
          }
        }
        return null;
      },
      setPrimaryEip: function(toggle) {
        if (!this.attachedInstance()) {
          return;
        }
        this.get("ips")[0].hasEip = toggle;
        return null;
      },
      hasPrimaryEip: function() {
        return this.get("ips")[0].hasEip;
      },
      hasEip: function() {
        return this.get("ips").some(function(ip) {
          return ip.hasEip;
        });
      },
      subnetCidr: function() {
        var parent;
        parent = this.parent() || this.__embedInstance.parent();
        console.assert(parent.type === constant.RESTYPE.SUBNET, "Eni's parent must be subnet");
        return parent.get("cidr") || "10.0.0.1";
      },
      getIpArray: function() {
        var cidr, idx, ip, ipAry, ips, isServergroup, obj, prefixSuffixAry, _i, _len, _ref;
        cidr = this.subnetCidr();
        isServergroup = this.serverGroupCount() > 1;
        prefixSuffixAry = Design.modelClassForType(constant.RESTYPE.SUBNET).genCIDRPrefixSuffix(cidr);
        ips = [];
        _ref = this.get("ips");
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          ip = _ref[idx];
          obj = {
            hasEip: ip.hasEip,
            autoAssign: ip.autoAssign,
            editable: !(isServergroup || (ip.fixedIpInApp && ip.ip !== "x.x.x.x")),
            prefix: prefixSuffixAry[0]
          };
          if (obj.autoAssign || isServergroup) {
            obj.suffix = prefixSuffixAry[1];
          } else {
            ipAry = ip.ip.split(".");
            if (prefixSuffixAry[1] === "x.x") {
              obj.suffix = ipAry[2] + "." + ipAry[3];
            } else {
              obj.suffix = ipAry[3];
            }
          }
          obj.ip = obj.prefix + obj.suffix;
          ips.push(obj);
        }
        return ips;
      },
      getRealIp: function(ip, cidr) {
        var ipAry, prefixSuffixAry, realIp;
        if (ip === "x.x.x.x") {
          return ip;
        }
        if (!cidr) {
          cidr = this.subnetCidr();
        }
        if (!cidr) {
          return ip;
        }
        prefixSuffixAry = Design.modelClassForType(constant.RESTYPE.SUBNET).genCIDRPrefixSuffix(cidr);
        ipAry = ip.split(".");
        if (prefixSuffixAry[1] === "x.x") {
          realIp = prefixSuffixAry[0] + ipAry[2] + "." + ipAry[3];
        } else {
          realIp = prefixSuffixAry[0] + ipAry[3];
        }
        return realIp;
      },
      isValidIp: function(ip) {
        var cidr, eni, ipObj, realIp, realNewIp, validObj, _i, _j, _len, _len1, _ref, _ref1;
        if (ip.indexOf("x") !== -1) {
          return true;
        }
        cidr = this.subnetCidr();
        validObj = Design.modelClassForType(constant.RESTYPE.SUBNET).isIPInSubnet(ip, cidr);
        if (!validObj.isValid) {
          if (validObj.isReserved) {
            return lang.IDE.VALIDATION_IP_IN_SUBNET_REVERSED_RANGE;
          }
          return lang.IDE.VALIDATION_IP_CONFLICTS_WITH_SUBNET_IP_RANGE;
        }
        realNewIp = this.getRealIp(ip, cidr);
        _ref = Model.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eni = _ref[_i];
          if (!eni.attachedInstance()) {
            continue;
          }
          _ref1 = eni.attributes.ips;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            ipObj = _ref1[_j];
            if (ipObj.autoAssign) {
              continue;
            }
            realIp = eni.getRealIp(ipObj.ip);
            if (realIp === realNewIp) {
              if (eni === this) {
                return lang.IDE.VALIDATION_IP_CONFLICTS_WITH_OTHER_IP;
              } else {
                return lang.IDE.VALIDATION_IP_CONFLICTS_WITH_OTHER_NETWORK_INTERFACE_IP;
              }
            }
          }
        }
        return true;
      },
      addIp: function(idx, ip, autoAssign, hasEip) {
        var ips;
        ips = this.get("ips");
        if (this.maxIpCount() <= ips.length) {
          return false;
        }
        ip = new IpObject({
          hasEip: false,
          ip: "x.x.x.x",
          autoAssign: true
        });
        ips = ips.slice(0);
        ips.push(ip);
        this.set("ips", ips);
        return true;
      },
      setIp: function(idx, ip, autoAssign, hasEip) {
        var ipObj;
        ipObj = this.get("ips")[idx];
        if (ip !== void 0 && ip !== null) {
          ipObj.ip = ip;
        }
        if (autoAssign !== void 0 && autoAssign !== null) {
          ipObj.autoAssign = autoAssign;
        }
        if (hasEip !== void 0 && hasEip !== null && hasEip !== ipObj.hasEip) {
          ipObj.hasEip = hasEip;
          if (idx === 0) {
            (this.__embedInstance || this).trigger("change:primaryEip");
          }
        }
        return null;
      },
      removeIp: function(idx) {
        var ips;
        ips = this.get("ips");
        if (ips.length <= 1 || idx === 0) {
          return;
        }
        ips = ips.slice(0);
        ips.splice(idx, 1);
        this.set("ips", ips);
        return null;
      },
      canAddIp: function() {
        var instance, ips, maxIp, result, subnet;
        instance = this.attachedInstance();
        if (!instance) {
          return false;
        }
        maxIp = this.maxIpCount();
        ips = this.get("ips");
        if (ips.length >= maxIp) {
          return sprintf(lang.PROP.MSG_WARN_ENI_IP_EXTEND, instance.get("instanceType"), maxIp);
        }
        subnet = this.__embedInstance ? this.__embedInstance.parent() : this.parent();
        result = true;
        ips.push({
          ip: "fake"
        });
        if (subnet.getAvailableIPCountInSubnet() <= 0) {
          result = "Ip count limit has reached in " + (subnet.get('name'));
        }
        ips.length = ips.length - 1;
        return result;
      },
      connect: function(connection) {
        var SgModel;
        if (connection.type !== "EniAttachment") {
          return;
        }
        this.limitIpAddress();
        this.updateName();
        SgModel = Design.modelClassForType(constant.RESTYPE.SG);
        SgModel.tryDrawLine(this);
        return null;
      },
      disconnect: function(connection) {
        var reason, sgline, _i, _len, _ref;
        if (connection.type !== "EniAttachment") {
          return;
        }
        this.attributes.name = "eni";
        reason = {
          reason: connection
        };
        _ref = this.connections("SgRuleLine");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sgline = _ref[_i];
          sgline.remove(reason);
        }
        return null;
      },
      ensureEnoughMember: function() {
        var count, idx, instance, ip, ipTemplate, ips, member, _i, _j, _len, _len1, _ref;
        instance = this.attachedInstance();
        if (!instance) {
          return;
        }
        count = instance.get("count") - 1;
        ipTemplate = this.get("ips");
        _ref = this.groupMembers();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          member = _ref[_i];
          while (member.ips.length < ipTemplate.length) {
            member.ips.push({
              autoAssign: true,
              ip: "x.x.x.x",
              eipData: {
                id: MC.guid()
              }
            });
          }
        }
        while (this.groupMembers().length < count) {
          ips = [];
          for (idx = _j = 0, _len1 = ipTemplate.length; _j < _len1; idx = ++_j) {
            ip = ipTemplate[idx];
            ips.push({
              autoAssign: true,
              ip: "x.x.x.x",
              eipData: {
                id: MC.guid()
              }
            });
          }
          this.groupMembers().push({
            id: MC.guid(),
            appId: "",
            forceAutoAssign: true,
            ips: ips
          });
        }
        return null;
      },
      onParentChanged: function(oldParent) {
        var idx, ipObj, _i, _len, _ref, _results;
        if (oldParent) {
          _ref = this.get("ips");
          _results = [];
          for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
            ipObj = _ref[idx];
            _results.push(this.setIp(idx, null, true, ipObj.hasEip));
          }
          return _results;
        }
      },
      generateJSON: function(index, servergroupOption, eniIndex) {
        var autoAssign, az, component, eip, eniName, hasEip, idx, instanceId, ipObj, ips, memberData, parent, resources, securitygroups, sgTarget, subnetId, vpcId, _i, _len, _ref;
        resources = [{}];
        this.ensureEnoughMember();
        eniName = (servergroupOption.instanceName || "") + this.get("name");
        ips = [];
        if (index === 0) {
          memberData = {
            id: this.id,
            appId: this.get("appId"),
            ips: this.get("ips"),
            attachmentId: this.get("attachmentId")
          };
        } else {
          memberData = this.groupMembers()[index - 1];
        }
        _ref = this.get("ips");
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          ipObj = _ref[idx];
          hasEip = ipObj.hasEip;
          ipObj = memberData.ips[idx];
          console.assert(ipObj, "ipObj should be defined.");
          if (servergroupOption.number > 1) {
            autoAssign = true;
          } else {
            autoAssign = ipObj.autoAssign;
          }
          if (ipObj.fixedIpInApp && ipObj.ip.indexOf('x') === -1) {
            autoAssign = false;
          }
          ips.push({
            PrivateIpAddress: this.getRealIp(ipObj.ip),
            AutoAssign: autoAssign,
            Primary: false
          });
          if (hasEip) {
            eip = ipObj.eipData;
            resources.push({
              uid: eip.id || MC.guid(),
              type: constant.RESTYPE.EIP,
              name: "" + eniName + "-eip" + idx,
              index: index,
              resource: {
                Domain: "vpc",
                InstanceId: "",
                AllocationId: eip.allocationId || "",
                NetworkInterfaceId: this.createRef("NetworkInterfaceId", memberData.id),
                PrivateIpAddress: this.createRef("PrivateIpAddressSet." + idx + ".PrivateIpAddress", memberData.id),
                PublicIp: eip.publicIp || ""
              }
            });
          }
        }
        ips[0].Primary = true;
        sgTarget = this.__embedInstance ? this.__embedInstance : this;
        securitygroups = _.map(sgTarget.connectionTargets("SgAsso"), function(sg) {
          return {
            GroupName: sg.createRef("GroupName"),
            GroupId: sg.createRef("GroupId")
          };
        });
        if (servergroupOption.instanceId) {
          instanceId = this.createRef("InstanceId", servergroupOption.instanceId);
        } else {
          instanceId = "";
        }
        az = "";
        if (this.__embedInstance) {
          parent = this.__embedInstance.parent();
        } else {
          parent = this.parent();
        }
        if (parent.type === constant.RESTYPE.SUBNET) {
          subnetId = parent.createRef("SubnetId");
          vpcId = parent.parent().parent().createRef("VpcId");
          az = parent.parent();
        } else {
          az = parent;
        }
        component = {
          index: index,
          uid: memberData.id,
          type: this.type,
          name: eniName,
          description: this.get("description") || "",
          serverGroupUid: this.id,
          serverGroupName: this.get("name"),
          number: servergroupOption.number || 1,
          resource: {
            SourceDestCheck: this.get("sourceDestCheck"),
            Description: "",
            NetworkInterfaceId: memberData.appId,
            AvailabilityZone: az.createRef(),
            VpcId: parent.getVpcRef(),
            SubnetId: parent.getSubnetRef(),
            AssociatePublicIpAddress: this.get("assoPublicIp"),
            PrivateIpAddressSet: ips,
            GroupSet: securitygroups,
            Attachment: {
              InstanceId: instanceId,
              DeviceIndex: eniIndex === void 0 ? "1" : "" + eniIndex,
              AttachmentId: memberData.attachmentId || ""
            }
          }
        };
        resources[0] = component;
        return resources;
      },
      serialize: function() {
        var comps, eniIndex, layout, res;
        res = [];
        if (!this.__embedInstance) {
          layout = this.generateLayout();
          res[0] = {
            layout: layout
          };
        }
        if (!this.attachedInstance()) {
          eniIndex = this.__embedInstance ? 0 : 1;
          comps = this.generateJSON(0, {
            number: 1
          }, eniIndex);
          if (!res[0]) {
            res[0] = {};
          }
          res[0].component = comps[0];
          if (comps[1]) {
            res.push({
              component: comps[1]
            });
          }
        }
        return res;
      }
    }, {
      handleTypes: [constant.RESTYPE.ENI, constant.RESTYPE.EIP],
      getAvailableIPInCIDR: function(ipCidr, filter, maxNeedIPCount, reserveIPs) {
        var allIPAry, availableIPCount, cutAry, idx, ipAddr, ipAddrAry, ipAddrBinAry, ipAddrBinPrefixStr, ipAddrBinStr, ipAddrBinStrSuffixMax, ipAddrBinStrSuffixMin, ipAddrNumSuffixMax, ipAddrNumSuffixMin, isAvailableIP, newIPAry, newIPBinStr, newIPObj, newIPStr, prefix, readyAssignAryLength, suffix, value, _i, _ref;
        if (!reserveIPs) {
          reserveIPs = [0, 1, 2, 3];
        }
        cutAry = ipCidr.split('/');
        ipAddr = cutAry[0];
        suffix = Number(cutAry[1]);
        prefix = 32 - suffix;
        ipAddrAry = ipAddr.split('.');
        ipAddrBinAry = ipAddrAry.map(function(value) {
          return MC.leftPadString(parseInt(value).toString(2), 8, "0");
        });
        ipAddrBinStr = ipAddrBinAry.join('');
        ipAddrBinPrefixStr = ipAddrBinStr.slice(0, suffix);
        ipAddrBinStrSuffixMin = ipAddrBinStr.slice(suffix).replace(/1/g, '0');
        ipAddrBinStrSuffixMax = ipAddrBinStrSuffixMin.replace(/0/g, '1');
        ipAddrNumSuffixMin = parseInt(ipAddrBinStrSuffixMin, 2);
        ipAddrNumSuffixMax = parseInt(ipAddrBinStrSuffixMax, 2);
        allIPAry = [];
        availableIPCount = 0;
        readyAssignAryLength = ipAddrNumSuffixMax - ipAddrNumSuffixMin + 1;
        idx = -1;
        for (value = _i = ipAddrNumSuffixMin, _ref = ipAddrNumSuffixMax + 1; ipAddrNumSuffixMin <= _ref ? _i < _ref : _i > _ref; value = ipAddrNumSuffixMin <= _ref ? ++_i : --_i) {
          idx++;
          newIPBinStr = ipAddrBinPrefixStr + MC.leftPadString(value.toString(2), prefix, "0");
          isAvailableIP = true;
          if (__indexOf.call(reserveIPs, idx) >= 0) {
            isAvailableIP = false;
          }
          if (idx === readyAssignAryLength - 1) {
            isAvailableIP = false;
          }
          newIPAry = _.map([0, 8, 16, 24], function(value) {
            var newIPNum;
            newIPNum = parseInt(newIPBinStr.slice(value, value + 8), 2);
            return newIPNum;
          });
          newIPStr = newIPAry.join('.');
          if (__indexOf.call(filter, newIPStr) >= 0) {
            isAvailableIP = false;
          }
          newIPObj = {
            ip: newIPStr,
            available: isAvailableIP
          };
          allIPAry.push(newIPObj);
          if (isAvailableIP) {
            availableIPCount++;
          }
          if (availableIPCount > maxNeedIPCount) {
            break;
          }
          null;
        }
        console.log('availableIPCount: ' + availableIPCount);
        return allIPAry;
      },
      getAvailableIPCountInCIDR: function(ipCidr) {
        var availableIPCount, cutAry, ipAddr, ipAddrAry, ipAddrBinAry, ipAddrBinPrefixStr, ipAddrBinStr, ipAddrBinStrSuffixMax, ipAddrBinStrSuffixMin, ipAddrNumSuffixMax, ipAddrNumSuffixMin, prefix, suffix;
        cutAry = ipCidr.split('/');
        ipAddr = cutAry[0];
        suffix = Number(cutAry[1]);
        prefix = 32 - suffix;
        ipAddrAry = ipAddr.split('.');
        ipAddrBinAry = ipAddrAry.map(function(value) {
          return MC.leftPadString(parseInt(value).toString(2), 8, "0");
        });
        ipAddrBinStr = ipAddrBinAry.join('');
        ipAddrBinPrefixStr = ipAddrBinStr.slice(0, suffix);
        ipAddrBinStrSuffixMin = ipAddrBinStr.slice(suffix).replace(/1/g, '0');
        ipAddrBinStrSuffixMax = ipAddrBinStrSuffixMin.replace(/0/g, '1');
        ipAddrNumSuffixMin = parseInt(ipAddrBinStrSuffixMin, 2);
        ipAddrNumSuffixMax = parseInt(ipAddrBinStrSuffixMax, 2);
        availableIPCount = (ipAddrNumSuffixMax - ipAddrNumSuffixMin + 1) - 5;
        if (availableIPCount < 0) {
          availableIPCount = 0;
        }
        return availableIPCount;
      },
      createServerGroupMember: function(data) {
        var attachment, ip, ipObj, memberData, _i, _len, _ref;
        attachment = data.resource.Attachment || {};
        memberData = {
          id: data.uid,
          appId: data.resource.NetworkInterfaceId,
          attachmentId: attachment.AttachmentId || "",
          ips: []
        };
        _ref = data.resource.PrivateIpAddressSet || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ip = _ref[_i];
          ipObj = new IpObject({
            autoAssign: ip.AutoAssign,
            ip: ip.PrivateIpAddress,
            fixedIpInApp: Design.instance().modeIsApp() || Design.instance().modeIsAppView()
          });
          if (ip.EipResource) {
            ipObj.eipData = {
              id: ip.EipResource.uid,
              allocationId: ip.EipResource.resource.AllocationId,
              publicIp: ip.EipResource.resource.PublicIp
            };
          }
          memberData.ips.push(ipObj);
        }
        return memberData;
      },
      deserialize: function(data, layout_data, resolve) {
        var attachment, attr, autoAssign, embed, eni, eniIndex, group, instance, ip, ipObj, m, members, option, sgTarget, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        if (data.type === constant.RESTYPE.EIP) {
          return;
        }
        if (data.serverGroupUid && data.serverGroupUid !== data.uid) {
          members = resolve(data.serverGroupUid).groupMembers();
          for (_i = 0, _len = members.length; _i < _len; _i++) {
            m = members[_i];
            if (m && m.id === data.uid) {
              console.debug("This eni servergroup member has already deserialized", data);
              return;
            }
          }
          members[data.index - 1] = this.createServerGroupMember(data);
          return;
        }
        attachment = data.resource.Attachment;
        embed = attachment && (attachment.DeviceIndex === "0" || attachment.DeviceIndex === 0);
        instance = attachment && attachment.InstanceId ? resolve(MC.extractID(attachment.InstanceId)) : null;
        attr = {
          id: data.uid,
          appId: data.resource.NetworkInterfaceId,
          description: data.description || "",
          sourceDestCheck: data.resource.SourceDestCheck,
          assoPublicIp: data.resource.AssociatePublicIpAddress,
          attachmentId: attachment ? attachment.AttachmentId : "",
          ips: [],
          x: embed ? 0 : layout_data.coordinate[0],
          y: embed ? 0 : layout_data.coordinate[1]
        };
        _ref = data.resource.PrivateIpAddressSet || [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          ip = _ref[_j];
          autoAssign = Design.instance().modeIsStack() ? ip.AutoAssign : false;
          ipObj = new IpObject({
            autoAssign: autoAssign,
            ip: ip.PrivateIpAddress,
            fixedIpInApp: Design.instance().modeIsApp() || Design.instance().modeIsAppView()
          });
          if (ip.EipResource) {
            ipObj.hasEip = true;
            ipObj.eipData = {
              id: ip.EipResource.uid,
              allocationId: ip.EipResource.resource.AllocationId,
              publicIp: ip.EipResource.resource.PublicIp
            };
          }
          attr.ips.push(ipObj);
        }
        if (embed) {
          attr.name = "eni0";
          option = {
            instance: instance
          };
        } else {
          attr.parent = resolve(layout_data.groupUId);
        }
        eni = new Model(attr, option);
        sgTarget = eni.embedInstance() || eni;
        _ref1 = data.resource.GroupSet || [];
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          group = _ref1[_k];
          new SgAsso(sgTarget, resolve(MC.extractID(group.GroupId)));
        }
        if (instance) {
          if (embed) {
            instance.setEmbedEni(eni);
          } else {
            eniIndex = attachment && attachment.DeviceIndex ? attachment.DeviceIndex : 1;
            new EniAttachment(eni, instance, {
              index: eniIndex * 1
            });
          }
        }
        return null;
      },
      postDeserialize: function(data, layout) {
        var attach, design, embed, eni, eniMember, found, idx, instance, instanceId, m, _i, _j, _len, _len1, _ref, _ref1;
        attach = data.resource.Attachment;
        if (!attach) {
          return;
        }
        embed = attach.DeviceIndex === "0";
        if (!embed) {
          return;
        }
        design = Design.instance();
        instanceId = MC.extractID(attach.InstanceId);
        instance = design.component(instanceId);
        if (instance) {
          return;
        }
        eni = design.component(data.uid);
        if (!eni) {
          return;
        }
        console.debug("Found embed eni which doesn't belong to visible instance, it might be embed eni of an servergroup member", eni);
        eni.remove();
        eniMember = this.createServerGroupMember(data);
        _ref = Design.modelClassForType(constant.RESTYPE.INSTANCE).allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          instance = _ref[_i];
          _ref1 = instance.groupMembers();
          for (idx = _j = 0, _len1 = _ref1.length; _j < _len1; idx = ++_j) {
            m = _ref1[idx];
            if (m.id === instanceId) {
              found = true;
              break;
            }
          }
        }
        if (!found) {
          console.warn("Cannot found instance server group for embed eni :", eni);
          return;
        }
        instance.getEmbedEni().groupMembers()[idx] = eniMember;
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/model/VolumeModel',["i18n!/nls/lang.js", "ComplexResModel", "constant"], function(lang, ComplexResModel, constant) {
    var Model;
    Model = ComplexResModel.extend({
      defaults: {
        name: '',
        owner: null,
        volumeSize: 1,
        snapshotId: '',
        appId: '',
        volumeType: 'gp2',
        iops: '',
        encrypted: false
      },
      type: constant.RESTYPE.VOL,
      constructor: function(attributes, options) {
        var owner;
        owner = attributes.owner;
        delete attributes.owner;
        if (!attributes.name) {
          attributes.name = this.getDeviceName(owner);
        }
        if (attributes.name) {
          ComplexResModel.call(this, attributes);
          this.attachTo(owner, options);
        }
        if (options && options.cloneSource) {
          this.clone(options.cloneSource);
        }
        if (attributes.iops) {
          attributes.volumeType = "io1";
        }
        return null;
      },
      clone: function(srcTarget) {
        this.cloneAttributes(srcTarget, {
          reserve: "owner"
        });
        return null;
      },
      isVisual: function() {
        return false;
      },
      isNameAvailable: function() {
        return true;
      },
      isReparentable: function(newParent) {
        var parent;
        if (this.design().modeIsAppEdit()) {
          parent = this.get("owner");
          if (parent.type !== newParent.type) {
            return false;
          }
          if (!this.get("appId")) {
            return true;
          }
          if (parent.get("count") > 1) {
            return lang.CANVAS.ERR_SERVERGROUP_VOLUME;
          }
          if (newParent.get("count") > 1) {
            return lang.CANVAS.ERR_SERVERGROUP_VOLUME2;
          }
          while (parent && parent.type !== constant.RESTYPE.AZ) {
            parent = parent.parent();
            newParent = newParent.parent();
          }
          if (parent && newParent && parent !== newParent) {
            return lang.IDE.VALIDATION_CANNOT_MOVE_VOLUME_ACROSS_AZ;
          }
        }
        return true;
      },
      groupMembers: function() {
        if (!this.__groupMembers) {
          this.__groupMembers = [];
        }
        return this.__groupMembers;
      },
      isRemovable: function() {
        if (this.design().modeIsAppEdit()) {
          if ((this.get("owner") || {}).type === constant.RESTYPE.LC) {
            return lang.NOTIFY.WARN_OPERATE_NOT_SUPPORT_YET;
          }
        }
        return true;
      },
      remove: function() {
        var vl;
        vl = this.attributes.owner.get("volumeList");
        vl.splice(vl.indexOf(this), 1);
        this.attributes.owner.trigger("change:volumeList");
        ComplexResModel.prototype.remove.call(this);
        return null;
      },
      genFullName: function(name) {
        if (this.get('name')[0] !== '/') {
          return 'xvd' + name;
        } else {
          return '/dev/' + name;
        }
      },
      getCost: function(priceMap, currency, force) {
        var count, fee, name, owner, p, standardType, t, volumePrices, _i, _j, _len, _len1, _ref;
        if (!priceMap.ebs) {
          return;
        }
        owner = this.get("owner");
        if (!owner) {
          console.warn("This volume has not attached to any ami, found when calc-ing cost :", this);
          return;
        }
        if (!force && this.get("owner").type !== constant.RESTYPE.INSTANCE) {
          return;
        }
        standardType = this.get("volumeType") === "standard";
        _ref = priceMap.ebs.types;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          if (standardType) {
            if (t.ebsVols) {
              volumePrices = t.ebsVols;
            }
          } else if (t.ebsPIOPSVols) {
            volumePrices = t.ebsPIOPSVols;
          }
        }
        if (!volumePrices) {
          return;
        }
        count = this.get("owner").get("count") || 1;
        name = owner.get("name") + " - " + this.get("name");
        if (count > 1) {
          name += " (x" + count + ")";
        }
        for (_j = 0, _len1 = volumePrices.length; _j < _len1; _j++) {
          p = volumePrices[_j];
          if (p.unit === 'perGBmoProvStorage') {
            fee = p[currency];
            return {
              resource: name,
              type: this.get("volumeSize") + "G",
              fee: fee * this.get("volumeSize") * count,
              formatedFee: fee + "/GB/mo"
            };
          }
        }
        return null;
      },
      attachTo: function(owner, options) {
        var oldOwner, vl, volumeList;
        if (!owner) {
          return false;
        }
        if (owner === this.attributes.owner) {
          return false;
        }
        oldOwner = this.attributes.owner;
        if (oldOwner) {
          vl = oldOwner.get('volumeList');
          vl.splice(vl.indexOf(this), 1);
          oldOwner.trigger("change:volumeList");
        }
        this.attributes.owner = owner;
        if (!(options && options.noNeedGenName)) {
          this.attributes.name = this.getDeviceName(owner);
          if (!this.attributes.name) {
            return false;
          }
        }
        if (!this.isSupportEncrypted()) {
          this.attributes.encrypted = false;
        }
        volumeList = owner.get('volumeList');
        if (volumeList) {
          volumeList.push(this);
        } else {
          owner.set('volumeList', [this]);
        }
        owner.trigger("change:volumeList");
        return true;
      },
      isSupportEncrypted: function() {
        var instanceType, owner, supportEncrypted, supportedEncryptedType;
        supportedEncryptedType = ['m3.medium', 'm3.large', 'm3.xlarge', 'm3.2xlarge', 'c3.large', 'c3.xlarge', 'c3.2xlarge', 'c3.4xlarge', 'c3.8xlarge', 'cr1.8xlarge', 'r3.large', 'r3.xlarge', 'r3.2xlarge', 'r3.4xlarge', 'r3.8xlarge', 'i2.xlarge', 'i2.2xlarge', 'i2.4xlarge', 'i2.8xlarge', 'g2.2xlarge'];
        owner = this.attributes.owner;
        instanceType = owner.get('instanceType');
        supportEncrypted = false;
        if ((__indexOf.call(supportedEncryptedType, instanceType) >= 0)) {
          supportEncrypted = true;
        }
        return supportEncrypted;
      },
      getDeviceName: function(owner) {
        var ami_info, deviceName, imageId, volumeList;
        imageId = owner.get("imageId");
        ami_info = owner.getAmi();
        if (!ami_info) {
          if (!ami_info) {
            notification("warning", sprintf(lang.NOTIFY.WARN_AMI_NOT_EXIST_TRY_USE_OTHER, imageId), false);
          }
          return null;
        } else {
          deviceName = null;
          if (ami_info.osType !== "windows") {
            deviceName = ["f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
          } else {
            deviceName = ["f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p"];
          }
          $.each(ami_info.blockDeviceMapping || [], function(key, value) {
            var index, k;
            if (key.slice(0, 4) === "/dev/") {
              k = key.slice(-1);
              index = deviceName.indexOf(k);
              if (index >= 0) {
                return deviceName.splice(index, 1);
              }
            }
          });
          volumeList = owner.get("volumeList");
          if (volumeList && volumeList.length > 0) {
            $.each(volumeList, function(key, value) {
              var index, k;
              k = value.get("name").slice(-1);
              index = deviceName.indexOf(k);
              if (index >= 0) {
                return deviceName.splice(index, 1);
              }
            });
          }
          if (deviceName.length === 0) {
            notification("warning", lang.NOTIFY.WARN_ATTACH_VOLUME_REACH_INSTANCE_LIMIT, false);
            return null;
          }
          if (ami_info.osType !== "windows") {
            deviceName = "/dev/sd" + deviceName[0];
          } else {
            deviceName = "xvd" + deviceName[0];
          }
          return deviceName;
        }
      },
      ensureEnoughMember: function() {
        var totalCount;
        if (!this.get("owner")) {
          return;
        }
        totalCount = this.get("owner").get("count");
        if (!totalCount) {
          return;
        }
        totalCount -= 1;
        while (this.groupMembers().length < totalCount) {
          this.groupMembers().push({
            id: MC.guid(),
            appId: ""
          });
        }
        return null;
      },
      generateJSON: function(index, serverGroupOption) {
        var appId, instanceId, member, owner, uid;
        console.assert(!serverGroupOption || serverGroupOption.instanceId !== void 0, "Invalid serverGroupOption");
        this.ensureEnoughMember();
        appId = "";
        if (index > 0) {
          member = this.groupMembers()[index - 1];
          uid = member.id;
          appId = member.appId;
        } else {
          uid = this.id;
          appId = this.get("appId");
        }
        instanceId = this.createRef("InstanceId", serverGroupOption.instanceId);
        owner = this.get("owner");
        return {
          uid: uid,
          type: this.type,
          name: this.get("name"),
          serverGroupUid: this.id,
          serverGroupName: this.get("name"),
          index: index,
          number: serverGroupOption.number || 1,
          resource: {
            VolumeId: appId,
            Size: this.get("volumeSize"),
            SnapshotId: this.get("snapshotId"),
            Iops: this.get("iops"),
            VolumeType: this.get("volumeType"),
            AvailabilityZone: owner ? owner.getAvailabilityZone().createRef() : "",
            AttachmentSet: {
              InstanceId: instanceId,
              Device: this.get("name")
            },
            Encrypted: this.get("encrypted")
          }
        };
      },
      serialize: function() {
        if (this.get("owner")) {
          return;
        }
        return {
          component: this.generateJSON(0, {
            number: 1
          })
        };
      }
    }, {
      handleTypes: constant.RESTYPE.VOL,
      deserialize: function(data, layout_data, resolve) {
        var attachment, attr, instance, m, members, model, _i, _len;
        if (data.serverGroupUid && data.serverGroupUid !== data.uid) {
          members = resolve(data.serverGroupUid).groupMembers();
          for (_i = 0, _len = members.length; _i < _len; _i++) {
            m = members[_i];
            if (m && m.id === data.uid) {
              console.debug("This volume servergroup member has already deserialized", data);
              return;
            }
          }
          members[data.index - 1] = {
            id: data.uid,
            appId: data.resource.VolumeId
          };
          return;
        }
        if (data.resource.AttachmentSet) {
          attachment = data.resource.AttachmentSet;
          instance = attachment && attachment.InstanceId ? resolve(MC.extractID(attachment.InstanceId)) : null;
        } else {
          console.error("deserialize failed");
          return null;
        }
        attr = {
          id: data.uid,
          name: data.serverGroupName || data.name,
          owner: instance,
          volumeSize: data.resource.Size,
          snapshotId: data.resource.SnapshotId,
          volumeType: data.resource.VolumeType,
          iops: data.resource.Iops,
          appId: data.resource.VolumeId,
          encrypted: data.resource.Encrypted
        };
        model = new Model(attr, {
          noNeedGenName: true
        });
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/AclModel',["ComplexResModel", "ConnectionModel", "constant"], function(ComplexResModel, ConnectionModel, constant) {
    var AclAsso, Model, formatRules, __emptyIcmp, __emptyPortRange;
    __emptyIcmp = {
      Code: "",
      Type: ""
    };
    __emptyPortRange = {
      From: "",
      To: ""
    };
    AclAsso = ConnectionModel.extend({
      type: "AclAsso",
      oneToMany: constant.RESTYPE.ACL,
      defaults: {
        associationId: ""
      },
      serialize: function(components) {
        var acl, sb;
        sb = this.getTarget(constant.RESTYPE.SUBNET);
        acl = this.getTarget(constant.RESTYPE.ACL);
        components[acl.id].resource.AssociationSet.push({
          NetworkAclAssociationId: this.get("associationId"),
          SubnetId: sb.createRef("SubnetId")
        });
        return null;
      }
    });
    formatRules = function(JsonRuleEntrySet) {
      if (!JsonRuleEntrySet || !JsonRuleEntrySet.length) {
        return [];
      }
      return _.map(JsonRuleEntrySet, function(r) {
        var rule;
        rule = {
          id: _.uniqueId("aclrule_"),
          cidr: r.CidrBlock,
          egress: r.Egress,
          protocol: parseInt(r.Protocol, 10),
          number: parseInt(r.RuleNumber, 10),
          action: r.RuleAction,
          port: ""
        };
        if (rule.protocol === 1 && r.IcmpTypeCode && r.IcmpTypeCode.Code && r.IcmpTypeCode.Type) {
          rule.port = r.IcmpTypeCode.Type + "/" + r.IcmpTypeCode.Code;
        } else if (r.PortRange.From && r.PortRange.To) {
          if (r.PortRange.From === r.PortRange.To) {
            rule.port = r.PortRange.From + "";
          } else {
            rule.port = r.PortRange.From + "-" + r.PortRange.To;
          }
        }
        return rule;
      });
    };
    Model = ComplexResModel.extend({
      type: constant.RESTYPE.ACL,
      newNameTmpl: "CustomACL-",
      defaults: function() {
        return {
          rules: [
            {
              action: "deny",
              cidr: "0.0.0.0/0",
              egress: true,
              id: _.uniqueId("aclrule_"),
              number: 32767,
              port: "",
              protocol: -1
            }, {
              action: "deny",
              cidr: "0.0.0.0/0",
              egress: false,
              id: _.uniqueId("aclrule_"),
              number: 32767,
              port: "",
              protocol: -1
            }
          ]
        };
      },
      isVisual: function() {
        return false;
      },
      isDefault: function() {
        return this.attributes.name === "DefaultACL";
      },
      remove: function() {
        var defaultAcl, target, _i, _len, _ref;
        console.assert(!this.isDefault(), "Cannot delete DefaultACL");
        defaultAcl = Model.getDefaultAcl();
        _ref = this.connectionTargets();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          target = _ref[_i];
          new AclAsso(defaultAcl, target);
        }
        ComplexResModel.prototype.remove.call(this);
        return null;
      },
      addRule: function(rule) {
        var currentRules, r, _i, _len;
        console.assert(rule.number !== void 0 && rule.protocol !== void 0 && rule.egress !== void 0 && rule.action !== void 0 && rule.cidr !== void 0 && rule.port !== void 0, "Invalid ACL Rule data");
        rule.protocol = parseInt(rule.protocol, 10);
        rule.number = parseInt(rule.number, 10);
        rule.cidr = MC.getValidCIDR(rule.cidr);
        currentRules = this.get("rules");
        for (_i = 0, _len = currentRules.length; _i < _len; _i++) {
          r = currentRules[_i];
          if (r.number === rule.number) {
            return false;
          }
        }
        rule.id = _.uniqueId("aclrule_");
        currentRules = currentRules.slice(0);
        currentRules.push(rule);
        this.set("rules", currentRules);
        return true;
      },
      removeRule: function(ruleId) {
        var idx, rule, rules, theRule, _i, _len;
        rules = this.get("rules");
        for (idx = _i = 0, _len = rules.length; _i < _len; idx = ++_i) {
          rule = rules[idx];
          if (rule.id === ruleId) {
            theRule = rule;
            break;
          }
        }
        if (theRule.number === 32767) {
          return false;
        }
        if (this.isDefault() && theRule.number === 100) {
          return false;
        }
        rules = rules.slice(0);
        rules.splice(idx, 1);
        this.set("rules", rules);
        return true;
      },
      getRuleCount: function() {
        return this.get("rules").length;
      },
      getAssoCount: function() {
        return this.connections().length;
      },
      serialize: function() {
        var component, port, r, rule, ruleSet, vpc, _i, _len, _ref;
        vpc = Design.modelClassForType(constant.RESTYPE.VPC).theVPC();
        ruleSet = [];
        component = {
          name: this.get("name"),
          type: this.type,
          uid: this.id,
          resource: {
            AssociationSet: [],
            Default: this.isDefault(),
            EntrySet: ruleSet,
            NetworkAclId: this.get("appId"),
            VpcId: vpc.createRef("VpcId"),
            Tags: [
              {
                Key: "visops_default",
                Value: this.isDefault() ? "true" : "false"
              }
            ]
          }
        };
        _ref = this.get("rules");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rule = _ref[_i];
          r = {
            Egress: rule.egress,
            Protocol: rule.protocol,
            RuleAction: rule.action,
            RuleNumber: rule.number,
            CidrBlock: rule.cidr,
            IcmpTypeCode: __emptyIcmp,
            PortRange: __emptyPortRange
          };
          if (rule.protocol === 1) {
            port = rule.port.split("/");
            r.IcmpTypeCode = {
              Code: port[1],
              Type: port[0]
            };
          } else if (rule.port) {
            port = (rule.port + "-" + rule.port).split("-");
            r.PortRange = {
              From: port[0],
              To: port[1]
            };
          }
          ruleSet.push(r);
        }
        return {
          component: component
        };
      }
    }, {
      handleTypes: constant.RESTYPE.ACL,
      resolveFirst: true,
      getDefaultAcl: function() {
        return _.find(Model.allObjects(), function(obj) {
          return obj.isDefault();
        });
      },
      preDeserialize: function(data, layout_data) {
        new Model({
          id: data.uid,
          name: data.resource.Default ? "DefaultACL" : data.name,
          appId: data.resource.NetworkAclId,
          rules: formatRules(data.resource.EntrySet)
        });
        return null;
      },
      deserialize: function(data, layout_data, resolve) {
        var acl, asso, c, subnet, _i, _len, _ref;
        acl = resolve(data.uid);
        _ref = data.resource.AssociationSet || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          asso = _ref[_i];
          subnet = resolve(MC.extractID(asso.SubnetId));
          if (!subnet) {
            continue;
          }
          c = new AclAsso(acl, subnet);
          c.set("associationId", asso.NetworkAclAssociationId);
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/LcUsage',["ConnectionModel", "constant"], function(ConnectionModel, constant) {
    return ConnectionModel.extend({
      type: "LcUsage",
      remove: function() {
        var lc;
        lc = this.getTarget(constant.RESTYPE.LC);
        ConnectionModel.prototype.remove.apply(this, arguments);
        if (lc.connections("LcUsage").length === 0) {
          lc.remove();
        }
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/AsgModel',["ResourceModel", "ComplexResModel", "Design", "constant", "i18n!/nls/lang.js", "./connection/LcUsage"], function(ResourceModel, ComplexResModel, Design, constant, lang, LcUsage) {
    var ExpandedAsgModel, Model, NotificationModel;
    NotificationModel = ComplexResModel.extend({
      type: constant.RESTYPE.NC,
      isUsed: function() {
        return this.get("instanceLaunch") || this.get("instanceLaunchError") || this.get("instanceTerminate") || this.get("instanceTerminateError") || this.get("test");
      },
      initialize: function() {
        Design.modelClassForType(constant.RESTYPE.TOPIC).ensureExistence();
        return null;
      },
      isVisual: function() {
        return false;
      },
      getTopic: function() {
        return this.connectionTargets('TopicUsage')[0];
      },
      removeTopic: function() {
        var _ref;
        return (_ref = this.connections('TopicUsage')[0]) != null ? _ref.remove() : void 0;
      },
      isEffective: function() {
        var n;
        n = this.toJSON();
        return n.instanceLaunch || n.instanceLaunchError || n.instanceTerminate || n.instanceTerminateError || n.test;
      },
      getTopicName: function() {
        var _ref;
        return (_ref = this.getTopic()) != null ? _ref.get('name') : void 0;
      },
      setTopic: function(appId, name) {
        var TopicModel;
        TopicModel = Design.modelClassForType(constant.RESTYPE.TOPIC);
        return TopicModel.get(appId, name).assignTo(this);
      },
      serialize: function() {
        var key, name, notifies, topic, _ref;
        if (!this.isUsed() || !this.get("asg")) {
          return;
        }
        topic = this.getTopic();
        notifies = [];
        _ref = NotificationModel.typeMap;
        for (key in _ref) {
          name = _ref[key];
          if (this.get(name)) {
            notifies.push(key);
          }
        }
        return {
          component: {
            name: "SnsNotification",
            type: this.type,
            uid: this.id,
            resource: {
              AutoScalingGroupName: this.get("asg").createRef("AutoScalingGroupName"),
              TopicARN: topic && topic.createRef("TopicArn") || '',
              NotificationType: notifies
            }
          }
        };
      }
    }, {
      handleTypes: constant.RESTYPE.NC,
      typeMap: {
        "autoscaling:EC2_INSTANCE_LAUNCH": "instanceLaunch",
        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR": "instanceLaunchError",
        "autoscaling:EC2_INSTANCE_TERMINATE": "instanceTerminate",
        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR": "instanceTerminateError",
        "autoscaling:TEST_NOTIFICATION": "test"
      },
      deserialize: function(data, layout_data, resolve) {
        var asg, attr, notify, t, _i, _len, _ref, _ref1;
        attr = {
          id: data.uid
        };
        _ref = data.resource.NotificationType;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          attr[NotificationModel.typeMap[t]] = true;
        }
        notify = new NotificationModel(attr);
        asg = resolve(MC.extractID(data.resource.AutoScalingGroupName));
        if (asg) {
          asg.set("notification", notify);
          notify.set("asg", asg);
        }
        if ((_ref1 = resolve(MC.extractID(data.resource.TopicARN))) != null) {
          _ref1.assignTo(notify);
        }
        return null;
      }
    });
    ExpandedAsgModel = ComplexResModel.extend({
      type: "ExpandedAsg",
      defaults: {
        originalAsg: null
      },
      constructor: function(attributes, options) {
        var asg, expanded, _i, _len, _ref;
        console.assert(attributes.parent && attributes.originalAsg, "Invalid parameter for expanding asg");
        asg = attributes.originalAsg;
        _ref = [asg].concat(asg.get("expandedList"));
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          expanded = _ref[_i];
          if (attributes.parent.parent() === expanded.parent().parent()) {
            return;
          }
        }
        ComplexResModel.call(this, attributes, options);
        return null;
      },
      isReparentable: function(newParent) {
        var asg, expanded, _i, _len, _ref;
        asg = this.attributes.originalAsg;
        _ref = [asg].concat(asg.get("expandedList"));
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          expanded = _ref[_i];
          if (expanded !== this && newParent.parent() === expanded.parent().parent()) {
            return false;
          }
        }
        return true;
      },
      initialize: function() {
        var _ref;
        console.assert(this.get("originalAsg").get("expandedList").indexOf(this) === -1, "The expandedAsg is already in the Asg");
        this.get("originalAsg").get("expandedList").push(this);
        if ((_ref = this.getLc()) != null) {
          _ref.trigger("change:expandedList", this);
        }
        return null;
      },
      remove: function() {
        var siblings, _ref;
        siblings = this.get("originalAsg").get("expandedList");
        siblings.splice(siblings.indexOf(this), 1);
        if ((_ref = this.getLc()) != null) {
          _ref.trigger("change:expandedList", this);
        }
        return ComplexResModel.prototype.remove.call(this);
      },
      getLc: function() {
        return this.attributes.originalAsg.getLc();
      },
      serialize: function() {
        var layout;
        layout = this.generateLayout();
        layout.type = "ExpandedAsg";
        layout.originalId = this.get("originalAsg").id;
        return {
          layout: layout
        };
      }
    }, {
      handleTypes: "ExpandedAsg",
      deserialize: function(data, layout_data, resolve) {
        var originalAsg;
        originalAsg = resolve(layout_data.originalId);
        if (!originalAsg) {
          console.warn("The ExpandedAsg is removed because its ASG is not found.");
          return;
        }
        new ExpandedAsgModel({
          id: data.uid,
          originalAsg: originalAsg,
          parent: resolve(layout_data.groupUId),
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1]
        });
        return null;
      }
    });
    Model = ComplexResModel.extend({
      defaults: function() {
        return {
          cooldown: "300",
          capacity: "1",
          minSize: "1",
          maxSize: "2",
          healthCheckGracePeriod: "300",
          healthCheckType: "EC2",
          terminationPolicies: ["Default"],
          expandedList: [],
          policies: []
        };
      },
      type: constant.RESTYPE.ASG,
      newNameTmpl: "asg",
      isReparentable: function(newParent) {
        var expand, _i, _len, _ref;
        _ref = this.get("expandedList");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          expand = _ref[_i];
          if (newParent.parent() === expand.parent().parent()) {
            return sprintf(lang.CANVAS.ERR_DROP_ASG, this.get("name"), newParent.parent().get("name"));
          }
        }
        return true;
      },
      setName: function(name) {
        var expand, _i, _len, _ref;
        ComplexResModel.prototype.setName.call(this, name);
        _ref = this.get("expandedList");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          expand = _ref[_i];
          expand.trigger('change:name');
        }
        return null;
      },
      setLc: function(lc) {
        if (this.getLc() || !lc) {
          return;
        }
        if (_.isString(lc)) {
          lc = this.design().component(lc);
        }
        return new LcUsage(this, lc);
      },
      getLc: function() {
        return this.connectionTargets("LcUsage")[0];
      },
      getCost: function(priceMap, currency) {
        var InstanceModel, lc, lcFee, lcPrice, v, volumeList, vp, _i, _len;
        lc = this.getLc();
        if (!lc) {
          return null;
        }
        InstanceModel = Design.modelClassForType(constant.RESTYPE.INSTANCE);
        lcPrice = InstanceModel.prototype.getCost.call(lc, priceMap, currency);
        if (!lcPrice) {
          return null;
        }
        if (lcPrice.length) {
          lcPrice = lcPrice[0];
        }
        lcPrice.resource = this.get("name");
        lcFee = lcPrice.fee;
        volumeList = lc.get("volumeList");
        if (volumeList && volumeList.length) {
          for (_i = 0, _len = volumeList.length; _i < _len; _i++) {
            v = volumeList[_i];
            vp = v.getCost(priceMap, currency, true);
            if (vp) {
              lcFee += vp.fee;
            }
          }
        }
        if (lcPrice.fee !== lcFee) {
          lcPrice.resource += " (& volumes)";
          lcPrice.fee = lcFee;
        }
        lcPrice.type = parseInt(this.get("capacity") || this.get("minSize"), 10);
        lcPrice.fee *= lcPrice.type;
        lcPrice.fee = Math.round(lcPrice.fee * 100) / 100;
        lcPrice.formatedFee = lcPrice.fee + "/mo";
        return lcPrice;
      },
      getNotification: function() {
        var _ref;
        return ((_ref = this.get("notification")) != null ? _ref.toJSON() : void 0) || {};
      },
      getNotiObject: function() {
        return this.get("notification");
      },
      setNotification: function(data) {
        var n;
        n = this.get("notification");
        if (n) {
          n.set(data);
        } else {
          data.asg = this;
          n = new NotificationModel(data);
          this.set("notification", n);
        }
        return n;
      },
      setNotificationTopic: function(appId, name) {
        var _ref;
        return (_ref = this.get("notification")) != null ? _ref.setTopic(appId, name) : void 0;
      },
      getNotificationTopicName: function() {
        var _ref;
        return (_ref = this.get("notification")) != null ? _ref.getTopicName() : void 0;
      },
      addScalingPolicy: function(policy) {
        policy.__asg = this;
        this.get("policies").push(policy);
        this.listenTo(policy, "destroy", this.__removeScalingPolicy);
        return null;
      },
      __removeScalingPolicy: function(policy) {
        this.stopListening(policy);
        this.get("policies").splice(this.get("policies").indexOf(policy), 1);
        return null;
      },
      isEC2HealthCheckType: function() {
        var lc;
        lc = this.getLc();
        if (lc && lc.connections("ElbAmiAsso").length && this.get("healthCheckType") === "ELB") {
          return false;
        }
        return true;
      },
      remove: function() {
        var asg, p, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        _ref = this.get("expandedList");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          asg = _ref[_i];
          asg.remove();
        }
        _ref1 = this.get("policies");
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          p.off();
          p.remove();
        }
        if ((_ref2 = this.get("notification")) != null) {
          _ref2.remove();
        }
        ComplexResModel.prototype.remove.call(this);
        return null;
      },
      getExpandSubnets: function() {
        var expand, subnets, _i, _len, _ref;
        subnets = [this.parent()];
        _ref = this.get("expandedList");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          expand = _ref[_i];
          subnets.push(expand.parent());
        }
        return subnets;
      },
      getExpandAzs: function() {
        var az, sb, _i, _len, _ref;
        az = [];
        _ref = this.getExpandSubnets();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sb = _ref[_i];
          az.push(sb.parent());
        }
        return _.uniq(az);
      },
      serialize: function() {
        var azs, component, elbArray, elbs, healthCheckType, lc, subnets;
        subnets = this.getExpandSubnets();
        azs = _.uniq(_.map(subnets, function(sb) {
          return sb.parent().createRef();
        }));
        subnets = _.map(subnets, function(sb) {
          return sb.createRef("SubnetId");
        });
        lc = this.getLc();
        if (lc) {
          elbs = lc.connectionTargets("ElbAmiAsso");
          if (elbs.length) {
            healthCheckType = this.get("healthCheckType");
            elbArray = _.map(elbs, function(elb) {
              return elb.createRef("LoadBalancerName");
            });
          }
        }
        component = {
          uid: this.id,
          name: this.get("name"),
          description: this.get("description") || "",
          type: this.type,
          resource: {
            AvailabilityZones: azs,
            VPCZoneIdentifier: subnets.join(" , "),
            LoadBalancerNames: elbArray || [],
            AutoScalingGroupARN: this.get("appId"),
            DefaultCooldown: this.get("cooldown"),
            MinSize: this.get("minSize"),
            MaxSize: this.get("maxSize"),
            HealthCheckType: healthCheckType || "EC2",
            HealthCheckGracePeriod: this.get("healthCheckGracePeriod"),
            TerminationPolicies: this.get("terminationPolicies"),
            AutoScalingGroupName: this.get("groupName") || this.get("name"),
            DesiredCapacity: this.get("capacity"),
            LaunchConfigurationName: (lc != null ? lc.createRef("LaunchConfigurationName") : void 0) || ""
          }
        };
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      handleTypes: constant.RESTYPE.ASG,
      deserialize: function(data, layout_data, resolve) {
        var ElbAsso, asg, elb, elbName, lc, _i, _len, _ref;
        asg = new Model({
          id: data.uid,
          name: data.name,
          description: data.description || "",
          appId: data.resource.AutoScalingGroupARN,
          parent: resolve(MC.extractID(layout_data.groupUId)),
          cooldown: String(data.resource.DefaultCooldown),
          capacity: String(data.resource.DesiredCapacity),
          minSize: String(data.resource.MinSize),
          maxSize: String(data.resource.MaxSize),
          healthCheckType: data.resource.HealthCheckType,
          healthCheckGracePeriod: String(data.resource.HealthCheckGracePeriod),
          terminationPolicies: data.resource.TerminationPolicies,
          groupName: data.resource.AutoScalingGroupName,
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1]
        });
        if (data.resource.LaunchConfigurationName) {
          lc = resolve(MC.extractID(data.resource.LaunchConfigurationName));
          new LcUsage(asg, lc);
          ElbAsso = Design.modelClassForType("ElbAmiAsso");
          _ref = data.resource.LoadBalancerNames || [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            elbName = _ref[_i];
            elb = resolve(MC.extractID(elbName));
            new ElbAsso(lc, elb);
          }
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/AzModel',["GroupModel", "constant", "i18n!/nls/lang.js", "Design", "CloudResources"], function(GroupModel, constant, lang, Design, CloudResources) {
    var Model;
    Model = GroupModel.extend({
      type: constant.RESTYPE.AZ,
      isRemovable: function() {
        if (_.some(this.children(), function(sb) {
          return sb.connections("SubnetgAsso").length > 0;
        })) {
          return {
            error: lang.IDE.RDS_MSG_ERR_REMOVE_AZ_FAILED_CAUSEDBY_CHILD_USEDBY_SBG
          };
        }
        if (this.children().length > 0) {
          return sprintf(lang.CANVAS.CVS_CFM_DEL_GROUP, this.get("name"));
        }
        return true;
      },
      createRef: function() {
        return Model.__super__.createRef("ZoneName", true, this.id);
      },
      getAvailableIPCountInSubnet: function(cidr) {
        var child, eni, ipCount, maxIpCount, _i, _len, _ref;
        if (!cidr) {
          return true;
        }
        ipCount = 0;
        _ref = this.children();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.type === constant.RESTYPE.INSTANCE) {
            eni = child.getEmbedEni();
          } else if (child.type === constant.RESTYPE.ENI) {
            eni = child;
          } else {
            continue;
          }
          ipCount += eni.get("ips").length * eni.serverGroupCount();
        }
        maxIpCount = Design.modelClassForType(constant.RESTYPE.ENI).getAvailableIPCountInCIDR(cidr);
        return maxIpCount - ipCount;
      },
      serialize: function() {
        var component, n;
        n = this.get("name");
        component = {
          uid: this.id,
          name: n,
          type: this.type,
          resource: {
            ZoneName: n,
            RegionName: n.substring(0, n.length - 1)
          }
        };
        return {
          layout: this.generateLayout(),
          component: component
        };
      }
    }, {
      handleTypes: constant.RESTYPE.AZ,
      deserialize: function(data, layout_data, resolve) {
        var appId;
        if (!Design.instance().modeIsStack()) {
          appId = data.name;
        }
        new Model({
          id: data.uid,
          name: data.name,
          appId: appId,
          parent: resolve(layout_data.groupUId),
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1],
          width: layout_data.size[0],
          height: layout_data.size[1]
        });
        return null;
      },
      allPossibleAZ: function() {
        var az, azMap, _i, _len, _ref;
        azMap = {};
        _ref = Model.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          az = _ref[_i];
          azMap[az.get("name")] = az.id;
        }
        return CloudResources(constant.RESTYPE.AZ, region).where({
          category: region
        }).map(function(az) {
          return {
            name: az.attributes.id,
            id: azMap[az.attributes.id] || ""
          };
        });
      },
      getAzByName: function(name) {
        var az, _i, _len, _ref;
        _ref = Model.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          az = _ref[_i];
          if (az.get("name") === name) {
            return az;
          }
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/CgwModel',["ComplexResModel", "Design", "constant"], function(ComplexResModel, Design, constant) {
    var Model;
    Model = ComplexResModel.extend({
      defaults: {
        bgpAsn: ""
      },
      newNameTmpl: "customer-gateway-",
      type: constant.RESTYPE.CGW,
      isDynamic: function() {
        return !!this.get("bgpAsn");
      },
      serialize: function() {
        var component;
        component = {
          name: this.get("name"),
          description: this.get("description") || "",
          type: this.type,
          uid: this.id,
          resource: {
            CustomerGatewayId: this.get("appId"),
            BgpAsn: this.get("bgpAsn"),
            Type: "ipsec.1",
            IpAddress: this.get("ip")
          }
        };
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      handleTypes: constant.RESTYPE.CGW,
      deserialize: function(data, layout_data, resolve) {
        return new Model({
          id: data.uid,
          name: data.name,
          description: data.description || "",
          appId: data.resource.CustomerGatewayId,
          bgpAsn: data.resource.BgpAsn,
          ip: data.resource.IpAddress,
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1]
        });
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/SgRuleSet',["constant", "ConnectionModel", "Design"], function(constant, ConnectionModel, Design) {
    var SgRuleSet;
    SgRuleSet = ConnectionModel.extend({
      type: "SgRuleSet",

      /*
      |-------|   in1        out2   |-------|
      |       |  <=====     <=====  |       |
      | PORT1 |                     | PORT2 |
      |       |  =====>     =====>  |       |
      |-------|   out1        in2   |-------|
       */
      "default": {
        in1: null,
        out1: null,
        in2: null,
        out2: null
      },
      initialize: function() {
        var tmp;
        if (this.port1Comp().type === "SgIpTarget") {
          tmp = this.port2Comp();
          this.__port2Comp = this.__port1Comp;
          this.__port1Comp = tmp;
        }
        this.attributes.in1 = [];
        this.attributes.out1 = [];
        if (this.port1Comp() === this.port2Comp()) {
          this.attributes.in2 = this.attributes.in1;
          this.attributes.out2 = this.attributes.out1;
        } else {
          this.attributes.in2 = [];
          this.attributes.out2 = [];
        }
        return null;
      },
      ruleCount: function(port) {
        if (port === this.port1Comp().id || port === this.port1Comp().get("name")) {
          return this.attributes.in1.length + this.attributes.out1.length;
        } else {
          return this.attributes.in2.length + this.attributes.out2.length;
        }
      },
      toPlainObjects: function(filter, detailedInfo) {
        var attr, port, portion, portions, rule, rules, _i, _j, _len, _len1, _ref;
        portions = [
          {
            ary: this.attributes.in1,
            direction: SgRuleSet.DIRECTION.IN,
            relation: this.port2Comp(),
            owner: this.port1Comp()
          }, {
            ary: this.attributes.out1,
            direction: SgRuleSet.DIRECTION.OUT,
            relation: this.port2Comp(),
            owner: this.port1Comp()
          }
        ];
        if (!(this.port1Comp() === this.port2Comp() || this.getTarget("SgIpTarget"))) {
          portions.push({
            ary: this.attributes.in2,
            direction: SgRuleSet.DIRECTION.IN,
            relation: this.port1Comp(),
            owner: this.port2Comp()
          });
          portions.push({
            ary: this.attributes.out2,
            direction: SgRuleSet.DIRECTION.OUT,
            relation: this.port1Comp(),
            owner: this.port2Comp()
          });
        }
        rules = [];
        for (_i = 0, _len = portions.length; _i < _len; _i++) {
          portion = portions[_i];
          if (filter) {
            if (_.isString(filter)) {
              if (portion.owner.id !== filter && portion.owner.get("name") !== filter) {
                continue;
              }
            } else if (!filter(portion.owner)) {
              continue;
            }
          }
          _ref = portion.ary;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            rule = _ref[_j];
            if (rule.protocol === "icmp") {
              port = rule.fromPort + "/" + rule.toPort;
            } else if (rule.fromPort === rule.toPort || !rule.toPort) {
              port = rule.fromPort;
            } else {
              port = rule.fromPort + "-" + rule.toPort;
            }
            attr = {
              ruleSetId: this.id,
              port: port,
              protocol: rule.protocol,
              direction: portion.direction,
              relation: portion.relation.get("name"),
              color: portion.relation.color
            };
            if (detailedInfo) {
              attr.relationId = portion.relation.id;
              attr.ownerId = portion.owner.id;
            }
            rules.push(attr);
          }
        }
        return rules;
      },
      hasRawRuleTo: function(port) {
        console.assert(port === this.port1Comp() || port === this.port2Comp(), "Invalid port for calling SgRuleSet.hasRawRuleTo()");
        if (port === this.port1Comp()) {
          return this.attributes.in1.length > 0 || this.attributes.out2.length > 0;
        } else {
          return this.attributes.in2.length > 0 || this.attributes.out1.length > 0;
        }
      },
      addRawRule: function(ruleOwner, direction, rawRule) {
        var SgModel, elb, exist, existRule, oldPort1InRuleCout, oldPort1OutRuleCout, oldPort2InRuleCout, oldPort2OutRuleCout, p1, p2, port1, portion, portionName, portions, rule, shouldInitSgLine, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
        console.assert(ruleOwner === this.port1Comp().id || ruleOwner === this.port2Comp().id || ruleOwner === this.port1Comp().get("name") || ruleOwner === this.port2Comp().get("name"), "Invalid ruleOwner, when adding a raw rule to SgRuleSet : ", ruleOwner);
        console.assert(direction === SgRuleSet.DIRECTION.BIWAY || direction === SgRuleSet.DIRECTION.IN || direction === SgRuleSet.DIRECTION.OUT, "Invalid direction, when adding a raw rule to SgRuleSet : ", rawRule);
        console.assert((("" + rawRule.protocol) === "-1" || rawRule.protocol === "all" || parseInt(rawRule.protocol, 10) + "" === rawRule.protocol) || rawRule.fromPort || rawRule.toPort, "Invalid rule, when adding a raw rule to SgRuleSet : ", rawRule);
        shouldInitSgLine = this.get("in1").length + this.get("in2").length + this.get("out1").length + this.get("out2").length === 0;
        oldPort1InRuleCout = this.get("in1").length;
        oldPort2InRuleCout = this.get("in2").length;
        oldPort1OutRuleCout = this.get("out1").length;
        oldPort2OutRuleCout = this.get("out2").length;
        rule = {
          protocol: rawRule.protocol,
          fromPort: "" + rawRule.fromPort,
          toPort: "" + rawRule.toPort
        };
        if (("" + rule.protocol) === "-1" || rule.protocol === "all") {
          rule.protocol = "all";
          rule.fromPort = "0";
          rule.toPort = "65535";
        } else if (parseInt(rawRule.protocol, 10) + "" === rawRule.protocol) {
          rule.fromPort = "";
          rule.toPort = "";
        }
        if (rule.fromPort === rule.toPort && rule.protocol !== "icmp") {
          rule.toPort = "";
        }
        port1 = ruleOwner === this.port1Comp().id || ruleOwner === this.port1Comp().get("name");
        if (!port1 && this.getTarget("SgIpTarget")) {
          console.info("Ignoring adding sg rules for Ip Target.");
          return;
        }
        switch (direction) {
          case SgRuleSet.DIRECTION.IN:
            portions = [port1 ? "in1" : "in2"];
            break;
          case SgRuleSet.DIRECTION.OUT:
            portions = [port1 ? "out1" : "out2"];
            break;
          case SgRuleSet.DIRECTION.BIWAY:
            portions = [port1 ? "in1" : "in2", port1 ? "out1" : "out2"];
        }
        for (_i = 0, _len = portions.length; _i < _len; _i++) {
          portionName = portions[_i];
          exist = false;
          portion = this.get(portionName);
          for (_j = 0, _len1 = portion.length; _j < _len1; _j++) {
            existRule = portion[_j];
            if (existRule.fromPort === rule.fromPort && existRule.toPort === rule.toPort && existRule.protocol === rule.protocol) {
              exist = true;
              break;
            }
          }
          if (!exist) {
            portion = portion.slice(0);
            portion.push(rule);
            this.set(portionName, portion);
          }
        }
        if (shouldInitSgLine) {
          p1 = this.port1Comp();
          p2 = this.port2Comp();
          if (p1 !== p2 && p1.type !== "SgIpTarget" && p2.type !== "SgIpTarget") {
            p1.vlineAddBatch(p2);
          }
        } else {
          SgModel = Design.modelClassForType(constant.RESTYPE.SG);
          if ((oldPort1InRuleCout + oldPort2OutRuleCout === 0) && (this.get("in1").length + this.get("out2").length > 0)) {
            _ref = this.port1Comp().connectionTargets("SgAsso");
            for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
              elb = _ref[_k];
              if (elb.type === constant.RESTYPE.ELB) {
                SgModel.tryDrawLine(elb);
              }
            }
          }
          if ((oldPort2InRuleCout + oldPort1OutRuleCout === 0) && (this.get("in2").length + this.get("out1").length > 0)) {
            _ref1 = this.port2Comp().connectionTargets("SgAsso");
            for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
              elb = _ref1[_l];
              if (elb.type === constant.RESTYPE.ELB) {
                SgModel.tryDrawLine(elb);
              }
            }
          }
        }
        return null;
      },
      addRule: function(target, direction, rule) {
        var target2;
        console.assert(target === this.port1Comp().id || target === this.port2Comp().id || target === this.port1Comp().get("name") || target === this.port2Comp().get("name"), "Invalid target, when adding a rule to SgRuleSet : ", target);
        if (target === this.port1Comp().id || target === this.port1Comp().get("name")) {
          target2 = this.port2Comp().id;
        } else {
          target = this.port2Comp().id;
          target2 = this.port1Comp().id;
        }
        if (direction === SgRuleSet.DIRECTION.IN || direction === SgRuleSet.DIRECTION.BIWAY) {
          this.addRawRule(target, SgRuleSet.DIRECTION.IN, rule);
          this.addRawRule(target2, SgRuleSet.DIRECTION.OUT, rule);
        }
        if (direction === SgRuleSet.DIRECTION.OUT || direction === SgRuleSet.DIRECTION.BIWAY) {
          this.addRawRule(target, SgRuleSet.DIRECTION.OUT, rule);
          this.addRawRule(target2, SgRuleSet.DIRECTION.IN, rule);
        }
        return null;
      },
      removeRawRule: function(ruleOwner, direction, rule) {
        var SgModel, elb, existRule, found, idx, oldPort1InRuleCout, oldPort1OutRuleCout, oldPort2InRuleCout, oldPort2OutRuleCout, port1, portion, portionName, portions, sgline, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3;
        console.assert(ruleOwner === this.port1Comp().id || ruleOwner === this.port2Comp().id || ruleOwner === this.port1Comp().get("name") || ruleOwner === this.port2Comp().get("name"), "Invalid ruleOwner, when removing a raw rule from SgRuleSet : ", ruleOwner);
        console.assert(direction === SgRuleSet.DIRECTION.BIWAY || direction === SgRuleSet.DIRECTION.IN || direction === SgRuleSet.DIRECTION.OUT, "Invalid direction, when removing a raw rule from SgRuleSet : ", rule);
        console.assert(rule.fromPort !== void 0 && rule.toPort !== void 0 && rule.protocol !== void 0, "Invalid rule, when removing a raw rule from SgRuleSet : ", rule);
        oldPort1InRuleCout = this.get("in1").length;
        oldPort2InRuleCout = this.get("in2").length;
        oldPort1OutRuleCout = this.get("out1").length;
        oldPort2OutRuleCout = this.get("out2").length;
        if (rule.protocol === "-1") {
          rule.protocol = "all";
        }
        if (rule.fromPort === rule.toPort) {
          rule.toPort = "";
        }
        port1 = ruleOwner === this.port1Comp().id || ruleOwner === this.port1Comp().get("name");
        switch (direction) {
          case SgRuleSet.DIRECTION.IN:
            portions = [port1 ? "in1" : "in2"];
            break;
          case SgRuleSet.DIRECTION.OUT:
            portions = [port1 ? "out1" : "out2"];
            break;
          case SgRuleSet.DIRECTION.BIWAY:
            portions = [port1 ? "in1" : "in2", port1 ? "out1" : "out2"];
        }
        found = false;
        for (_i = 0, _len = portions.length; _i < _len; _i++) {
          portionName = portions[_i];
          portion = this.get(portionName);
          for (idx = _j = 0, _len1 = portion.length; _j < _len1; idx = ++_j) {
            existRule = portion[idx];
            if (existRule.fromPort === rule.fromPort && existRule.toPort === rule.toPort && existRule.protocol === rule.protocol) {
              portion = portion.slice(0);
              portion.splice(idx, 1);
              found = true;
              this.set(portionName, portion);
              break;
            }
          }
        }
        if (this.get("in1").length + this.get("in2").length + this.get("out1").length + this.get("out2").length === 0) {
          this.remove();
        } else {
          SgModel = Design.modelClassForType(constant.RESTYPE.SG);
          if ((this.get("in1").length + this.get("out2").length === 0) && (oldPort1InRuleCout + oldPort2OutRuleCout > 0)) {
            _ref = this.port1Comp().connectionTargets("SgAsso");
            for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
              elb = _ref[_k];
              if (elb.type === constant.RESTYPE.ELB) {
                _ref1 = elb.connections("SgRuleLine");
                for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
                  sgline = _ref1[_l];
                  sgline.validate();
                }
              }
            }
          }
          if ((this.get("in2").length + this.get("out1").length === 0) && (oldPort2InRuleCout + oldPort1OutRuleCout > 0)) {
            _ref2 = this.port2Comp().connectionTargets("SgAsso");
            for (_m = 0, _len4 = _ref2.length; _m < _len4; _m++) {
              elb = _ref2[_m];
              if (elb.type === constant.RESTYPE.ELB) {
                _ref3 = elb.connections("SgRuleLine");
                for (_n = 0, _len5 = _ref3.length; _n < _len5; _n++) {
                  sgline = _ref3[_n];
                  sgline.validate();
                }
              }
            }
          }
        }
        console.assert(found, "Rule is not found when removing SG Rule", rule);
        return null;
      },
      removeRuleByPlainObj: function(ruleObj) {
        var owner, ports;
        console.assert(ruleObj.relation === this.port1Comp().id || ruleObj.relation === this.port1Comp().get("name") || ruleObj.relation === this.port2Comp().id || ruleObj.relation === this.port2Comp().get("name"), "Invalid ruleObj.relation, when removing a rule : ", ruleObj);
        console.assert(ruleObj.direction === SgRuleSet.DIRECTION.BIWAY || ruleObj.direction === SgRuleSet.DIRECTION.IN || ruleObj.direction === SgRuleSet.DIRECTION.OUT, "Invalid direction, when removing a raw rule from SgRuleSet : ", ruleObj);
        console.assert(ruleObj.relation !== void 0 && ruleObj.port !== void 0 && ruleObj.protocol !== void 0 && ruleObj.direction !== void 0, "Invalid ruleObj, when removing a rule : ", ruleObj);
        if (ruleObj.relation === this.port1Comp().id || ruleObj.relation === this.port1Comp().get("name")) {
          owner = this.port2Comp().id;
        } else {
          owner = this.port1Comp().id;
        }
        ports = "" + ruleObj.port;
        if (ports.indexOf("/") >= 0) {
          ports = ports.split("/");
        } else {
          ports = ports.split("-");
        }
        ruleObj.fromPort = ports[0];
        ruleObj.toPort = ports[1] || "";
        this.removeRawRule(owner, ruleObj.direction, ruleObj);
        return null;
      },
      serialize: function(components) {
        var portion, portions, rule, sg1, sg1Ref, sg2, sg2Ref, _i, _j, _len, _len1, _ref;
        sg1 = this.port1Comp();
        sg2 = this.port2Comp();
        sg1Ref = sg1.createRef("GroupId");
        sg2Ref = sg2.type === "SgIpTarget" ? sg2.get("name") : sg2.createRef("GroupId");
        portions = [
          {
            ary: this.get("in1"),
            owner: components[sg1.id].resource.IpPermissions,
            target: sg2Ref
          }, {
            ary: this.get("out1"),
            owner: components[sg1.id].resource.IpPermissionsEgress,
            target: sg2Ref
          }
        ];
        if (sg2.type !== "SgIpTarget" && sg1 !== sg2) {
          portions.push({
            ary: this.get("in2"),
            owner: components[sg2.id].resource.IpPermissions,
            target: sg1Ref
          });
          portions.push({
            ary: this.get("out2"),
            owner: components[sg2.id].resource.IpPermissionsEgress,
            target: sg1Ref
          });
        }
        for (_i = 0, _len = portions.length; _i < _len; _i++) {
          portion = portions[_i];
          _ref = portion.ary;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            rule = _ref[_j];
            if (rule.protocol === '1') {
              rule.protocol = 'icmp';
              rule.fromPort = '0';
              rule.toPort = '0';
            }
            portion.owner.push({
              FromPort: rule.fromPort,
              ToPort: rule.toPort ? rule.toPort : rule.fromPort,
              IpRanges: portion.target,
              IpProtocol: rule.protocol === "all" ? "-1" : rule.protocol
            });
          }
        }
        return null;
      },
      remove: function() {
        ConnectionModel.prototype.remove.apply(this, arguments);
        if (this.getTarget("SgIpTarget")) {
          return;
        }
        if (this.port1Comp().isRemoved()) {
          this.port2Comp().vlineRemoveBatch(this.port1Comp(), this);
        } else {
          this.port1Comp().vlineRemoveBatch(this.port2Comp(), this);
        }
      }
    }, {
      getResourceSgRuleSets: function(resource) {
        var ruleset, sg, sgRuleAry, sgRuleMap, _i, _j, _len, _len1, _ref, _ref1;
        sgRuleMap = {};
        sgRuleAry = [];
        _ref = resource.connectionTargets("SgAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sg = _ref[_i];
          _ref1 = sg.connections("SgRuleSet");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            ruleset = _ref1[_j];
            if (sgRuleMap[ruleset.id]) {
              continue;
            }
            sgRuleMap[ruleset.id] = true;
            sgRuleAry.push(ruleset);
          }
        }
        return sgRuleAry;
      },
      getRelatedSgRuleSets: function(res1, res2) {
        var foundRuleSet, res1SgMap, ruleset, sg, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        res1SgMap = {};
        _ref = res1.connectionTargets("SgAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sg = _ref[_i];
          res1SgMap[sg.id] = true;
        }
        foundRuleSet = [];
        _ref1 = res2.connectionTargets("SgAsso");
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          sg = _ref1[_j];
          _ref2 = sg.connections("SgRuleSet");
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            ruleset = _ref2[_k];
            if (res1SgMap[ruleset.getOtherTarget(sg).id]) {
              foundRuleSet.push(ruleset);
            }
          }
        }
        return _.uniq(foundRuleSet);
      },
      getPlainObjFromRuleSets: function(sgRuleAry) {
        var rule, ruleMap, ruleString, rules, _i, _len;
        ruleMap = {};
        rules = [];
        for (_i = 0, _len = sgRuleAry.length; _i < _len; _i++) {
          rule = sgRuleAry[_i];
          ruleString = rule.direction + rule.target + rule.protocol + rule.port;
          if (ruleMap[ruleString]) {
            continue;
          }
          ruleMap[ruleString] = true;
          rules.push(rule);
        }
        return rules;
      },
      getGroupedObjFromRuleSets: function(rulesetArray) {
        var arr, comp, group, id, ipTarget, plainObj, ruleset, tempMap, uid, _i, _j, _len, _len1, _ref;
        tempMap = {};
        for (_i = 0, _len = rulesetArray.length; _i < _len; _i++) {
          ruleset = rulesetArray[_i];
          ipTarget = ruleset.getTarget("SgIpTarget");
          if (ipTarget && !ipTarget.isClassicElbSg()) {
            continue;
          }
          comp = ruleset.port1Comp();
          id = comp.id;
          if (!tempMap[id]) {
            tempMap[id] = {
              ownerId: id,
              ownerName: comp.get("name"),
              ownerColor: comp.color,
              rules: []
            };
          }
          comp = ruleset.port2Comp();
          id = comp.id;
          if (!tempMap[id]) {
            tempMap[id] = {
              ownerId: id,
              ownerName: comp.get("name"),
              ownerColor: comp.color,
              rules: []
            };
          }
          _ref = ruleset.toPlainObjects(null, true);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            plainObj = _ref[_j];
            tempMap[plainObj.ownerId].rules.push(plainObj);
          }
        }
        arr = [];
        for (uid in tempMap) {
          group = tempMap[uid];
          if (group.rules.length) {
            arr.push(group);
          }
        }
        return arr.sort(function(a, b) {
          if (a.ownerName === "DefaultSG") {
            return -1;
          }
          if (b.ownerName === "DefaultSG") {
            return 1;
          }
          if (a.ownerName < b.ownerName) {
            return -1;
          }
          if (a.ownerName > b.ownerName) {
            return 1;
          }
          return 0;
        });
      }
    });
    SgRuleSet.DIRECTION = {
      BIWAY: "biway",
      IN: "inbound",
      OUT: "outbound"
    };
    return SgRuleSet;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/SgLine',["constant", "ConnectionModel", "ResourceModel", "i18n!/nls/lang.js"], function(constant, ConnectionModel, ResourceModel, lang) {
    var SgRuleLine;
    SgRuleLine = ConnectionModel.extend({
      constructor: function(p1Comp, p2Comp, attr, option) {
        console.assert(p1Comp !== p2Comp, "Sgline should connect to different resources.");
        if (!this.assignCompsToPorts(p1Comp, p2Comp) || !this.isValid()) {
          return;
        }
        return ConnectionModel.call(this, p1Comp, p2Comp, attr, option);
      },
      isValid: function() {
        var TYPE, ami, attachs, elb, elbSgMap, eni, expandAsg, hasInRule, lc, p1Comp, p2Comp, ruleset, sg, target, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        p1Comp = this.port1Comp();
        p2Comp = this.port2Comp();
        TYPE = constant.RESTYPE;
        if (p1Comp.type === p2Comp.type && p1Comp.type === TYPE.AWS_ELB) {
          return false;
        }
        ami = this.getTarget(TYPE.INSTANCE);
        eni = this.getTarget(TYPE.ENI);
        if (eni) {
          attachs = eni.connectionTargets("EniAttachment");
          if (attachs.length === 0) {
            return false;
          }
          if (attachs.indexOf(ami) >= 0) {
            return false;
          }
        }
        expandAsg = this.getTarget("ExpandedAsg");
        lc = this.getTarget(TYPE.LC);
        if (expandAsg && lc && expandAsg.get("originalAsg").getLc() === lc) {
          return false;
        }
        elb = this.getTarget(TYPE.ELB);
        if (elb) {
          if (!elb.get("internal")) {
            return false;
          }
          elbSgMap = {};
          hasInRule = false;
          _ref = elb.connectionTargets("SgAsso");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sg = _ref[_i];
            elbSgMap[sg.id] = sg;
          }
          _ref1 = this.getOtherTarget(elb).connectionTargets("SgAsso");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            sg = _ref1[_j];
            _ref2 = sg.connections("SgRuleSet");
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              ruleset = _ref2[_k];
              target = ruleset.getOtherTarget(sg);
              if (!elbSgMap[target.id]) {
                continue;
              }
              if (ruleset.hasRawRuleTo(elbSgMap[target.id])) {
                hasInRule = true;
                break;
              }
            }
            if (hasInRule) {
              break;
            }
          }
          if (!hasInRule) {
            return false;
          }
        }
        return true;
      },
      validate: function() {
        if (!this.isValid()) {
          this.remove({
            reason: "Validation Failed"
          });
        }
      },
      isRemovable: function() {
        var SgRuleSetModel, allRuleSets, group, groups, _i, _len;
        SgRuleSetModel = Design.modelClassForType("SgRuleSet");
        allRuleSets = SgRuleSetModel.getRelatedSgRuleSets(this.port1Comp(), this.port2Comp());
        groups = SgRuleSetModel.getGroupedObjFromRuleSets(allRuleSets);
        for (_i = 0, _len = groups.length; _i < _len; _i++) {
          group = groups[_i];
          group.content = MC.template.sgRuleList(group.rules);
        }
        return MC.template.groupedSgRuleListDelConfirm(groups);
      },
      remove: function(reason) {
        var SgRuleSetModel, rs, _i, _len, _ref;
        ConnectionModel.prototype.remove.apply(this, arguments);
        if (reason) {
          return;
        }
        if (this.port1Comp().isRemoved() || this.port2Comp().isRemoved()) {
          return;
        }
        SgRuleSetModel = Design.modelClassForType("SgRuleSet");
        _ref = SgRuleSetModel.getRelatedSgRuleSets(this.port1Comp(), this.port2Comp());
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rs = _ref[_i];
          rs.remove();
        }
        return null;
      },
      silentRemove: function() {
        var v;
        v = this.__view;
        if (v) {
          v.detach();
        }
        ResourceModel.prototype.remove.apply(this, arguments);
        return null;
      },
      type: "SgRuleLine",
      defaults: {
        name: "Security Group Rule"
      },
      portDefs: [
        {
          port1: {
            name: "instance-sg",
            type: constant.RESTYPE.INSTANCE
          },
          port2: {
            name: "instance-sg",
            type: constant.RESTYPE.INSTANCE
          }
        }, {
          port1: {
            name: "instance-sg",
            type: constant.RESTYPE.INSTANCE
          },
          port2: {
            name: "eni-sg",
            type: constant.RESTYPE.ENI
          }
        }, {
          port1: {
            name: "instance-sg",
            type: constant.RESTYPE.INSTANCE
          },
          port2: {
            name: "launchconfig-sg",
            type: constant.RESTYPE.LC
          }
        }, {
          port1: {
            name: "instance-sg",
            type: constant.RESTYPE.INSTANCE
          },
          port2: {
            name: "launchconfig-sg",
            type: "ExpandedAsg"
          }
        }, {
          port1: {
            name: "instance-sg",
            type: constant.RESTYPE.INSTANCE
          },
          port2: {
            name: "elb-sg-in",
            type: constant.RESTYPE.ELB
          }
        }, {
          port1: {
            name: "instance-sg",
            type: constant.RESTYPE.INSTANCE
          },
          port2: {
            name: "db-sg",
            type: constant.RESTYPE.DBINSTANCE
          }
        }, {
          port1: {
            name: "eni-sg",
            type: constant.RESTYPE.ENI
          },
          port2: {
            name: "eni-sg",
            type: constant.RESTYPE.ENI
          }
        }, {
          port1: {
            name: "launchconfig-sg",
            type: constant.RESTYPE.LC
          },
          port2: {
            name: "eni-sg",
            type: constant.RESTYPE.ENI
          }
        }, {
          port1: {
            name: "launchconfig-sg",
            type: "ExpandedAsg"
          },
          port2: {
            name: "eni-sg",
            type: constant.RESTYPE.ENI
          }
        }, {
          port1: {
            name: "elb-sg-in",
            type: constant.RESTYPE.ELB
          },
          port2: {
            name: "eni-sg",
            type: constant.RESTYPE.ENI
          }
        }, {
          port1: {
            name: "launchconfig-sg",
            type: constant.RESTYPE.LC
          },
          port2: {
            name: "launchconfig-sg",
            type: constant.RESTYPE.LC
          }
        }, {
          port1: {
            name: "launchconfig-sg",
            type: constant.RESTYPE.LC
          },
          port2: {
            name: "launchconfig-sg",
            type: "ExpandedAsg"
          }
        }, {
          port1: {
            name: "launchconfig-sg",
            type: constant.RESTYPE.LC
          },
          port2: {
            name: "elb-sg-in",
            type: constant.RESTYPE.ELB
          }
        }, {
          port1: {
            name: "launchconfig-sg",
            type: constant.RESTYPE.LC
          },
          port2: {
            name: "elb-sg-in",
            type: constant.RESTYPE.ELB
          }
        }, {
          port1: {
            name: "launchconfig-sg",
            type: "ExpandedAsg"
          },
          port2: {
            name: "elb-sg-in",
            type: constant.RESTYPE.ELB
          }
        }, {
          port1: {
            name: "db-sg",
            type: constant.RESTYPE.DBINSTANCE
          },
          port2: {
            name: "db-sg",
            type: constant.RESTYPE.DBINSTANCE
          }
        }, {
          port1: {
            name: "db-sg",
            type: constant.RESTYPE.DBINSTANCE
          },
          port2: {
            name: "eni-sg",
            type: constant.RESTYPE.ENI
          }
        }, {
          port1: {
            name: "db-sg",
            type: constant.RESTYPE.DBINSTANCE
          },
          port2: {
            name: "launchconfig-sg",
            type: constant.RESTYPE.LC
          }
        }, {
          port1: {
            name: "db-sg",
            type: constant.RESTYPE.DBINSTANCE
          },
          port2: {
            name: "launchconfig-sg",
            type: "ExpandedAsg"
          }
        }, {
          port1: {
            name: "db-sg",
            type: constant.RESTYPE.DBINSTANCE
          },
          port2: {
            name: "instance-sg",
            type: constant.RESTYPE.INSTANCE
          }
        }
      ]
    }, {
      isConnectable: function(p1Comp, p2Comp) {
        var attach, tag, _i, _len, _ref;
        tag = p1Comp.type + ">" + p2Comp.type;
        if (tag.indexOf(constant.RESTYPE.INSTANCE) !== -1 && tag.indexOf(constant.RESTYPE.ENI) !== -1) {
          _ref = p1Comp.connectionTargets("EniAttachment");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            attach = _ref[_i];
            if (attach === p2Comp) {
              return lang.CANVAS.NETWORK_INTERFACE_ATTACHED_INTERFACE_NO_NEED_FOR_SG_RULE;
            }
          }
        }
        return true;
      }
    });
    return SgRuleLine;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/SgModel',["ComplexResModel", "ResourceModel", "./connection/SgRuleSet", "./connection/SgLine", "Design", "constant"], function(ComplexResModel, ResourceModel, SgRuleSet, SgLine, Design, constant) {
    var Model, PREDEF_SG_COLORS, SgTargetModel;
    PREDEF_SG_COLORS = ['#f26c4f', '#7dc476', '#00bef2', '#615ca8', '#fcec00', '#ff9900', '#ffcc00', '#ffcc99', '#ff99ff', '#00cccc', '#99cc99', '#9999ff', '#ffff99', '#ff00ff', '#663300', '#336600', '#660066', '#003300', '#0000ff', '#666600'];
    SgTargetModel = ComplexResModel.extend({
      type: "SgIpTarget",
      constructor: function(ip) {
        var cache, ipTarget, _i, _len;
        cache = Design.instance().classCacheForCid(this.classId);
        for (_i = 0, _len = cache.length; _i < _len; _i++) {
          ipTarget = cache[_i];
          if (ipTarget.attributes.name === ip) {
            return ipTarget;
          }
        }
        cache.push(this);
        Backbone.Model.call(this, {
          id: MC.guid(),
          name: ip
        });
        return this;
      },
      isClassicElbSg: function() {
        return this.attributes.name === "amazon-elb/amazon-elb-sg";
      },
      isVisual: function() {
        return false;
      }
    });
    Model = ComplexResModel.extend({
      type: constant.RESTYPE.SG,
      newNameTmpl: "custom-sg-",
      color: "#f26c4f",
      defaults: {
        description: "Custom Security Group",
        groupName: ""
      },
      constructor: function() {
        var design;
        ComplexResModel.apply(this, arguments);
        design = this.design();
        if (!design.__sgmodelregdes && design.initializing()) {
          design.__sgmodelregdes = true;
          design.on(Design.EVENT.Deserialized, Model.updateSgLines);
        }
      },
      initialize: function(attributes, option) {
        var attr, direction;
        this.color = this.generateColor();
        if (!(option && option.isDeserialize)) {
          if (this.isElbSg()) {
            direction = SgRuleSet.DIRECTION.IN;
            attr = {
              fromPort: "22",
              toPort: "",
              protocol: "tcp"
            };
          } else {
            direction = SgRuleSet.DIRECTION.OUT;
            attr = {
              fromPort: "0",
              toPort: "65535",
              protocol: "-1"
            };
          }
          (new SgRuleSet(this, this.createIpTarget("0.0.0.0/0"))).addRawRule(this.id, direction, attr);
        }
        return null;
      },
      isElbSg: function() {
        return this.get("isElbSg");
      },
      setAsElbSg: function() {
        return this.set("isElbSg", true);
      },
      isDefault: function() {
        return this.attributes.name === "DefaultSG";
      },
      isVisual: function() {
        return false;
      },
      createIpTarget: function(ipAddress) {
        return new SgTargetModel(MC.getValidCIDR(ipAddress));
      },
      getNewName: function() {
        var myKinds;
        myKinds = Design.modelClassForType(this.type).allObjects();
        return ResourceModel.prototype.getNewName.call(this, myKinds.length - 1);
      },
      ruleCount: function() {
        var count, ruleset, _i, _len, _ref;
        count = 0;
        _ref = this.connections("SgRuleSet");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ruleset = _ref[_i];
          count += ruleset.ruleCount(this.id);
        }
        return count;
      },
      getMemberList: function() {
        return _.filter(this.connectionTargets("SgAsso"), function(tgt) {
          return tgt.type !== "ExpandedAsg";
        });
      },
      connect: function(cn) {
        if (cn.type === "SgAsso") {
          this.vlineAdd(cn.getOtherTarget(this));
        }
        return null;
      },
      disconnect: function(cn) {
        if (cn.type === "SgAsso") {
          this.vlineRemove(cn.getOtherTarget(this), void 0, cn);
        }
        return null;
      },
      vlineAdd: function(resource) {
        var connectedResMap, res, sg, _i, _j, _len, _len1, _ref, _ref1;
        if (this.design().initializing()) {
          return;
        }
        connectedResMap = {};
        _ref = this.getVisualConnectedSg();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sg = _ref[_i];
          _ref1 = sg.connectionTargets("SgAsso");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            res = _ref1[_j];
            if (connectedResMap[res.id]) {
              continue;
            }
            if (resource !== res) {
              new SgLine(resource, res);
            }
            connectedResMap[res.id] = true;
          }
        }
        return null;
      },
      vlineAddBatch: function(otherSg) {
        var groupRes, myRes, otherRes, _i, _j, _len, _len1, _ref;
        if (this.design().initializing()) {
          return;
        }
        if (otherSg === this) {
          return;
        }
        groupRes = this.connectionTargets("SgAsso");
        _ref = otherSg.connectionTargets("SgAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          otherRes = _ref[_i];
          for (_j = 0, _len1 = groupRes.length; _j < _len1; _j++) {
            myRes = groupRes[_j];
            if (myRes !== otherRes) {
              new SgLine(myRes, otherRes);
            }
          }
        }
        return null;
      },
      vlineRemove: function(resource, possibleAffectedRes, reason) {
        var cn, connectableMap, res, resourceSg, sg, sgTarget, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
        if (this.design().initializing()) {
          return;
        }
        if (!possibleAffectedRes) {
          possibleAffectedRes = [];
          _ref = this.getVisualConnectedSg();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sg = _ref[_i];
            possibleAffectedRes = possibleAffectedRes.concat(sg.connectionTargets("SgAsso"));
          }
        }
        connectableMap = {};
        _ref1 = resource.connectionTargets("SgAsso");
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          resourceSg = _ref1[_j];
          _ref2 = resourceSg.getVisualConnectedSg();
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            sg = _ref2[_k];
            _ref3 = sg.connectionTargets("SgAsso");
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              sgTarget = _ref3[_l];
              connectableMap[sgTarget.id] = true;
            }
          }
        }
        for (_m = 0, _len4 = possibleAffectedRes.length; _m < _len4; _m++) {
          res = possibleAffectedRes[_m];
          if (res === resource) {
            continue;
          }
          cn = SgLine.findExisting(resource, res);
          if (cn) {
            if (!connectableMap[res.id]) {
              cn.remove(reason);
            } else {
              cn.validate();
            }
          }
        }
        return null;
      },
      vlineRemoveBatch: function(otherSg, reason) {
        var possibleAffectedRes, resource, _i, _len, _ref;
        if (this.design().initializing()) {
          return;
        }
        possibleAffectedRes = otherSg.connectionTargets("SgAsso");
        _ref = this.connectionTargets("SgAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          resource = _ref[_i];
          this.vlineRemove(resource, possibleAffectedRes, reason);
        }
        return null;
      },
      getVisualConnectedSg: function() {
        var cnn, cnns, _i, _len, _ref;
        cnns = [];
        _ref = this.get("__connections");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cnn = _ref[_i];
          if (cnn.type === "SgRuleSet" && cnn.port1Comp() !== cnn.port2Comp() && !cnn.getTarget("SgIpTarget")) {
            cnns.push(cnn.getOtherTarget(this));
          }
        }
        return cnns;
      },
      generateColor: function() {
        var c, color, i, sg, usedColor, _i, _len, _ref;
        if (this.isDefault()) {
          return PREDEF_SG_COLORS[0];
        }
        usedColor = {};
        _ref = Model.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sg = _ref[_i];
          usedColor[sg.color] = true;
        }
        i = 1;
        while (i < PREDEF_SG_COLORS.length) {
          c = PREDEF_SG_COLORS[i];
          if (!usedColor[c]) {
            color = c;
            break;
          }
          ++i;
        }
        if (!color) {
          color = Math.floor(Math.random() * 0xFFFFFF).toString(16);
          while (color.length < 6) {
            color = '0' + color;
          }
          color = "#" + color;
        }
        return color;
      },
      serialize: function() {
        var component;
        component = {
          name: this.get("name"),
          type: this.type,
          uid: this.id,
          resource: {
            Default: this.isDefault(),
            GroupId: this.get("appId"),
            GroupName: this.get("groupName") || this.get("name"),
            GroupDescription: this.get("description"),
            VpcId: this.getVpcRef(),
            IpPermissions: [],
            IpPermissionsEgress: [],
            Tags: [
              {
                Key: "visops_default",
                Value: this.isDefault() ? "true" : "false"
              }
            ]
          }
        };
        return {
          component: component
        };
      }
    }, {
      getDefaultSg: function() {
        return _.find(Model.allObjects(), function(obj) {
          return obj.isDefault();
        });
      },
      tryDrawLine: function(leftRes, rightRes) {
        var connectedSg, otherSg, rightMap, rightResArr, sg, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
        if (rightRes) {
          rightMap = {};
          _ref = rightRes.connectionTargets("SgAsso");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sg = _ref[_i];
            rightMap[sg.id] = true;
          }
          _ref1 = leftRes.connectionTargets("SgAsso");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            sg = _ref1[_j];
            _ref2 = sg.getVisualConnectedSg();
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              connectedSg = _ref2[_k];
              if (rightMap[connectedSg.id]) {
                new SgLine(leftRes, rightRes);
                return;
              }
            }
          }
        } else {
          rightResArr = [];
          _ref3 = leftRes.connectionTargets("SgAsso");
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            sg = _ref3[_l];
            _ref4 = sg.getVisualConnectedSg();
            for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
              otherSg = _ref4[_m];
              rightResArr = _.union(rightResArr, otherSg.connectionTargets("SgAsso"));
            }
          }
          for (_n = 0, _len5 = rightResArr.length; _n < _len5; _n++) {
            rightRes = rightResArr[_n];
            if (leftRes !== rightRes) {
              new SgLine(leftRes, rightRes);
            }
          }
        }
        return null;
      },
      updateSgLines: function() {
        var a, connectableMap, design, idKey, key, leftPortRes, leftRes, resource, ress, ruleset, sg1, sg2, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        design = Design.instance();
        console.assert(design.__sgmodelregdes);
        delete design.__sgmodelregdes;
        connectableMap = {};
        _ref = SgRuleSet.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ruleset = _ref[_i];
          sg1 = ruleset.port1Comp();
          sg2 = ruleset.port2Comp();
          if (sg1 === sg2 || sg1.type === "SgIpTarget" || sg2.type === "SgIpTarget") {
            continue;
          }
          leftPortRes = sg1.connectionTargets("SgAsso");
          _ref1 = sg2.connectionTargets("SgAsso");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            resource = _ref1[_j];
            for (_k = 0, _len2 = leftPortRes.length; _k < _len2; _k++) {
              leftRes = leftPortRes[_k];
              if (leftRes.id === resource.id) {
                continue;
              }
              if (leftRes.id < resource.id) {
                key = leftRes.id + "|" + resource.id;
              } else {
                key = resource.id + "|" + leftRes.id;
              }
              a = connectableMap[key] || [];
              a[0] = leftRes;
              a[1] = resource;
              connectableMap[key] = a;
            }
          }
        }
        for (idKey in connectableMap) {
          ress = connectableMap[idKey];
          new SgLine(ress[0], ress[1], void 0, {
            detectDuplicate: false
          });
        }
        return null;
      },
      handleTypes: constant.RESTYPE.SG,
      deserialize: function(data, layout_data, resolve) {
        var attr, dir, group, rule, ruleObj, ruleTarget, rules, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        group = new Model({
          name: data.resource.Default ? "DefaultSG" : data.name,
          id: data.uid,
          appId: data.resource.GroupId,
          groupName: data.resource.GroupName,
          description: data.resource.GroupDescription
        }, {
          isDeserialize: true
        });
        rules = [];
        if (data.resource.IpPermissions) {
          _ref = data.resource.IpPermissions;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rule = _ref[_i];
            rules.push({
              rule: rule
            });
          }
        }
        if (data.resource.IpPermissionsEgress) {
          _ref1 = data.resource.IpPermissionsEgress;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            rule = _ref1[_j];
            rules.push({
              rule: rule,
              out: true
            });
          }
        }
        for (_k = 0, _len2 = rules.length; _k < _len2; _k++) {
          ruleObj = rules[_k];
          rule = ruleObj.rule;
          if (rule.IpRanges[0] === "@") {
            ruleTarget = resolve(MC.extractID(rule.IpRanges));
          } else {
            ruleTarget = new SgTargetModel(rule.IpRanges);
          }
          if (!ruleTarget) {
            continue;
          }
          attr = {
            fromPort: rule.FromPort,
            toPort: rule.ToPort,
            protocol: rule.IpProtocol
          };
          dir = ruleObj.out ? SgRuleSet.DIRECTION.OUT : SgRuleSet.DIRECTION.IN;
          (new SgRuleSet(group, ruleTarget)).addRawRule(group.id, dir, attr);
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/SslCertModel',["constant", "ComplexResModel", "ConnectionModel"], function(constant, ComplexResModel, ConnectionModel) {
    var SslCertModel, SslCertUsage;
    SslCertUsage = ConnectionModel.extend({
      type: "SslCertUsage",
      oneToMany: constant.RESTYPE.IAM
    });
    SslCertModel = ComplexResModel.extend({
      type: constant.RESTYPE.IAM,
      defaults: {
        name: "v",
        body: "",
        chain: "",
        key: "",
        arn: "",
        certId: ""
      },
      isVisual: function() {
        return false;
      },
      assignTo: function(target) {
        return new SslCertUsage(this, target);
      },
      serialize: function() {
        var elbModelAry, that, used;
        that = this;
        used = false;
        elbModelAry = Design.modelClassForType(constant.RESTYPE.ELB).allObjects();
        _.each(elbModelAry, function(elbModel) {
          _.each(elbModel.get('listeners'), function(listenerObj) {
            if (listenerObj.sslCert === that) {
              used = true;
            }
            return null;
          });
          return null;
        });
        if (used) {
          return {
            component: {
              uid: this.id,
              type: "AWS.IAM.ServerCertificate",
              name: this.get("name"),
              resource: {
                PrivateKey: this.get("key"),
                CertificateBody: this.get("body"),
                CertificateChain: this.get("chain"),
                ServerCertificateMetadata: {
                  ServerCertificateName: this.get("appName") || this.get("name"),
                  Arn: this.get("arn") || "",
                  ServerCertificateId: this.get("certId") || ""
                }
              }
            }
          };
        }
        return {};
      },
      updateValue: function(certObj) {
        var key, value;
        for (key in certObj) {
          value = certObj[key];
          this.set(key, value);
        }
        return null;
      }
    }, {
      handleTypes: constant.RESTYPE.IAM,
      deserialize: function(data) {
        new SslCertModel({
          id: data.uid,
          name: data.name,
          body: data.resource.CertificateBody,
          chain: data.resource.CertificateChain,
          key: data.resource.PrivateKey,
          arn: data.resource.ServerCertificateMetadata.Arn,
          certId: data.resource.ServerCertificateMetadata.ServerCertificateId,
          appName: data.resource.ServerCertificateMetadata.ServerCertificateName
        });
        return null;
      },
      createNew: function(sslCertData) {
        var needCreate, newSslCert, sslCertList;
        newSslCert = null;
        sslCertList = Design.modelClassForType(constant.RESTYPE.IAM).allObjects();
        needCreate = true;
        _.each(sslCertList, function(sslCertModel) {
          if (sslCertModel.get('body')) {
            sslCertModel.remove();
          } else {
            if (sslCertModel.get('arn') === sslCertData.get('Arn')) {
              needCreate = false;
              newSslCert = sslCertModel;
            }
          }
          return null;
        });
        if (needCreate) {
          newSslCert = new SslCertModel({
            name: sslCertData.get('Name'),
            body: sslCertData.get('CertificateBody'),
            chain: sslCertData.get('CertificateChain'),
            key: sslCertData.get('PrivateKey'),
            arn: sslCertData.get('Arn'),
            certId: sslCertData.get('id')
          });
        }
        return newSslCert;
      }
    });
    return SslCertModel;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/ElbAsso',["constant", "ConnectionModel", "i18n!/nls/lang.js", "Design", "SGRulePopup"], function(constant, ConnectionModel, lang, Design, SGRulePopup) {
    var ElbAmiAsso, ElbSubnetAsso;
    ElbSubnetAsso = ConnectionModel.extend({
      type: "ElbSubnetAsso",
      defaults: {
        deserialized: false
      },
      portDefs: [
        {
          port1: {
            name: "elb-assoc",
            type: constant.RESTYPE.ELB
          },
          port2: {
            name: "subnet-assoc-in",
            type: constant.RESTYPE.SUBNET
          }
        }
      ],
      initialize: function() {
        var az, cn, newSubnet, _i, _len, _ref;
        newSubnet = this.getTarget(constant.RESTYPE.SUBNET);
        az = newSubnet.parent();
        _ref = this.getTarget(constant.RESTYPE.ELB).connections("ElbSubnetAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cn = _ref[_i];
          if (cn.getTarget(constant.RESTYPE.SUBNET).parent() === az) {
            if (cn.hasAppUpdateRestriction()) {
              this.setDestroyAfterInit();
            } else {
              cn.remove();
            }
          }
        }
        return null;
      },
      hasAppUpdateRestriction: function() {
        var asso, elb, _i, _len, _ref;
        elb = this.getTarget(constant.RESTYPE.ELB);
        if (this.design().modeIsAppEdit() && this.get("deserialized")) {
          _ref = elb.connections("ElbSubnetAsso");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            asso = _ref[_i];
            if (asso !== this && asso.get("deserialized")) {
              return false;
            }
          }
          return true;
        }
        return false;
      },
      isRemovable: function() {
        var az, child, childAZ, connected, elb, sb, subnet, _i, _j, _len, _len1, _ref, _ref1;
        if (this.design().modeIsAppEdit()) {
          if (this.hasAppUpdateRestriction()) {
            return {
              error: lang.CANVAS.ERR_DEL_ELB_LINE_2
            };
          }
        }
        elb = this.getTarget(constant.RESTYPE.ELB);
        subnet = this.getTarget(constant.RESTYPE.SUBNET);
        az = subnet.parent();
        _ref = elb.connectionTargets("ElbAmiAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          childAZ = child.parent();
          while (childAZ) {
            if (childAZ.type === constant.RESTYPE.AZ) {
              break;
            }
            childAZ = childAZ.parent();
          }
          if (!childAZ) {
            continue;
          }
          if (childAZ === az) {
            connected = true;
            break;
          }
        }
        if (!connected) {
          return true;
        }
        _ref1 = elb.connectionTargets("ElbSubnetAsso");
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          sb = _ref1[_j];
          if (sb !== subnet && sb.parent() === az) {
            connected = false;
            break;
          }
        }
        if (connected) {
          return {
            error: lang.CANVAS.ERR_DEL_ELB_LINE_2
          };
        }
        return true;
      }
    }, {});
    ElbAmiAsso = ConnectionModel.extend({
      type: "ElbAmiAsso",
      portDefs: [
        {
          port1: {
            name: "elb-sg-out",
            type: constant.RESTYPE.ELB
          },
          port2: {
            name: "instance-sg",
            type: constant.RESTYPE.INSTANCE
          }
        }, {
          port1: {
            name: "elb-sg-out",
            type: constant.RESTYPE.ELB
          },
          port2: {
            name: "launchconfig-sg",
            type: constant.RESTYPE.LC
          }
        }, {
          port1: {
            name: "elb-sg-out",
            type: constant.RESTYPE.ELB
          },
          port2: {
            name: "launchconfig-sg",
            type: "ExpandedAsg"
          }
        }
      ],
      initialize: function(attibutes, option) {
        var ami, connectedSbs, elb, foundSubnet, sb, _i, _len, _ref;
        ami = this.getOtherTarget(constant.RESTYPE.ELB);
        elb = this.getTarget(constant.RESTYPE.ELB);
        if (ami.type === constant.RESTYPE.LC) {
          this.listenTo(ami, "change:expandedList", this.updateLcSubnetAsso);
          this.listenTo(ami, "change:connections", this.updateLcSubnetAssoIfNeeded);
          if (option.createByUser) {
            this.updateLcSubnetAsso();
          }
        } else {
          connectedSbs = elb.connectionTargets("ElbSubnetAsso");
          _ref = ami.parent().parent().children();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sb = _ref[_i];
            if (connectedSbs.indexOf(sb) !== -1) {
              foundSubnet = true;
              break;
            }
          }
          if (!foundSubnet) {
            new ElbSubnetAsso(ami.parent(), elb);
          }
        }
      },
      updateLcSubnetAssoIfNeeded: function(cn) {
        if (cn.type === "LcUsage") {
          return this.updateLcSubnetAsso();
        }
      },
      updateLcSubnetAsso: function() {
        var asg, asgs, az, azMap, azName, azs, e, elb, lc, subnet, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2;
        if (this.design().initializing()) {
          return;
        }
        elb = this.getTarget(constant.RESTYPE.ELB);
        lc = this.getTarget(constant.RESTYPE.LC);
        azs = lc.design().componentsOfType(constant.RESTYPE.AZ);
        azMap = {};
        for (_i = 0, _len = azs.length; _i < _len; _i++) {
          az = azs[_i];
          azName = az.get("name");
          _ref = az.children();
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            subnet = _ref[_j];
            _ref1 = subnet.connectionTargets("ElbSubnetAsso");
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              e = _ref1[_k];
              if (e === elb) {
                azMap[azName] = true;
                break;
              }
            }
            if (azMap[azName]) {
              break;
            }
          }
        }
        _ref2 = lc.connectionTargets("LcUsage");
        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
          asg = _ref2[_l];
          asgs = asg.get("expandedList").slice(0);
          asgs.push(asg);
          for (_m = 0, _len4 = asgs.length; _m < _len4; _m++) {
            asg = asgs[_m];
            azName = asg.parent().parent().get("name");
            if (!azMap[azName]) {
              new ElbSubnetAsso(asg.parent(), elb);
              azMap[azName] = true;
            }
          }
        }
      },
      serialize: function(components) {
        var elb, i, instance, instanceArray, _i, _len, _ref;
        instance = this.getTarget(constant.RESTYPE.INSTANCE);
        if (!instance) {
          return;
        }
        elb = this.getTarget(constant.RESTYPE.ELB);
        instanceArray = components[elb.id].resource.Instances;
        _ref = instance.getRealGroupMemberIds();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          instanceArray.push({
            InstanceId: this.createRef("InstanceId", i)
          });
        }
        return null;
      }
    }, {
      isConnectable: function(comp1, comp2) {
        var lc;
        if (comp1.design().modeIsAppEdit()) {
          if (comp1.type === constant.RESTYPE.LC) {
            lc = comp1;
          } else if (comp2.type === constant.RESTYPE.LC) {
            lc = comp2;
          }
          if (lc && lc.get("appId")) {
            return lang.NOTIFY.WARN_ASG_CAN_ONLY_CONNECT_TO_ELB_ON_LAUNCH;
          }
        }
        return true;
      }
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/ElbModel',["Design", "constant", "ResourceModel", "ComplexResModel", "./SgModel", "./SslCertModel", "./connection/SgAsso", "i18n!/nls/lang.js", "CloudResources", "./connection/ElbAsso"], function(Design, constant, ResourceModel, ComplexResModel, SgModel, SslCertModel, SgAsso, lang, CloudResources) {
    var Model;
    Model = ComplexResModel.extend({
      defaults: function() {
        return {
          internal: true,
          crossZone: true,
          healthyThreshold: "9",
          unHealthyThreshold: "4",
          healthCheckTarget: "HTTP:80/index.html",
          healthCheckInterval: "30",
          healthCheckTimeout: "5",
          listeners: [
            {
              port: "80",
              protocol: "HTTP",
              instanceProtocol: "HTTP",
              instancePort: "80",
              sslCertName: null
            }
          ],
          AvailabilityZones: [],
          ConnectionDraining: {
            Enabled: true,
            Timeout: 300
          },
          idleTimeout: 60,
          otherPoliciesMap: {}
        };
      },
      type: constant.RESTYPE.ELB,
      newNameTmpl: "load-balancer-",
      initialize: function(attr, option) {
        var SgAssoModel, sg;
        if (option.createByUser) {
          sg = new SgModel({
            name: this.getElbSgName(),
            isElbSg: true,
            description: lang.IDE.AUTOMATICALLY_CREATED_SG_FOR_LOAD_BALANCER
          });
          this.__elbSg = sg;
          SgAssoModel = Design.modelClassForType("SgAsso");
          new SgAssoModel(this, sg);
        }
        return null;
      },
      isRemovable: function() {
        var elbsg;
        elbsg = this.getElbSg();
        if (elbsg && elbsg.connections("SgAsso").length > 1) {
          return MC.template.ElbRemoveConfirmation({
            name: this.get("name"),
            sg: elbsg.get("name")
          });
        }
        return true;
      },
      remove: function() {
        if (this.getElbSg()) {
          this.getElbSg().remove();
        }
        ComplexResModel.prototype.remove.call(this);
        return null;
      },
      getElbSg: function() {
        if (this.__elbSg) {
          if (this.__elbSg.isRemoved()) {
            this.__elbSg = void 0;
          }
        }
        return this.__elbSg;
      },
      getElbSgName: function() {
        return "elbsg-" + this.get("name");
      },
      setName: function(name) {
        if (this.get("name") === name) {
          return;
        }
        this.set("name", name);
        if (this.getElbSg()) {
          this.getElbSg().set("name", this.getElbSgName());
        }
        return null;
      },
      setListener: function(idx, value) {
        var listeners, _ref;
        console.assert(value.port && value.protocol && value.instanceProtocol && value.instancePort, "Invalid parameter for setListener");
        listeners = this.get("listeners");
        if (idx >= listeners.length) {
          listeners.push(value);
        } else {
          if (!listeners[idx]) {
            listeners[idx] = {};
          }
          listeners[idx] = $.extend(listeners[idx], value);
        }
        if (!((_ref = listeners[idx].protocol) === 'HTTPS' || _ref === 'SSL')) {
          listeners[idx].sslCert = null;
        }
        return null;
      },
      removeListener: function(idx) {
        var listeners;
        listeners = this.get("listeners");
        listeners.splice(idx, 1);
        this.set("listeners", listeners);
        return null;
      },
      setSSLCert: function(idx, sslCertId) {
        var listeners, sslCertCol, sslCertData;
        if (idx >= 0) {
          sslCertCol = CloudResources(constant.RESTYPE.IAM);
          listeners = this.get("listeners");
          sslCertData = sslCertCol.get(sslCertId);
          return listeners[idx].sslCert = SslCertModel.createNew(sslCertData);
        }
      },
      removeSSLCert: function(idx) {
        var listeners;
        listeners = this.get("listeners");
        listeners[idx].sslCert = null;
        return null;
      },
      getSSLCert: function(idx) {
        var listeners;
        listeners = this.get("listeners");
        return listeners[idx].sslCert;
      },
      getHealthCheckTarget: function() {
        var path, port, protocol, splitIndex, target;
        target = this.attributes.healthCheckTarget;
        splitIndex = target.indexOf(":");
        protocol = target.substring(0, splitIndex);
        target = target.substring(splitIndex + 1);
        port = parseInt(target, 10);
        if (isNaN(port)) {
          port = 80;
        }
        path = target.replace(/[^\/]+\//, "");
        return [protocol, port, path];
      },
      setHealthCheckTarget: function(protocol, port, path) {
        var target;
        target = this.getHealthCheckTarget();
        if (protocol) {
          target[0] = protocol;
        }
        if (port !== void 0) {
          target[1] = port;
        }
        if (path !== void 0) {
          target[2] = path;
        }
        this.set("healthCheckTarget", target[0] + ":" + target[1] + "/" + target[2]);
        return null;
      },
      setInternal: function(isInternal) {
        var line, _i, _len, _ref;
        this.set("internal", !!isInternal);
        if (isInternal) {
          SgModel = Design.modelClassForType(constant.RESTYPE.SG);
          SgModel.tryDrawLine(this);
        } else {
          _ref = this.connections("SgRuleLine");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            line.remove(this);
          }
        }
        return null;
      },
      getCost: function(priceMap, currency) {
        var fee, p, _i, _len, _ref;
        if (!priceMap.elb || !priceMap.elb.types) {
          return null;
        }
        _ref = priceMap.elb.types;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          if (p.unit === "perELBHour") {
            fee = parseFloat(p[currency], 10) || 0;
            break;
          }
        }
        if (fee) {
          return {
            resource: this.get("name"),
            type: constant.RESTYPE.ELB,
            fee: fee * 24 * 30,
            formatedFee: fee + "/hr"
          };
        }
      },
      getAvailabilityZones: function() {
        var azs;
        azs = _.map(this.connectionTargets("ElbSubnetAsso"), function(subnet) {
          return subnet.parent().createRef();
        });
        return _.uniq(azs);
      },
      setPolicyProxyProtocol: function(enable, portAry) {
        var otherPoliciesMap;
        otherPoliciesMap = this.get('otherPoliciesMap');
        if (enable) {
          otherPoliciesMap.EnableProxyProtocol = {
            'PolicyName': 'EnableProxyProtocol',
            'PolicyTypeName': 'ProxyProtocolPolicyType',
            'PolicyAttributes': {
              'ProxyProtocol': true
            },
            'InstancePort': portAry
          };
        } else {
          delete otherPoliciesMap.EnableProxyProtocol;
        }
        return this.set('otherPoliciesMap', otherPoliciesMap);
      },
      serialize: function() {
        var component, hcTarget, id, l, listeners, otherPoliciesAry, otherPoliciesMap, sgs, subnets, _i, _len, _ref;
        hcTarget = this.get("healthCheckTarget");
        if (hcTarget.indexOf("TCP") !== -1 || hcTarget.indexOf("SSL") !== -1) {
          hcTarget = hcTarget.split("/")[0];
        }
        listeners = [];
        _ref = this.get("listeners");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          id = "";
          if ((l.protocol === "SSL" || l.protocol === "HTTPS") && l.sslCert) {
            id = l.sslCert.createRef("ServerCertificateMetadata.Arn");
          }
          listeners.push({
            PolicyNames: "",
            Listener: {
              LoadBalancerPort: l.port,
              Protocol: l.protocol,
              InstanceProtocol: l.instanceProtocol,
              InstancePort: l.instancePort,
              SSLCertificateId: id
            }
          });
        }
        sgs = _.map(this.connectionTargets("SgAsso"), function(sg) {
          return sg.createRef("GroupId");
        });
        subnets = _.map(this.connectionTargets("ElbSubnetAsso"), function(sb) {
          return sb.createRef("SubnetId");
        });
        otherPoliciesMap = this.get('otherPoliciesMap');
        otherPoliciesAry = _.map(otherPoliciesMap, function(policyObj) {
          return policyObj;
        });
        if (!otherPoliciesAry) {
          otherPoliciesAry = [];
        }
        component = {
          type: this.type,
          uid: this.id,
          name: this.get("name"),
          description: this.get("description") || "",
          resource: {
            AvailabilityZones: [],
            Subnets: subnets,
            Instances: [],
            CrossZoneLoadBalancing: this.get("crossZone"),
            ConnectionDraining: this.get("ConnectionDraining"),
            VpcId: this.getVpcRef(),
            LoadBalancerName: this.get("elbName") || this.get("name"),
            SecurityGroups: sgs,
            Scheme: this.get("internal") ? "internal" : "internet-facing",
            ListenerDescriptions: listeners,
            HealthCheck: {
              Interval: String(this.get("healthCheckInterval")),
              Target: hcTarget,
              Timeout: String(this.get("healthCheckTimeout")),
              HealthyThreshold: String(this.get("healthyThreshold")),
              UnhealthyThreshold: String(this.get("unHealthyThreshold"))
            },
            DNSName: this.get("dnsName") || "",
            Policies: {
              LBCookieStickinessPolicies: [
                {
                  PolicyName: "",
                  CookieExpirationPeriod: ""
                }
              ],
              AppCookieStickinessPolicies: [
                {
                  PolicyName: "",
                  CookieName: ""
                }
              ],
              OtherPolicies: otherPoliciesAry
            },
            BackendServerDescriptions: [
              {
                InstantPort: "",
                PoliciyNames: ""
              }
            ],
            ConnectionSettings: {
              IdleTimeout: this.get('idleTimeout') || 60
            }
          }
        };
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      handleTypes: constant.RESTYPE.ELB,
      deserialize: function(data, layout_data, resolve) {
        var ElbAmiAsso, ElbSubnetAsso, ami, attr, elb, idx, instance, l, sb, sg, sslCert, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        attr = {
          id: data.uid,
          name: data.name,
          description: data.description || "",
          appId: data.resource.DNSName,
          parent: resolve(layout_data.groupUId),
          internal: data.resource.Scheme === 'internal',
          crossZone: !!data.resource.CrossZoneLoadBalancing,
          ConnectionDraining: data.resource.ConnectionDraining || {
            Enabled: true,
            Timeout: 300
          },
          listeners: [],
          dnsName: data.resource.DNSName,
          elbName: data.resource.LoadBalancerName,
          healthyThreshold: String(data.resource.HealthCheck.HealthyThreshold),
          unHealthyThreshold: String(data.resource.HealthCheck.UnhealthyThreshold),
          healthCheckTarget: data.resource.HealthCheck.Target,
          healthCheckInterval: String(data.resource.HealthCheck.Interval),
          healthCheckTimeout: String(data.resource.HealthCheck.Timeout),
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1],
          idleTimeout: ((_ref = data.resource) != null ? (_ref1 = _ref.ConnectionSettings) != null ? _ref1.IdleTimeout : void 0 : void 0) || 60,
          otherPoliciesMap: {}
        };
        if (data.resource.Policies) {
          if (data.resource.Policies.OtherPolicies) {
            _.each(data.resource.Policies.OtherPolicies, function(policyObj) {
              attr.otherPoliciesMap[policyObj.PolicyName] = policyObj;
              return null;
            });
          }
        }
        attr.AvailabilityZones = _.map(data.resource.AvailabilityZones || [], function(azRef) {
          if (azRef[0] === "@") {
            return resolve(MC.extractID(azRef)).get("name");
          } else {
            return azRef;
          }
        });
        _ref2 = data.resource.ListenerDescriptions || [];
        for (idx = _i = 0, _len = _ref2.length; _i < _len; idx = ++_i) {
          l = _ref2[idx];
          l = l.Listener;
          attr.listeners.push({
            port: l.LoadBalancerPort,
            protocol: l.Protocol,
            instanceProtocol: l.InstanceProtocol,
            instancePort: l.InstancePort
          });
          if (l.SSLCertificateId) {
            sslCert = resolve(MC.extractID(l.SSLCertificateId));
            if (sslCert) {
              attr.listeners[idx].sslCert = sslCert;
            }
          }
        }
        elb = new Model(attr);
        ElbAmiAsso = Design.modelClassForType("ElbAmiAsso");
        ElbSubnetAsso = Design.modelClassForType("ElbSubnetAsso");
        _ref3 = data.resource.SecurityGroups || [];
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          sg = _ref3[_j];
          new SgAsso(elb, resolve(MC.extractID(sg)));
        }
        _ref4 = data.resource.Subnets || [];
        for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
          sb = _ref4[_k];
          new ElbSubnetAsso(elb, resolve(MC.extractID(sb)), {
            deserialized: true
          });
        }
        _ref5 = data.resource.Instances || [];
        for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
          ami = _ref5[_l];
          instance = resolve(MC.extractID(ami.InstanceId));
          if (instance) {
            new ElbAmiAsso(elb, instance);
          }
        }
        return null;
      },
      postDeserialize: function(data, layout_data) {
        var elb, sg, sgName, _i, _len, _ref;
        elb = Design.instance().component(data.uid);
        sgName = elb.getElbSgName();
        _ref = SgModel.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sg = _ref[_i];
          if (sg.get("name") === sgName) {
            elb.__elbSg = sg;
            sg.setAsElbSg();
            return;
          }
        }
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/LcModel',["ComplexResModel", "./InstanceModel", "Design", "constant", "./VolumeModel", 'i18n!/nls/lang.js', 'CloudResources'], function(ComplexResModel, InstanceModel, Design, constant, VolumeModel, lang, CloudResources) {
    var Model, emptyArray;
    emptyArray = [];
    Model = ComplexResModel.extend({
      defaults: function() {
        return {
          imageId: "",
          ebsOptimized: false,
          instanceType: "m1.small",
          monitoring: false,
          userData: "",
          publicIp: false,
          state: null,
          rdSize: 0,
          rdIops: "",
          rdType: 'gp2'
        };
      },
      type: constant.RESTYPE.LC,
      newNameTmpl: "launch-config-",
      initialize: function(attr, option) {
        var SgAsso;
        if (option && option.createByUser) {
          this.initInstanceType();
          Design.modelClassForType(constant.RESTYPE.KP).getDefaultKP().assignTo(this);
          SgAsso = Design.modelClassForType("SgAsso");
          new SgAsso(Design.modelClassForType(constant.RESTYPE.SG).getDefaultSg(), this);
        }
        if (!this.get("rdSize")) {
          this.set("rdSize", this.getAmiRootDeviceVolumeSize());
        }
        return null;
      },
      getNewName: function(base) {
        var id, nameMap, newName, resource_list, rl;
        if (!this.newNameTmpl) {
          newName = this.defaults ? this.defaults.name : void 0;
          return newName || "";
        }
        if (base === void 0) {
          base = this.getAllObjects().length;
        }
        nameMap = {};
        this.design().eachComponent(function(comp) {
          if (comp.get("name")) {
            nameMap[comp.get("name")] = true;
          }
          return null;
        });
        if (Design.instance().modeIsAppEdit()) {
          resource_list = CloudResources(constant.RESTYPE.LC, Design.instance().region()).toJSON();
          for (id in resource_list) {
            rl = resource_list[id];
            if (rl.LaunchConfigurationName) {
              nameMap[_.first(rl.LaunchConfigurationName.split('---'))] = true;
            }
          }
        }
        while (true) {
          newName = this.newNameTmpl + base;
          if (nameMap[newName]) {
            base += 1;
          } else {
            break;
          }
        }
        return newName;
      },
      isRemovable: function() {
        var state;
        if (this.design().modeIsAppEdit() && this.get("appId")) {
          return {
            error: lang.CANVAS.ERR_DEL_LC
          };
        }
        state = this.get("state");
        if (state && state.length > 0) {
          return MC.template.NodeStateRemoveConfirmation({
            name: this.get("name")
          });
        }
        return true;
      },
      isDefaultTenancy: function() {
        return true;
      },
      groupMembers: function() {
        var amis, i, resource, resource_list, _i, _len, _ref, _ref1;
        resource_list = CloudResources(constant.RESTYPE.ASG, Design.instance().region());
        if (!resource_list) {
          return [];
        }
        resource = (_ref = resource_list.get(this.connectionTargets("LcUsage")[0].get("appId"))) != null ? _ref.toJSON() : void 0;
        if (resource && resource.Instances && resource.Instances.length) {
          amis = [];
          _ref1 = resource.Instances;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            i = _ref1[_i];
            amis.push({
              id: i.InstanceId,
              appId: i.InstanceId,
              state: i.HealthStatus
            });
          }
        }
        return amis || [];
      },
      remove: function() {
        var v, _i, _len, _ref;
        _ref = (this.get("volumeList") || emptyArray).slice(0);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          v.remove();
        }
        ComplexResModel.prototype.remove.call(this);
        return null;
      },
      getStateData: InstanceModel.prototype.getStateData,
      setStateData: InstanceModel.prototype.setStateData,
      setKey: InstanceModel.prototype.setKey,
      getKeyName: InstanceModel.prototype.getKeyName,
      isDefaultKey: InstanceModel.prototype.isDefaultKey,
      isNoKey: InstanceModel.prototype.isNoKey,
      setAmi: InstanceModel.prototype.setAmi,
      getAmi: InstanceModel.prototype.getAmi,
      getOSFamily: InstanceModel.prototype.getOSFamily,
      setInstanceType: InstanceModel.prototype.setInstanceType,
      initInstanceType: InstanceModel.prototype.initInstanceType,
      isEbsOptimizedEnabled: InstanceModel.prototype.isEbsOptimizedEnabled,
      getBlockDeviceMapping: InstanceModel.prototype.getBlockDeviceMapping,
      getAmiRootDevice: InstanceModel.prototype.getAmiRootDevice,
      getAmiRootDeviceName: InstanceModel.prototype.getAmiRootDeviceName,
      getAmiRootDeviceVolumeSize: InstanceModel.prototype.getAmiRootDeviceVolumeSize,
      getInstanceType: InstanceModel.prototype.getInstanceType,
      getInstanceTypeConfig: InstanceModel.prototype.getInstanceTypeConfig,
      getInstanceTypeList: InstanceModel.prototype.getInstanceTypeList,
      serialize: function() {
        var ami, blockDevice, component, layout, vd, volume, _i, _len, _ref;
        ami = this.getAmi() || this.get("cachedAmi");
        layout = this.generateLayout();
        if (ami) {
          layout.osType = ami.osType;
          layout.architecture = ami.architecture;
          layout.rootDeviceType = ami.rootDeviceType;
        }
        blockDevice = this.getBlockDeviceMapping();
        _ref = this.get("volumeList") || emptyArray;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          volume = _ref[_i];
          vd = {
            DeviceName: volume.get("name"),
            Ebs: {
              VolumeSize: volume.get("volumeSize"),
              VolumeType: volume.get("volumeType")
            }
          };
          if (volume.get("volumeType") === "io1") {
            vd.Ebs.Iops = volume.get("iops");
          }
          if (volume.get("snapshotId")) {
            vd.Ebs.SnapshotId = volume.get("snapshotId");
          }
          blockDevice.push(vd);
        }
        component = {
          type: this.type,
          uid: this.id,
          name: this.get("name"),
          description: this.get("description") || "",
          state: this.get("state"),
          resource: {
            UserData: this.get("userData"),
            LaunchConfigurationARN: this.get("appId"),
            InstanceMonitoring: this.get("monitoring"),
            ImageId: this.get("imageId"),
            KeyName: this.get("keyName"),
            EbsOptimized: this.isEbsOptimizedEnabled() ? this.get("ebsOptimized") : false,
            BlockDeviceMapping: blockDevice,
            SecurityGroups: _.map(this.connectionTargets("SgAsso"), function(sg) {
              return sg.createRef("GroupId");
            }),
            LaunchConfigurationName: this.get("configName") || this.get("name"),
            InstanceType: this.get("instanceType"),
            AssociatePublicIpAddress: this.get("publicIp")
          }
        };
        return {
          component: component,
          layout: layout
        };
      }
    }, {
      handleTypes: constant.RESTYPE.LC,
      resolveFirst: true,
      preDeserialize: function(data, layout_data) {
        var attr;
        if (!(_.isArray(data.state) && data.state.length)) {
          data.state = null;
        }
        attr = {
          id: data.uid,
          name: data.name,
          description: data.description || "",
          state: data.state,
          appId: data.resource.LaunchConfigurationARN,
          imageId: data.resource.ImageId,
          ebsOptimized: data.resource.EbsOptimized,
          instanceType: data.resource.InstanceType,
          monitoring: data.resource.InstanceMonitoring,
          userData: data.resource.UserData,
          publicIp: data.resource.AssociatePublicIpAddress,
          configName: data.resource.LaunchConfigurationName
        };
        if (layout_data.osType && layout_data.architecture && layout_data.rootDeviceType) {
          attr.cachedAmi = {
            osType: layout_data.osType,
            architecture: layout_data.architecture,
            rootDeviceType: layout_data.rootDeviceType
          };
        }
        new Model(attr);
        return null;
      },
      deserialize: function(data, layout_data, resolve) {
        var KP, SgAsso, model, rd, sg, volume, _attr, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        model = resolve(data.uid);
        rd = model.getAmiRootDevice();
        _ref = data.resource.BlockDeviceMapping || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          volume = _ref[_i];
          if ((rd && volume.DeviceName === rd.DeviceName) || (!rd && ((_ref1 = volume.DeviceName) === '/dev/xvda' || _ref1 === '/dev/sda1'))) {
            model.set("rdSize", volume.Ebs.VolumeSize);
            model.set("rdIops", volume.Ebs.Iops);
            model.set("rdType", volume.Ebs.VolumeType);
          } else {
            _attr = {
              name: volume.DeviceName,
              snapshotId: volume.Ebs.SnapshotId,
              volumeSize: volume.Ebs.VolumeSize,
              volumeType: volume.Ebs.VolumeType,
              iops: volume.Ebs.Iops,
              owner: model
            };
            new VolumeModel(_attr, {
              noNeedGenName: true
            });
          }
        }
        SgAsso = Design.modelClassForType("SgAsso");
        _ref2 = data.resource.SecurityGroups || [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          sg = _ref2[_j];
          new SgAsso(model, resolve(MC.extractID(sg)));
        }
        KP = resolve(MC.extractID(data.resource.KeyName));
        if (KP) {
          KP.assignTo(model);
        } else {
          model.set('keyName', data.resource.KeyName);
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/KeypairModel',["constant", "ComplexResModel", "ConnectionModel"], function(constant, ComplexResModel, ConnectionModel) {
    var KeypairModel, KeypairUsage;
    KeypairUsage = ConnectionModel.extend({
      type: "KeypairUsage",
      oneToMany: constant.RESTYPE.KP,
      serialize: function(components) {
        var groupMembers, kp, member, otherTarget, otherTargetComp, ref, _i, _len;
        kp = this.getTarget(constant.RESTYPE.KP);
        if (kp) {
          otherTarget = this.getOtherTarget(kp);
          otherTargetComp = components[otherTarget.id];
          if (!otherTargetComp) {
            return;
          }
          ref = kp.createRef("KeyName");
          otherTargetComp.resource.KeyName = ref;
          groupMembers = otherTarget.groupMembers ? otherTarget.groupMembers() : [];
          for (_i = 0, _len = groupMembers.length; _i < _len; _i++) {
            member = groupMembers[_i];
            if (components[member.id]) {
              components[member.id].resource.KeyName = ref;
            }
          }
        }
        return null;
      }
    });
    KeypairModel = ComplexResModel.extend({
      type: constant.RESTYPE.KP,
      defaults: {
        fingerprint: "",
        isSet: false
      },
      isVisual: function() {
        return false;
      },
      isDefault: function() {
        return this.get('name') === 'DefaultKP';
      },
      remove: function() {
        var defaultKp, i, _i, _len, _ref;
        defaultKp = KeypairModel.getDefaultKP();
        _ref = this.connectionTargets("KeypairUsage");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          new KeypairUsage(defaultKp, i);
        }
        ComplexResModel.prototype.remove.call(this);
        return null;
      },
      assignTo: function(target) {
        return new KeypairUsage(this, target);
      },
      dissociate: function(target) {
        var conns;
        conns = this.connections();
        return _.each(conns, function(c) {
          if (c.getOtherTarget(constant.RESTYPE.KP) === target) {
            return c.remove();
          }
        });
      },
      isSet: function() {
        return this.get('appId') && this.get('fingerprint');
      },
      getKPList: function() {
        var kp, kps, _i, _len, _ref;
        kps = [];
        _ref = KeypairModel.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          kp = _ref[_i];
          kps.push({
            id: kp.id,
            name: kp.get("name"),
            selected: kp === this,
            using: kp.connections("KeypairUsage").length > 1
          });
        }
        return _.sortBy(kps, function(a, b) {
          if (a.name === "DefaultKP") {
            return -1;
          }
          if (b.name === "DefaultKP") {
            return 1;
          }
          if (a.name > b.name) {
            return 1;
          }
          if (a.name === b.name) {
            return 0;
          }
          if (a.name < b.name) {
            return -1;
          }
        });
      },
      serialize: function() {
        return {
          component: {
            name: this.get("name"),
            type: this.type,
            uid: this.id,
            resource: {
              KeyFingerprint: this.get("fingerprint") || '',
              KeyName: this.get("appId")
            }
          }
        };
      }
    }, {
      getDefaultKP: function() {
        return _.find(KeypairModel.allObjects(), function(obj) {
          return obj.get("name") === "DefaultKP";
        });
      },
      setDefaultKP: function(keyName, fingerprint) {
        var defaultKP;
        defaultKP = _.find(KeypairModel.allObjects(), function(obj) {
          return obj.get("name") === "DefaultKP";
        });
        defaultKP.set('appId', keyName || '');
        defaultKP.set('fingerprint', fingerprint || '');
        return defaultKP.set('isSet', true);
      },
      handleTypes: constant.RESTYPE.KP,
      deserialize: function(data, layout_data, resolve) {
        new KeypairModel({
          id: data.uid,
          name: data.name,
          appId: data.resource.KeyName,
          fingerprint: data.resource.KeyFingerprint
        });
        return null;
      }
    });
    return KeypairModel;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/Route',["constant", "ConnectionModel"], function(constant, ConnectionModel) {
    var C;
    C = ConnectionModel.extend({
      type: "RTB_Route",
      defaults: function() {
        return {
          routes: []
        };
      },
      initialize: function(attr, option) {
        var igw;
        igw = this.getTarget(constant.RESTYPE.IGW);
        if (igw && !attr.routes) {
          this.get("routes").push("0.0.0.0/0");
        }
        return null;
      },
      addRoute: function(route) {
        var idx, routes;
        routes = this.get("routes");
        idx = _.indexOf(routes, route);
        if (idx !== -1) {
          return false;
        }
        routes.push(route);
        this.set("routes", routes);
        return true;
      },
      removeRoute: function(route) {
        var idx, routes;
        routes = this.get("routes");
        idx = _.indexOf(routes, route);
        if (idx !== -1) {
          return false;
        }
        routes.splice(idx, 1);
        this.set("routes", routes);
        return true;
      },
      setPropagate: function(propagate) {
        console.assert((this.port1Comp().type === constant.RESTYPE.VGW) || (this.port2Comp().type === constant.RESTYPE.VGW), "Propagation can only be set to VPN<==>RTB connection.");
        return this.set("propagate", propagate);
      },
      serialize: function(components) {
        var TYPE, d, otherTarget, r, r_temp, rtb, rtb_data, _i, _len, _ref;
        rtb = this.getTarget(constant.RESTYPE.RT);
        otherTarget = this.getOtherTarget(rtb);
        rtb_data = components[rtb.id];
        if (this.get("propagate")) {
          rtb_data.resource.PropagatingVgwSet.push(otherTarget.createRef("VpnGatewayId"));
        }
        r_temp = {
          Origin: "",
          InstanceId: "",
          NetworkInterfaceId: "",
          GatewayId: ""
        };
        TYPE = constant.RESTYPE;
        switch (otherTarget.type) {
          case TYPE.ENI:
            r_temp.NetworkInterfaceId = otherTarget.createRef("NetworkInterfaceId");
            break;
          case TYPE.IGW:
            r_temp.GatewayId = otherTarget.createRef("InternetGatewayId");
            break;
          case TYPE.VGW:
            r_temp.GatewayId = otherTarget.createRef("VpnGatewayId");
            break;
          case TYPE.INSTANCE:
            r_temp.NetworkInterfaceId = otherTarget.getEmbedEni().createRef("NetworkInterfaceId");
        }
        _ref = this.get("routes");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          d = {
            "DestinationCidrBlock": r
          };
          rtb_data.resource.RouteSet.push($.extend(d, r_temp));
        }
        return null;
      },
      portDefs: [
        {
          port1: {
            name: "igw-tgt",
            type: constant.RESTYPE.IGW
          },
          port2: {
            name: "rtb-tgt",
            type: constant.RESTYPE.RT
          }
        }, {
          port1: {
            name: "instance-rtb",
            type: constant.RESTYPE.INSTANCE
          },
          port2: {
            name: "rtb-tgt",
            type: constant.RESTYPE.RT
          }
        }, {
          port1: {
            name: "eni-rtb",
            type: constant.RESTYPE.ENI
          },
          port2: {
            name: "rtb-tgt",
            type: constant.RESTYPE.RT
          }
        }, {
          port1: {
            name: "vgw-tgt",
            type: constant.RESTYPE.VGW
          },
          port2: {
            name: "rtb-tgt",
            type: constant.RESTYPE.RT
          }
        }
      ]
    }, {
      isConnectable: function(p1Comp, p2Comp) {
        var instance;
        if (p1Comp.type === constant.RESTYPE.INSTANCE) {
          instance = p1Comp;
        } else if (p2Comp.type === constant.RESTYPE.INSTANCE) {
          instance = p2Comp;
        }
        if (instance && instance.get("count") > 1) {
          return false;
        }
        return true;
      }
    });
    return C;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/connection/RtbAsso',["constant", "ConnectionModel"], function(constant, ConnectionModel) {
    var C;
    C = ConnectionModel.extend({
      type: "RTB_Asso",
      oneToMany: constant.RESTYPE.RT,
      defaults: {
        implicit: false
      },
      portDefs: {
        port1: {
          name: "subnet-assoc-out",
          type: constant.RESTYPE.SUBNET
        },
        port2: {
          name: "rtb-src",
          type: constant.RESTYPE.RT
        }
      },
      serialize: function(components) {
        var rtb, rtb_data, sb;
        if (this.get("implicit")) {
          return;
        }
        sb = this.getTarget(constant.RESTYPE.SUBNET);
        rtb = this.getTarget(constant.RESTYPE.RT);
        rtb_data = components[rtb.id];
        rtb_data.resource.AssociationSet.push({
          SubnetId: sb.createRef("SubnetId"),
          RouteTableAssociationId: this.get("assoId") || "",
          Main: false
        });
        return null;
      },
      remove: function() {
        var RtbModel, newRtb, oldRtb, subnet, subnetRtbAsso;
        subnet = this.getTarget(constant.RESTYPE.SUBNET);
        if (!subnet.isRemoved()) {
          subnetRtbAsso = subnet.connections("RTB_Asso");
          if (subnetRtbAsso.length === 0 || (subnetRtbAsso.length === 1 && subnetRtbAsso[0] === this)) {
            oldRtb = this.getTarget(constant.RESTYPE.RT);
            if (oldRtb.get("main")) {
              this.set("implicit", true);
              return;
            }
            ConnectionModel.prototype.remove.apply(this, arguments);
            RtbModel = Design.modelClassForType(constant.RESTYPE.RT);
            newRtb = RtbModel.getMainRouteTable();
            new C(subnet, newRtb, {
              implicit: true
            });
            return;
          }
        }
        ConnectionModel.prototype.remove.apply(this, arguments);
        return null;
      }
    });
    return C;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/RtbModel',["ComplexResModel", "Design", "./connection/Route", "./connection/RtbAsso", "constant", "i18n!/nls/lang.js"], function(ComplexResModel, Design, Route, RtbAsso, constant, lang) {
    var Model;
    Model = ComplexResModel.extend({
      defaults: {
        main: false,
        implicit: false
      },
      type: constant.RESTYPE.RT,
      newNameTmpl: "RT-",
      isRemovable: function() {
        if (this.get("main")) {
          return {
            error: sprintf(lang.CANVAS.ERR_DEL_MAIN_RT, this.get("name"))
          };
        }
        return true;
      },
      setMain: function() {
        var asso, sb, subnets, _i, _len, _results;
        if (this.get("main")) {
          return;
        }
        Model.getMainRouteTable().set("main", false);
        this.set("main", true);
        subnets = Design.modelClassForType(constant.RESTYPE.SUBNET).allObjects();
        _results = [];
        for (_i = 0, _len = subnets.length; _i < _len; _i++) {
          sb = subnets[_i];
          asso = sb.connections("RTB_Asso")[0];
          console.assert(asso, "Subnet should at least associate to one RouteTable");
          if (asso.get("implicit")) {
            _results.push(new RtbAsso(this, sb, {
              implicit: true
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      addRoute: function(targetId, r, propagating) {
        var component, connection;
        component = Design.instance().component(targetId);
        if (!component) {
          return;
        }
        if (component.type === constant.RESTYPE.ENI && component.embedInstance()) {
          component = component.embedInstance();
        }
        connection = new Route(this, component);
        connection.addRoute(r);
        if (propagating !== void 0) {
          connection.setPropagate(propagating);
        }
        return null;
      },
      serialize: function() {
        var component;
        component = {
          name: this.get("name"),
          description: this.get("description") || "",
          type: this.type,
          uid: this.id,
          resource: {
            PropagatingVgwSet: [],
            RouteTableId: this.get("appId"),
            VpcId: this.parent().createRef("VpcId"),
            AssociationSet: [],
            RouteSet: [
              {
                Origin: "CreateRouteTable",
                DestinationCidrBlock: this.parent().get("cidr"),
                InstanceId: "",
                NetworkInterfaceId: "",
                GatewayId: "local"
              }
            ],
            Tags: [
              {
                Key: "visops_default",
                Value: this.get("main") ? "true" : "false"
              }
            ]
          }
        };
        if (this.get("main")) {
          component.resource.AssociationSet.push({
            Main: "true",
            RouteTableAssociationId: "",
            SubnetId: ""
          });
        }
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      getMainRouteTable: function() {
        return _.find(Model.allObjects(), function(obj) {
          return obj.get("main");
        });
      },
      handleTypes: constant.RESTYPE.RT,
      resolveFirst: true,
      preDeserialize: function(data, layout_data) {
        var asso_main, assoc, found, idx, main_rt, rtb, _i, _len, _ref;
        if (data.resource.AssociationSet) {
          found = -1;
          _ref = data.resource.AssociationSet;
          for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
            assoc = _ref[idx];
            if (assoc.Main && found === -1) {
              found = idx;
            }
          }
          if (found > 0) {
            main_rt = data.resource.AssociationSet.splice(found, 1);
            data.resource.AssociationSet.splice(0, 0, main_rt[0]);
          }
          if (data.resource.AssociationSet[0]) {
            asso_main = "" + data.resource.AssociationSet[0].Main === "true";
          }
        }
        rtb = new Model({
          id: data.uid,
          appId: data.resource.RouteTableId,
          name: data.name,
          description: data.description || "",
          main: !!asso_main,
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1]
        });
        return null;
      },
      deserialize: function(data, layout_data, resolve) {
        var VpcModel, rtb, vpc;
        rtb = resolve(data.uid);
        vpc = resolve(layout_data.groupUId);
        VpcModel = Design.modelClassForType(constant.RESTYPE.VPC);
        if (!vpc) {
          vpc = VpcModel.theVPC();
        }
        vpc.addChild(rtb);
        return null;
      },
      postDeserialize: function(data, layout_data) {
        var design, i, id, propagateMap, r, ref, routes, rtb, _i, _j, _len, _len1, _ref, _ref1;
        design = Design.instance();
        rtb = design.component(data.uid);
        _ref = data.resource.AssociationSet || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (!r.Main && r.SubnetId) {
            new RtbAsso(rtb, design.component(MC.extractID(r.SubnetId)), {
              implicit: false,
              assoId: r.RouteTableAssociationId
            });
          }
        }
        routes = data.resource.RouteSet;
        if (routes && routes.length > 1) {
          propagateMap = {};
          _ref1 = data.resource.PropagatingVgwSet || [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            ref = _ref1[_j];
            propagateMap[MC.extractID(ref)] = true;
          }
          i = 0;
          while (i < routes.length) {
            r = routes[i];
            if (r.GatewayId !== "local") {
              id = MC.extractID(r.GatewayId || r.InstanceId || r.NetworkInterfaceId);
              rtb.addRoute(id, r.DestinationCidrBlock, propagateMap[id]);
            }
            ++i;
          }
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/model/SubnetModel',["constant", "Design", "GroupModel", "./connection/RtbAsso", "i18n!/nls/lang.js"], function(constant, Design, GroupModel, RtbAsso, lang) {
    var Model;
    Model = GroupModel.extend({
      type: constant.RESTYPE.SUBNET,
      newNameTmpl: "subnet",
      defaults: {
        cidr: ""
      },
      initialize: function(attributes, option) {
        var Acl, AclAsso, RtbModel, defaultAcl;
        if (!this.attributes.cidr) {
          this.attributes.cidr = this.generateCidr();
        }
        RtbModel = Design.modelClassForType(constant.RESTYPE.RT);
        new RtbAsso(this, RtbModel.getMainRouteTable(), {
          implicit: true
        });
        Acl = Design.modelClassForType(constant.RESTYPE.ACL);
        defaultAcl = Acl.getDefaultAcl();
        if (defaultAcl) {
          AclAsso = Design.modelClassForType("AclAsso");
          new AclAsso(this, defaultAcl);
        }
        return null;
      },
      setCidr: function(cidr) {
        var validCIDR;
        validCIDR = MC.getValidCIDR(cidr);
        this.set("cidr", validCIDR);
        return null;
      },
      setAcl: function(uid) {
        var AclAsso;
        AclAsso = Design.modelClassForType("AclAsso");
        new AclAsso(this, Design.instance().component(uid));
        return null;
      },
      isReparentable: function(newParent) {
        var attach, child, _i, _j, _len, _len1, _ref, _ref1;
        _ref = this.children();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.type === constant.RESTYPE.INSTANCE || child.type === constant.RESTYPE.ENI) {
            _ref1 = child.connectionTargets("EniAttachment");
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              attach = _ref1[_j];
              if (attach.parent() !== this) {
                return lang.CANVAS.ERR_MOVE_ATTACHED_ENI;
              }
            }
          }
          if (child.type === constant.RESTYPE.ASG || child.type === "ExpandedAsg") {
            if (child.type === "ExpandedAsg") {
              child = child.get("originalAsg");
            }
            if (child.getExpandAzs().indexOf(newParent) !== -1) {
              return sprintf(lang.CANVAS.ERR_DROP_ASG, child.get("name"), newParent.get("name"));
            }
          }
        }
        return true;
      },
      isRemovable: function() {
        var SBGAsso, ami, az, childAZ, cn, _i, _j, _len, _len1, _ref, _ref1;
        az = this.parent();
        SBGAsso = this.connectionTargets("SubnetgAsso");
        if (SBGAsso.length > 0) {
          return {
            error: sprintf(lang.IDE.RDS_MSG_ERR_REMOVE_SUBNET_FAILED_CAUSEDBY_USEDBY_SBG, this.get("name"), SBGAsso[0].get("name"))
          };
        }
        _ref = this.connections("ElbSubnetAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cn = _ref[_i];
          if (cn.isRemovable() !== true) {
            if (!this.design().modeIsStack()) {
              return {
                error: lang.CANVAS.ERR_DEL_LINKED_ELB
              };
            }
            _ref1 = cn.getOtherTarget(this).connectionTargets("ElbAmiAsso");
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              ami = _ref1[_j];
              if (ami.parent() === this || ami.parent().parent() === this) {
                continue;
              }
              childAZ = ami.parent();
              while (childAZ) {
                if (childAZ === az) {
                  return {
                    error: lang.CANVAS.ERR_DEL_LINKED_ELB
                  };
                }
                childAZ = childAZ.parent();
              }
            }
          }
        }
        return true;
      },
      onParentChanged: function() {
        var elbAsso, sb, _i, _len, _ref;
        elbAsso = this.connections("ElbSubnetAsso")[0];
        if (!elbAsso) {
          return;
        }
        _ref = elbAsso.getTarget(constant.RESTYPE.ELB).connectionTargets("ElbSubnetAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sb = _ref[_i];
          if (sb.parent() === this.parent()) {
            elbAsso.remove();
            return;
          }
        }
        return null;
      },
      isValidCidr: function(cidr) {
        if (!Model.isInVPCCIDR(this.parent().parent().get("cidr"), cidr)) {
          return {
            error: "" + cidr + " conflicts with VPC CIDR.",
            detail: "Subnet CIDR block should be a subset of VPC's."
          };
        }
        if (this.isCidrConfilctWithSubnets(cidr)) {
          return {
            error: "" + cidr + " conflicts with other subnet.",
            detail: "Please choose a CIDR block not conflicting with existing subnet."
          };
        }
        if (this.getAvailableIPCountInSubnet(cidr) <= 0) {
          return {
            error: "" + cidr + " has not enough IP for the ENIs in this subnet."
          };
        }
        return true;
      },
      isCidrConfilctWithSubnets: function(cidr) {
        var conflict, sb, _i, _len, _ref;
        cidr = cidr || this.get("cidr");
        _ref = Model.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sb = _ref[_i];
          if (sb !== this) {
            conflict = Model.isCidrConflict(sb.get("cidr"), cidr);
            if (conflict) {
              return true;
            }
          }
        }
        return false;
      },
      getAvailableIPCountInSubnet: function(cidr) {
        var child, eni, ipCount, maxIpCount, _i, _len, _ref;
        cidr = cidr || this.get("cidr");
        ipCount = 0;
        _ref = this.children();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.type === constant.RESTYPE.INSTANCE) {
            eni = child.getEmbedEni();
          } else if (child.type === constant.RESTYPE.ENI) {
            eni = child;
          } else {
            continue;
          }
          ipCount += eni.get("ips").length * eni.serverGroupCount();
        }
        maxIpCount = Design.modelClassForType(constant.RESTYPE.ENI).getAvailableIPCountInCIDR(cidr);
        return maxIpCount - ipCount;
      },
      generateCidr: function() {
        var comp, currentSubnetNum, currentVPCCIDR, maxSubnetNum, resultSubnetNum, subnetCIDR, subnetCIDRAry, subnetCIDRIPAry, subnetCIDRIPStr, subnetCIDRSuffix, vpcCIDRAry, vpcCIDRIPStr, vpcCIDRIPStrAry, vpcCIDRSuffix, _i, _len, _ref;
        currentVPCCIDR = this.parent().parent().get("cidr");
        vpcCIDRAry = currentVPCCIDR.split('/');
        vpcCIDRIPStr = vpcCIDRAry[0];
        vpcCIDRIPStrAry = vpcCIDRIPStr.split('.');
        vpcCIDRSuffix = Number(vpcCIDRAry[1]);
        if (vpcCIDRSuffix !== 16) {
          return "";
        }
        maxSubnetNum = -1;
        _ref = Model.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          comp = _ref[_i];
          subnetCIDR = comp.get("cidr");
          subnetCIDRAry = subnetCIDR.split('/');
          subnetCIDRIPStr = subnetCIDRAry[0];
          subnetCIDRSuffix = Number(subnetCIDRAry[1]);
          subnetCIDRIPAry = subnetCIDRIPStr.split('.');
          currentSubnetNum = Number(subnetCIDRIPAry[2]);
          if (maxSubnetNum < currentSubnetNum) {
            maxSubnetNum = currentSubnetNum;
          }
        }
        resultSubnetNum = maxSubnetNum + 1;
        if (resultSubnetNum > 255) {
          return "";
        }
        vpcCIDRIPStrAry[2] = String(resultSubnetNum);
        return vpcCIDRIPStrAry.join('.') + '/24';
      },
      serialize: function() {
        var component;
        component = {
          name: this.get("name"),
          description: this.get("description") || "",
          type: this.type,
          uid: this.id,
          resource: {
            AvailabilityZone: this.parent().createRef(),
            VpcId: this.parent().parent().createRef("VpcId"),
            SubnetId: this.get("appId"),
            CidrBlock: this.get("cidr")
          }
        };
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      handleTypes: constant.RESTYPE.SUBNET,
      genCIDRPrefixSuffix: function(subnetCIDR) {
        var cutAry, ipAddr, ipAddrAry, resultPrefix, resultSuffix, suffix;
        cutAry = subnetCIDR.split('/');
        ipAddr = cutAry[0];
        suffix = Number(cutAry[1]);
        ipAddrAry = ipAddr.split('.');
        resultPrefix = '';
        resultSuffix = '';
        if (suffix > 23) {
          resultPrefix = ipAddrAry[0] + '.' + ipAddrAry[1] + '.' + ipAddrAry[2] + '.';
          resultSuffix = 'x';
        } else {
          resultPrefix = ipAddrAry[0] + '.' + ipAddrAry[1] + '.';
          resultSuffix = 'x.x';
        }
        return [resultPrefix, resultSuffix];
      },
      isIPInSubnet: function(ipAddr, subnetCIDR, reservedRange) {
        var filterAry, ipAddrBinStr, ipAddrBinStrDiv, ipAddrBinStrDivAnti, isValid, readyAssignAry, readyAssignAryLength, result, subnetAddrAry, subnetIPAry, subnetIPBinStr, subnetIPBinStrDiv, subnetSuffix, suffixLength, suffixOneStr, suffixOneStrNum, suffixZeroAry, suffixZeroStr, suffixZeroStrNum, _i, _j, _ref, _ref1, _results, _results1;
        if (!reservedRange) {
          reservedRange = [0, 1, 2, 3];
        }
        isValid = true;
        subnetIPAry = subnetCIDR.split('/');
        subnetSuffix = Number(subnetIPAry[1]);
        subnetAddrAry = subnetIPAry[0].split('.');
        subnetIPBinStr = MC.getCidrBinStr(subnetIPAry[0]);
        subnetIPBinStrDiv = subnetIPBinStr.slice(0, subnetSuffix);
        ipAddrBinStr = MC.getCidrBinStr(ipAddr);
        ipAddrBinStrDiv = ipAddrBinStr.slice(0, subnetSuffix);
        ipAddrBinStrDivAnti = ipAddrBinStr.slice(subnetSuffix);
        suffixLength = 32 - subnetSuffix;
        suffixZeroAry = _.map((function() {
          _results = [];
          for (var _i = 1, _ref = suffixLength + 1; 1 <= _ref ? _i < _ref : _i > _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this), function() {
          return '0';
        });
        suffixZeroStr = suffixZeroAry.join('');
        suffixOneStr = suffixZeroStr.replace(/0/g, '1');
        suffixZeroStrNum = parseInt(suffixZeroStr, 2);
        suffixOneStrNum = parseInt(suffixOneStr, 2);
        readyAssignAry = (function() {
          _results1 = [];
          for (var _j = suffixZeroStrNum, _ref1 = suffixOneStrNum + 1; suffixZeroStrNum <= _ref1 ? _j < _ref1 : _j > _ref1; suffixZeroStrNum <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this);
        readyAssignAryLength = readyAssignAry.length;
        result = false;
        filterAry = [];
        _.each(readyAssignAry, function(value, idx) {
          var filterRange, newIPBinStr;
          newIPBinStr = MC.leftPadString(value.toString(2), suffixLength, "0");
          filterRange = reservedRange.concat([readyAssignAryLength - 1]);
          if (__indexOf.call(filterRange, idx) >= 0) {
            filterAry.push(newIPBinStr);
          }
          return null;
        });
        if (__indexOf.call(filterAry, ipAddrBinStrDivAnti) >= 0) {
          return {
            isValid: false,
            isReserved: true
          };
        }
        isValid = subnetIPBinStrDiv === ipAddrBinStrDiv;
        return {
          isValid: isValid,
          isReserved: false
        };
      },
      isCidrConflict: function(ipCidr1, ipCidr2) {
        var ipCidr1BinStr, ipCidr1Suffix, ipCidr2BinStr, ipCidr2Suffix, minIpCidrSuffix;
        ipCidr1BinStr = MC.getCidrBinStr(ipCidr1);
        ipCidr2BinStr = MC.getCidrBinStr(ipCidr2);
        ipCidr1Suffix = Number(ipCidr1.split('/')[1]);
        ipCidr2Suffix = Number(ipCidr2.split('/')[1]);
        if (ipCidr1Suffix === 0 && (ipCidr1Suffix === ipCidr2Suffix)) {
          return true;
        }
        minIpCidrSuffix = ipCidr1Suffix;
        if (ipCidr1Suffix > ipCidr2Suffix) {
          minIpCidrSuffix = ipCidr2Suffix;
        }
        if (ipCidr1BinStr.slice(0, minIpCidrSuffix) === ipCidr2BinStr.slice(0, minIpCidrSuffix) && minIpCidrSuffix !== 0) {
          return true;
        } else {
          return false;
        }
      },
      isInVPCCIDR: function(vpcCIDR, subnetCIDR) {
        if (!this.isCidrConflict(vpcCIDR, subnetCIDR)) {
          return false;
        }
        return Number(subnetCIDR.split('/')[1]) >= Number(vpcCIDR.split('/')[1]);
      },
      isValidSubnetCIDR: function(subnetCIDR) {
        var subnetCidrBinStr, subnetCidrSuffix, suffixIPBinStr, suffixNum;
        subnetCidrBinStr = MC.getCidrBinStr(subnetCIDR);
        subnetCidrSuffix = Number(subnetCIDR.split('/')[1]);
        suffixIPBinStr = subnetCidrBinStr.slice(subnetCidrSuffix);
        suffixNum = parseInt(suffixIPBinStr);
        if ((suffixNum === 0) || (suffixIPBinStr === '')) {
          return true;
        }
        return false;
      },
      autoAssignAllCIDR: function(vpcCIDR, subnetCount) {
        var binSeq, i, needBinNum, newIPAry, newIPStr, newSubnetAry, newSubnetBinStr, newSubnetStr, newSubnetSuffix, vpcIPBinLeftStr, vpcIPBinStr, vpcIPSuffix;
        needBinNum = Math.ceil((Math.log(subnetCount)) / (Math.log(2)));
        vpcIPSuffix = Number(vpcCIDR.split('/')[1]);
        vpcIPBinStr = MC.getCidrBinStr(vpcCIDR);
        vpcIPBinLeftStr = vpcIPBinStr.slice(0, vpcIPSuffix);
        newSubnetSuffix = vpcIPSuffix + needBinNum;
        newSubnetAry = [];
        i = 0;
        while (i < subnetCount) {
          binSeq = MC.leftPadString(i.toString(2), needBinNum, "0");
          newSubnetBinStr = MC.rightPadString(vpcIPBinLeftStr + binSeq, 32, "0");
          newIPAry = _.map([0, 8, 16, 24], function(value) {
            return parseInt(newSubnetBinStr.slice(value, value + 8), 2);
          });
          newIPStr = newIPAry.join('.');
          newSubnetStr = newIPStr + '/' + newSubnetSuffix;
          newSubnetAry.push(newSubnetStr);
          ++i;
        }
        return newSubnetAry;
      },
      autoAssignSimpleCIDR: function(newVPCCIDR, oldSubnetAry, oldVPCCIDR) {
        var newSubnetAry, oldVPCCIDRSuffix, vpcCIDRAry, vpcCIDRIPStr, vpcCIDRSuffix, vpcIP1, vpcIP2, vpcIP3, vpcIPAry;
        newSubnetAry = [];
        vpcCIDRAry = newVPCCIDR.split('/');
        vpcCIDRIPStr = vpcCIDRAry[0];
        vpcCIDRSuffix = Number(vpcCIDRAry[1]);
        vpcIPAry = vpcCIDRIPStr.split('.');
        oldVPCCIDRSuffix = Number(oldVPCCIDR.split('/')[1]);
        if (vpcCIDRSuffix === 16 || (vpcCIDRSuffix === 24 && oldVPCCIDRSuffix === vpcCIDRSuffix)) {
          vpcIP1 = vpcIPAry[0];
          vpcIP2 = vpcIPAry[1];
          vpcIP3 = vpcIPAry[2];
          _.each(oldSubnetAry, function(subnetCIDR) {
            var newSubnetCIDR, subnetCIDRAry, subnetCIDRIPStr, subnetCIDRSuffix, subnetIPAry;
            subnetCIDRAry = subnetCIDR.split('/');
            subnetCIDRIPStr = subnetCIDRAry[0];
            subnetCIDRSuffix = Number(subnetCIDRAry[1]);
            subnetIPAry = subnetCIDRIPStr.split('.');
            subnetIPAry[0] = vpcIP1;
            subnetIPAry[1] = vpcIP2;
            if (vpcCIDRSuffix === 24) {
              subnetIPAry[2] = vpcIP3;
            }
            newSubnetCIDR = subnetIPAry.join('.') + '/' + subnetCIDRSuffix;
            newSubnetAry.push(newSubnetCIDR);
            return null;
          });
        }
        return newSubnetAry;
      },
      deserialize: function(data, layout_data, resolve) {
        new Model({
          id: data.uid,
          name: data.name,
          description: data.description || "",
          appId: data.resource.SubnetId,
          cidr: data.resource.CidrBlock,
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1],
          width: layout_data.size[0],
          height: layout_data.size[1],
          parent: resolve(layout_data.groupUId)
        });
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/DhcpModel',["constant", "ResourceModel", "Design"], function(constant, ResourceModel, Design) {
    var Model;
    Model = ResourceModel.extend({
      type: constant.RESTYPE.DHCP,
      defaults: function() {
        return {
          appId: ""
        };
      },
      isAuto: function() {
        return this.attributes.appId === "";
      },
      isDefault: function() {
        return this.attributes.appId === "default";
      },
      isCustom: function() {
        return !(this.attributes.appId === '' || this.attributes.appId === 'default');
      },
      getDhcp: function() {
        return this.get('appId');
      },
      setAuto: function() {
        return this.set('appId', "");
      },
      setDefault: function() {
        return this.set("appId", "default");
      },
      setDhcp: function(val) {
        if (this.get('appId') !== val) {
          return this.set("appId", val);
        }
      },
      serialize: function() {}
    }, {
      handleTypes: constant.RESTYPE.DHCP,
      deserialize: function(data) {
        var attr;
        attr = {};
        attr.id = data.uid;
        attr.appId = data.resource.DhcpOptionsId;
        new Model(attr);
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/VpcModel',["constant", "GroupModel", "./DhcpModel"], function(constant, GroupModel, DhcpModel) {
    var Model;
    Model = GroupModel.extend({
      type: constant.RESTYPE.VPC,
      defaults: {
        description: "",
        dnsSupport: true,
        dnsHostnames: false,
        tenancy: "default",
        cidr: "10.0.0.0/16"
      },
      initialize: function() {
        if (!this.attributes.dhcp) {
          this.attributes.dhcp = new DhcpModel();
        }
        return null;
      },
      isRemovable: function() {
        return false;
      },
      isDefaultTenancy: function() {
        return this.get("tenancy") !== "dedicated";
      },
      setTenancy: function(tenancy) {
        var instance, _i, _len, _ref;
        this.set("tenancy", tenancy);
        if (tenancy === "dedicated") {
          _ref = Design.modelClassForType(constant.RESTYPE.INSTANCE).allObjects();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            instance = _ref[_i];
            instance.setTenancy(tenancy);
          }
        }
        return null;
      },
      setCidr: function(cidr) {
        var SubnetModel, idx, sb, shouldUpdateSubnetCidr, subnetCidrAry, subnets, validCIDR, _i, _len;
        SubnetModel = Design.modelClassForType(constant.RESTYPE.SUBNET);
        subnets = SubnetModel.allObjects();
        shouldUpdateSubnetCidr = false;
        subnetCidrAry = _.map(subnets, function(sb) {
          var subnetCidr;
          subnetCidr = sb.get("cidr");
          if (!SubnetModel.isInVPCCIDR(cidr, subnetCidr)) {
            shouldUpdateSubnetCidr = true;
          }
          return subnetCidr;
        });
        if (shouldUpdateSubnetCidr) {
          subnetCidrAry = this.generateSubnetCidr(cidr, subnetCidrAry);
          if (!subnetCidrAry) {
            return false;
          }
          for (idx = _i = 0, _len = subnets.length; _i < _len; idx = ++_i) {
            sb = subnets[idx];
            sb.setCidr(subnetCidrAry[idx]);
          }
        }
        validCIDR = MC.getValidCIDR(cidr);
        this.set("cidr", validCIDR);
        return true;
      },
      generateSubnetCidr: function(newCidr, subnetCidrAry) {
        var SubnetModel, subnets;
        SubnetModel = Design.modelClassForType(constant.RESTYPE.SUBNET);
        subnets = SubnetModel.allObjects();
        subnetCidrAry = SubnetModel.autoAssignSimpleCIDR(newCidr, subnetCidrAry, this.get("cidr"));
        if (!subnetCidrAry.length) {
          subnetCidrAry = SubnetModel.autoAssignAllCIDR(newCidr, subnets.length);
        }
        if (subnetCidrAry.length !== subnets.length) {
          return null;
        }
        return subnetCidrAry;
      },
      serialize: function() {
        var component, dhcp, dhcpModel;
        console.assert(this.get("tenancy") === "default" || this.get("tenancy") === "dedicated", "Invalid value for Vpc.attributes.tenancy");
        dhcpModel = this.get("dhcp");
        if (dhcpModel.isAuto()) {
          dhcp = "";
        } else if (dhcpModel.isDefault()) {
          dhcp = "default";
        } else {
          dhcp = dhcpModel.getDhcp();
        }
        component = {
          name: this.get("name"),
          description: this.get("description") || "",
          type: this.type,
          uid: this.id,
          resource: {
            EnableDnsSupport: this.get("dnsSupport"),
            InstanceTenancy: this.get("tenancy"),
            EnableDnsHostnames: this.get("dnsHostnames"),
            DhcpOptionsId: dhcp,
            VpcId: this.get("appId"),
            CidrBlock: this.get("cidr")
          }
        };
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      handleTypes: constant.RESTYPE.VPC,
      resolveFirst: true,
      theVPC: function() {
        return Design.instance().classCacheForCid(this.prototype.classId)[0];
      },
      preDeserialize: function(data, layout_data) {
        new Model({
          id: data.uid,
          name: data.name,
          description: data.description || "",
          appId: data.resource.VpcId,
          cidr: data.resource.CidrBlock,
          dnsHostnames: data.resource.EnableDnsHostnames,
          dnsSupport: data.resource.EnableDnsSupport,
          tenancy: data.resource.InstanceTenancy,
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1],
          width: layout_data.size[0],
          height: layout_data.size[1]
        });
        return null;
      },
      deserialize: function(data, layout, resolve) {
        var dhcp, oldDhcp, vpc;
        vpc = resolve(data.uid);
        dhcp = data.resource.DhcpOptionsId;
        if (dhcp === void 0) {
          vpc.get('dhcp').setAuto();
        } else if (!dhcp) {
          vpc.get("dhcp").setAuto();
        } else if (dhcp === "default") {
          vpc.get("dhcp").setDefault();
        } else if (dhcp[0] === "@") {
          oldDhcp = vpc.get("dhcp");
          if (oldDhcp) {
            oldDhcp.remove();
          }
          vpc.set("dhcp", resolve(MC.extractID(dhcp)));
        } else {
          vpc.get("dhcp").setDhcp(dhcp);
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/IgwModel',["ComplexResModel", "Design", "constant", "i18n!/nls/lang.js"], function(ComplexResModel, Design, constant, lang) {
    var Model;
    Model = ComplexResModel.extend({
      defaults: {
        name: "Internet-gateway"
      },
      type: constant.RESTYPE.IGW,
      isRemovable: function() {
        var ElbModel, EniModel, LcModel, cannotDel;
        ElbModel = Design.modelClassForType(constant.RESTYPE.ELB);
        cannotDel = ElbModel.allObjects().some(function(elb) {
          return !elb.get("internal");
        });
        if (!cannotDel) {
          EniModel = Design.modelClassForType(constant.RESTYPE.ENI);
          cannotDel = EniModel.allObjects().some(function(eni) {
            return eni.hasEip() || eni.get("assoPublicIp");
          });
        }
        if (!cannotDel) {
          LcModel = Design.modelClassForType(constant.RESTYPE.LC);
          cannotDel = LcModel.allObjects().some(function(lc) {
            return lc.get("publicIp");
          });
        }
        if (cannotDel) {
          return {
            error: lang.CANVAS.CVS_CFM_DEL_IGW
          };
        }
        return true;
      },
      serialize: function() {
        var component;
        component = {
          name: this.get("name"),
          type: this.type,
          uid: this.id,
          resource: {
            InternetGatewayId: this.get("appId"),
            AttachmentSet: [
              {
                VpcId: this.parent().createRef("VpcId")
              }
            ]
          }
        };
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      tryCreateIgw: function() {
        var vpc;
        if (Model.allObjects().length > 0) {
          return;
        }
        notification('info', lang.CANVAS.CVS_CFM_ADD_IGW_MSG);
        vpc = Design.modelClassForType(constant.RESTYPE.VPC).theVPC();
        new Model({
          x: -1,
          y: -1,
          parent: vpc
        });
        return null;
      },
      handleTypes: constant.RESTYPE.IGW,
      deserialize: function(data, layout_data, resolve) {
        return new Model({
          id: data.uid,
          name: data.name,
          appId: data.resource.InternetGatewayId,
          parent: resolve(layout_data.groupUId),
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1]
        });
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/VgwModel',["ComplexResModel", "Design", "constant"], function(ComplexResModel, Design, constant) {
    var Model;
    Model = ComplexResModel.extend({
      defaults: {
        name: "VPN-gateway"
      },
      type: constant.RESTYPE.VGW,
      serialize: function() {
        var component;
        component = {
          name: this.get("name"),
          type: this.type,
          uid: this.id,
          resource: {
            Type: "ipsec.1",
            VpnGatewayId: this.get("appId"),
            Attachments: [
              {
                VpcId: this.parent().createRef("VpcId")
              }
            ]
          }
        };
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      handleTypes: constant.RESTYPE.VGW,
      deserialize: function(data, layout_data, resolve) {
        new Model({
          id: data.uid,
          name: data.name,
          appId: data.resource.VpnGatewayId,
          parent: resolve(layout_data.groupUId),
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1]
        });
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/SnsModel',["ResourceModel", "ComplexResModel", "constant", "ConnectionModel"], function(ResourceModel, ComplexResModel, constant, ConnectionModel) {
    var TopicModel, TopicUsage;
    TopicUsage = ConnectionModel.extend({
      type: "TopicUsage",
      oneToMany: constant.RESTYPE.TOPIC
    });
    TopicModel = ComplexResModel.extend({
      type: constant.RESTYPE.TOPIC,
      isVisual: function() {
        return false;
      },
      serialize: function() {
        var useTopic;
        useTopic = !!this.connections().length;
        if (!useTopic) {
          console.debug("Sns Topic is not serialized, because nothing use it and it doesn't have appId.");
          return;
        }
        return {
          component: {
            name: this.get("name"),
            type: this.type,
            uid: this.id,
            resource: {
              TopicArn: this.get("appId")
            }
          }
        };
      },
      assignTo: function(target) {
        if (this.get('appId')) {
          return new TopicUsage(this, target);
        }
      }
    }, {
      handleTypes: constant.RESTYPE.TOPIC,
      resolveFirst: true,
      isTopicNeeded: function() {
        var ScalingPolicyModel, n, sp, useTopic, _i, _j, _len, _len1, _ref, _ref1;
        ScalingPolicyModel = Design.modelClassForType(constant.RESTYPE.SP);
        _ref = ScalingPolicyModel.allObjects();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sp = _ref[_i];
          if (sp.get("sendNotification")) {
            useTopic = true;
            break;
          }
        }
        if (!useTopic) {
          _ref1 = Design.modelClassForType(constant.RESTYPE.NC).allObjects();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            n = _ref1[_j];
            if (n.isUsed()) {
              useTopic = true;
              break;
            }
          }
        }
        return useTopic;
      },
      ensureExistence: function() {
        if (this.allObjects().length === 0) {
          new TopicModel();
        }
        return this.allObjects()[0];
      },
      get: function(appId, name) {
        var topic;
        topic = _.first(_.filter(this.allObjects(), function(m) {
          return m.get('appId') === appId;
        }));
        return topic || new TopicModel({
          appId: appId,
          name: name
        });
      },
      preDeserialize: function(data, layout_data) {
        new TopicModel({
          id: data.uid,
          appId: data.resource.TopicArn,
          name: data.resource.Name || data.name
        });
        return null;
      },
      deserialize: function() {
        return null;
      }
    });

    /*
    
    SubscriptionModel = ResourceModel.extend {
      type : constant.RESTYPE.SUBSCRIPTION
    
      initialize : ()->
        TopicModel.ensureExistence()
        null
    
      serialize : ()->
        topic = TopicModel.ensureExistence()
    
        {
          component :
            name : "SnsSubscription"
            type : @type
            uid  : @id
            resource :
              Endpoint        : @get("endpoint")
              Protocol        : @get("protocol")
              SubscriptionArn : @get("appId")
              TopicArn        : TopicModel.ensureExistence().createRef( "TopicArn" )
        }
    
    }, {
    
      handleTypes : constant.RESTYPE.SUBSCRIPTION
    
      deserialize : ( data, layout_data, resolve ) ->
        new SubscriptionModel({
          id       : data.uid
          appId    : data.resource.SubscriptionArn
          endpoint : data.resource.Endpoint
          protocol : data.resource.Protocol
        })
        null
    }
     */
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/StorageModel',["Design", "ResourceModel"], function(Design, ResourceModel) {
    var Model;
    Model = ResourceModel.extend({
      type: "AWS.Tag",
      serialize: function() {
        return {
          component: $.extend(true, {}, this.get("data"))
        };
      }
    }, {
      handleTypes: ["AWS.EC2.Tag", "AWS.AutoScaling.Tag"],
      deserialize: function(data) {
        new Model({
          id: data.uid,
          data: data
        });
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/ScalingPolicyModel',["ResourceModel", "ComplexResModel", "constant"], function(ResourceModel, ComplexResModel, constant) {
    var Model;
    Model = ComplexResModel.extend({
      type: constant.RESTYPE.SP,
      defaults: function() {
        return {
          cooldown: "",
          minAdjustStep: "",
          adjustment: "-1",
          adjustmentType: "ChangeInCapacity",
          state: "ALARM",
          sendNotification: false,
          alarmData: {
            id: MC.guid(),
            alarmName: "",
            namespace: "AWS/AutoScaling",
            metricName: "CPUUtilization",
            comparisonOperator: ">=",
            evaluationPeriods: "2",
            period: "300",
            statistic: "Average",
            threshold: "10",
            unit: "",
            appId: ""
          }
        };
      },
      isVisual: function() {
        return false;
      },
      constructor: function(attribute, option) {
        var defaults;
        defaults = this.defaults();
        attribute.alarmData = $.extend(defaults.alarmData, attribute.alarmData);
        return ResourceModel.call(this, attribute, option);
      },
      setAlarm: function(alarmData) {
        this.set("alarmData", $.extend({
          id: this.attributes.alarmData.id,
          namespace: "AWS/AutoScaling",
          unit: "",
          appId: this.attributes.alarmData.appId,
          alarmName: this.attributes.alarmData.alarmName
        }, alarmData));
        return null;
      },
      isNotificate: function() {
        return this.get('sendNotification');
      },
      getCost: function(priceMap, currency) {
        var alarmData, asgSize, fee, p, period, _i, _len, _ref;
        alarmData = this.get("alarmData");
        period = parseInt(alarmData.period, 10);
        if (!(period <= 300 && alarmData.namespace === "AWS/AutoScaling")) {
          return null;
        }
        _ref = priceMap.cloudwatch.types;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          if (p.ec2Monitoring) {
            fee = parseFloat(p.ec2Monitoring[currency], 10) || 0;
            break;
          }
        }
        if (fee && this.__asg) {
          asgSize = Design.instance().modeIsStack() ? this.__asg.get("minSize") : this.__asg.get("capacity");
          fee = Math.round(fee / 7 * 1000) / 1000;
          return {
            resource: this.get("name") + "-alarm",
            type: "CloudWatch",
            fee: fee,
            formatedFee: fee + "/mo"
          };
        }
        return null;
      },
      setTopic: function(appId, name) {
        var TopicModel;
        TopicModel = Design.modelClassForType(constant.RESTYPE.TOPIC);
        return TopicModel.get(appId, name).assignTo(this);
      },
      removeTopic: function() {
        var _ref;
        return (_ref = this.connections('TopicUsage')[0]) != null ? _ref.remove() : void 0;
      },
      getTopic: function() {
        return this.connectionTargets('TopicUsage')[0];
      },
      getTopicName: function() {
        var _ref;
        return (_ref = this.getTopic()) != null ? _ref.get('name') : void 0;
      },
      serialize: function() {
        var act_alarm, act_insuffi, act_ok, action_arry, alarm, alarmData, policy, topic;
        if (!this.__asg) {
          console.warn("ScalingPolicy has no attached asg when serializing.");
          return;
        }
        policy = {
          name: this.get("name"),
          type: this.type,
          uid: this.id,
          resource: {
            ScalingAdjustment: this.get("adjustment"),
            PolicyName: this.get("name"),
            PolicyARN: this.get("appId"),
            Cooldown: this.get("cooldown"),
            AutoScalingGroupName: this.__asg.createRef("AutoScalingGroupName"),
            AdjustmentType: this.get("adjustmentType"),
            MinAdjustmentStep: this.get("adjustmentType") === 'PercentChangeInCapacity' ? this.get("minAdjustStep") : ''
          }
        };
        alarmData = this.get("alarmData");
        act_alarm = act_insuffi = act_ok = [];
        action_arry = [this.createRef("PolicyARN")];
        if (this.get("sendNotification")) {
          topic = this.getTopic();
          if (topic) {
            action_arry.push(topic.createRef("TopicArn"));
          }
        }
        if (this.get("state") === "ALARM") {
          act_alarm = action_arry;
        } else if (this.get("state") === "INSUFFICIANT_DATA") {
          act_insuffi = action_arry;
        } else {
          act_ok = action_arry;
        }
        alarm = {
          name: this.get("name") + "-alarm",
          type: constant.RESTYPE.CW,
          uid: alarmData.id,
          resource: {
            AlarmArn: alarmData.appId,
            AlarmName: alarmData.alarmName || (this.get("name") + "-alarm"),
            ComparisonOperator: alarmData.comparisonOperator,
            EvaluationPeriods: alarmData.evaluationPeriods,
            MetricName: alarmData.metricName,
            Namespace: alarmData.namespace,
            Period: Math.round(alarmData.period / 60) * 60,
            Statistic: alarmData.statistic,
            Threshold: alarmData.threshold,
            Unit: alarmData.unit,
            Dimensions: [
              {
                name: "AutoScalingGroupName",
                value: this.__asg.createRef("AutoScalingGroupName")
              }
            ],
            AlarmActions: act_alarm,
            InsufficientDataActions: act_insuffi,
            OKAction: act_ok
          }
        };
        return [
          {
            component: policy
          }, {
            component: alarm
          }
        ];
      }
    }, {
      handleTypes: [constant.RESTYPE.SP, constant.RESTYPE.CW],
      deserialize: function(data, layout_data, resolve) {
        var alarmData, asg, i, policy, refArray, sendNotification, state, topic, _i, _len;
        if (data.type === constant.RESTYPE.CW) {
          alarmData = {
            id: data.uid,
            name: data.name,
            alarmName: data.resource.AlarmName,
            appId: data.resource.AlarmArn,
            comparisonOperator: data.resource.ComparisonOperator,
            evaluationPeriods: data.resource.EvaluationPeriods,
            metricName: data.resource.MetricName,
            period: data.resource.Period,
            statistic: data.resource.Statistic,
            threshold: data.resource.Threshold,
            namespace: data.resource.Namespace,
            unit: data.resource.Unit
          };
          refArray = [];
          if (data.resource.AlarmActions.length) {
            state = "ALARM";
            refArray.push(data.resource.AlarmActions[0]);
            refArray.push(data.resource.AlarmActions[1]);
          }
          if (data.resource.OKAction.length) {
            state = "OK";
            refArray.push(data.resource.OKAction[0]);
            refArray.push(data.resource.OKAction[1]);
          }
          if (data.resource.InsufficientDataActions && data.resource.InsufficientDataActions.length) {
            state = "INSUFFICIANT_DATA";
            refArray.push(data.resource.InsufficientDataActions[0]);
            refArray.push(data.resource.InsufficientDataActions[1]);
          }
          sendNotification = false;
          for (_i = 0, _len = refArray.length; _i < _len; _i++) {
            i = refArray[_i];
            if (!i) {
              continue;
            }
            if (i.indexOf("PolicyARN") !== -1) {
              policy = resolve(MC.extractID(i)) || new Backbone.Model();
            } else if (i.indexOf("TopicArn") !== -1) {
              topic = resolve(MC.extractID(i));
              sendNotification = true;
            }
          }
          if (topic != null) {
            topic.assignTo(policy);
          }
          if (policy) {
            policy.set({
              "alarmData": alarmData,
              "sendNotification": sendNotification,
              "state": state
            });
          }
        } else {
          policy = new Model({
            id: data.uid,
            name: data.resource.PolicyName || data.name,
            appId: data.resource.PolicyARN,
            cooldown: data.resource.Cooldown,
            minAdjustStep: data.resource.MinAdjustmentStep,
            adjustment: data.resource.ScalingAdjustment,
            adjustmentType: data.resource.AdjustmentType
          });
          asg = resolve(MC.extractID(data.resource.AutoScalingGroupName));
          if (asg) {
            asg.addScalingPolicy(policy);
          }
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/DBSbgModel',["constant", "GroupModel", "ConnectionModel"], function(constant, GroupModel, ConnectionModel) {
    var Model, SbAsso;
    SbAsso = ConnectionModel.extend({
      type: "SubnetgAsso"
    });
    Model = GroupModel.extend({
      type: constant.RESTYPE.DBSBG,
      newNameTmpl: "subnetgroup",
      defaults: {
        x: 2,
        y: 2,
        width: 17,
        height: 17,
        createdBy: ""
      },
      constructor: function(attr, option) {
        var az, design, minAZCount, subnet, _i, _len, _ref, _ref1;
        if (option && option.createByUser) {
          design = Design.instance();
          az = {};
          _ref = design.componentsOfType(constant.RESTYPE.SUBNET);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            subnet = _ref[_i];
            az[subnet.parent().get("name")] = true;
          }
          if ((_ref1 = Design.instance().region()) === 'cn-north-1') {
            minAZCount = 1;
          } else {
            minAZCount = 2;
          }
          if (_.keys(az).length < minAZCount) {
            return this;
          }
        }
        return GroupModel.apply(this, arguments);
      },
      initialize: function(attributes, option) {
        if (!this.get('description')) {
          this.set('description', "" + (this.get('name')) + " default description");
        }
        return null;
      },
      serialize: function() {
        var component, sbArray;
        sbArray = _.map(this.connectionTargets("SubnetgAsso"), function(sb) {
          return sb.createRef("SubnetId");
        });
        component = {
          name: this.get("name"),
          type: this.type,
          uid: this.id,
          resource: {
            CreatedBy: this.get('createdBy'),
            DBSubnetGroupName: this.get('appId'),
            SubnetIds: sbArray,
            DBSubnetGroupDescription: this.get('description')
          }
        };
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      handleTypes: constant.RESTYPE.DBSBG,
      deserialize: function(data, layout_data, resolve) {
        var model, sb, _i, _len, _ref;
        model = new Model({
          id: data.uid,
          name: data.name || data.resource.DBSubnetGroupName,
          appId: data.resource.DBSubnetGroupName,
          createdBy: data.resource.CreatedBy,
          description: data.resource.DBSubnetGroupDescription,
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1],
          width: layout_data.size[0],
          height: layout_data.size[1],
          parent: resolve(layout_data.groupUId)
        });
        _ref = data.resource.SubnetIds || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sb = _ref[_i];
          new SbAsso(model, resolve(MC.extractID(sb)));
        }
        return null;
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/DBOgModel',["ComplexResModel", "Design", "constant", 'i18n!/nls/lang.js'], function(ComplexResModel, Design, constant, lang) {
    var Model;
    Model = ComplexResModel.extend({
      newNameTmpl: "-og-",
      type: constant.RESTYPE.DBOG,
      isDefault: function() {
        return !!this.get('default');
      },
      isVisual: function() {
        return false;
      },
      initialize: function(attributes, option) {
        var prefix, self;
        if (this.isDefault()) {
          return;
        }
        if (!this.get('description')) {
          prefix = this.engineType() + this.get('engineVersion').replace(/\./g, '-');
          this.set('name', prefix + this.get('name'));
          this.set('name', prefix + this.getNewName(void 0, this.newNameTmpl));
          self = this;
          this.set('description', sprintf(lang.IDE.CUSTOM_OPTION_GROUP_FOR_ENGINE, self.get('engineName'), self.get('engineVersion')));
        }
        return null;
      },
      defaults: function() {
        return {
          engineName: '',
          engineVersion: '',
          options: [],
          applyImmediately: true
        };
      },
      engineType: function() {
        var engine;
        engine = this.get('engineName');
        switch (false) {
          case engine !== 'mysql':
            return 'mysql';
          case engine !== 'postgresql':
            return 'postgresql';
          case engine !== 'oracle-ee' && engine !== 'oracle-se' && engine !== 'oracle-se1':
            return 'oracle';
          case engine !== 'sqlserver-ee' && engine !== 'sqlserver-ex' && engine !== 'sqlserver-se' && engine !== 'sqlserver-web':
            return 'sqlserver';
        }
      },
      remove: function() {
        _.invoke(this.connectionTargets('OgUsage'), 'setDefaultOptionGroup');
        return ComplexResModel.prototype.remove.apply(this, arguments);
      },
      createRef: function() {
        if (this.isDefault()) {
          return this.get('name');
        } else {
          return ComplexResModel.prototype.createRef.apply(this, arguments);
        }
      },
      serialize: function(options) {
        var component, vpc;
        if (this.isDefault()) {
          return;
        }
        vpc = Design.modelClassForType(constant.RESTYPE.VPC).theVPC();
        component = {
          name: this.get("name"),
          type: this.type,
          uid: this.id,
          resource: {
            CreatedBy: this.get('createdBy') || '',
            EngineName: this.get('engineName'),
            MajorEngineVersion: this.get('engineVersion'),
            OptionGroupDescription: this.get('description'),
            OptionGroupName: this.get('appId') || '',
            Options: this.get('options'),
            ApplyImmediately: this.get('applyImmediately'),
            VpcId: this.getVpcRef()
          }
        };
        return {
          component: component
        };
      }
    }, {
      handleTypes: constant.RESTYPE.DBOG,
      deserialize: function(data, layout_data, resolve) {
        return new Model({
          id: data.uid,
          name: data.name,
          appId: data.resource.OptionGroupName,
          createdBy: data.resource.CreatedBy,
          engineName: data.resource.EngineName,
          engineVersion: data.resource.MajorEngineVersion,
          options: data.resource.Options,
          description: data.resource.OptionGroupDescription,
          applyImmediately: data.resource.ApplyImmediately
        });
      }
    });
    return Model;
  });

}).call(this);

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('workspaces/awseditor/model/DBInstanceModel',['ComplexResModel', 'ConnectionModel', './DBOgModel', 'Design', 'constant', 'i18n!/nls/lang.js', 'CloudResources'], function(ComplexResModel, ConnectionModel, DBOgModel, Design, constant, lang, CloudResources) {
    var Model, OgUsage;
    OgUsage = ConnectionModel.extend({
      type: "OgUsage",
      oneToMany: constant.RESTYPE.DBOG
    });
    Model = ComplexResModel.extend({
      defaults: {
        newInstanceId: '',
        instanceId: '',
        snapshotId: '',
        createdBy: "",
        accessible: false,
        username: 'root',
        password: '12345678',
        multiAz: true,
        iops: 0,
        autoMinorVersionUpgrade: true,
        allowMajorVersionUpgrade: '',
        backupRetentionPeriod: 1,
        allocatedStorage: 10,
        backupWindow: '',
        maintenanceWindow: '',
        characterSetName: '',
        dbName: '',
        port: '',
        pending: '',
        az: '',
        ogName: '',
        pgName: '',
        applyImmediately: false,
        dbRestoreTime: '',
        isRestored: false,
        storageType: "standard"
      },
      type: constant.RESTYPE.DBINSTANCE,
      newNameTmpl: "db",
      __cachedSpecifications: null,
      source: function() {
        return CloudResources(constant.RESTYPE.DBSNAP, this.design().region()).get(this.get('snapshotId'));
      },
      slaveIndependentAttr: "id|appId|x|y|width|height|name|accessible|createdBy|instanceId|instanceClass|autoMinorVersionUpgrade|accessible|backupRetentionPeriod|multiAz|password|__connections|__parent",
      sourceDbIndependentAttrForRestore: "id|appId|x|y|width|height|name|accessible|createdBy|instanceId|instanceClass|autoMinorVersionUpgrade|multiAz|__connections|__parent|license|iops|port|ogName|pgName|az",
      slaves: function() {
        var that;
        that = this;
        if (this.master() && this.master().master()) {
          return [];
        }
        return _.filter(this.connectionTargets("DbReplication"), function(dbModel) {
          if (dbModel.category() === 'instance' && dbModel.get('appId')) {
            return false;
          }
          if (that.category() === 'replica' && !that.get('appId')) {
            return false;
          }
          return true;
        });
      },
      getAllRestoreDB: function() {
        var dbModels, srcDb, that;
        srcDb = this.getSourceDBForRestore();
        if (srcDb) {
          return [];
        }
        that = this;
        dbModels = Design.modelClassForType(constant.RESTYPE.DBINSTANCE).allObjects();
        return _.filter(dbModels, function(dbModel) {
          if (dbModel.getSourceDBForRestore() === that) {
            return true;
          }
          return false;
        });
      },
      master: function() {
        var m;
        m = this.connections('DbReplication')[0];
        if (m && m.master() !== this) {
          return m.master();
        }
        return null;
      },
      copyMaster: function(master) {
        this.clone(master);
        if (!this.get('appId')) {
          return this.set({
            backupRetentionPeriod: 0,
            multiAz: false,
            instanceId: '',
            snapshotId: '',
            password: '****'
          });
        }
      },
      setMaster: function(master) {
        var Replication;
        this.unsetMaster();
        Replication = Design.modelClassForType("DbReplication");
        new Replication(master, this);
        this.listenTo(master, 'change', this.syncMasterAttr);
        return null;
      },
      unsetMaster: function() {
        var that;
        that = this;
        return _.each(this.connections("DbReplication"), function(connection) {
          if (connection.slave() === that) {
            return connection.remove();
          }
        });
      },
      setSourceDBForRestore: function(sourceDb) {
        var SgAsso, defaultSg;
        this.sourceDBForRestore = sourceDb;
        this.setDefaultParameterGroup();
        defaultSg = Design.modelClassForType(constant.RESTYPE.SG).getDefaultSg();
        SgAsso = Design.modelClassForType("SgAsso");
        new SgAsso(defaultSg, this);
        return this.listenTo(sourceDb, 'change', this.syncAttrSourceDBForRestore);
      },
      getSourceDBForRestore: function() {
        return this.sourceDBForRestore;
      },
      syncMasterAttr: function(master) {
        var k, needSync, v, _ref;
        if (this.get('appId')) {
          return false;
        }
        needSync = {};
        _ref = master.changedAttributes();
        for (k in _ref) {
          v = _ref[k];
          if (this.slaveIndependentAttr.indexOf(k) < 0) {
            needSync[k] = v;
          }
        }
        if (needSync['iops']) {
          delete needSync['iops'];
        }
        return this.set(needSync);
      },
      syncAttrSourceDBForRestore: function(sourceDb) {
        var k, needSync, v, _ref;
        needSync = {};
        _ref = sourceDb.changedAttributes();
        for (k in _ref) {
          v = _ref[k];
          if (this.sourceDbIndependentAttrForRestore.indexOf(k) < 0) {
            needSync[k] = v;
          }
        }
        return this.set(needSync);
      },
      needSyncMasterConn: function(cnn) {
        var connTypesToCopy, _ref;
        if (this.master()) {
          return false;
        }
        if (this.get('appId')) {
          connTypesToCopy = [];
        } else {
          connTypesToCopy = ['SgAsso', 'OgUsage'];
        }
        if (_ref = cnn.type, __indexOf.call(connTypesToCopy, _ref) < 0) {
          return false;
        }
        return true;
      },
      connect: function(cnn) {
        var connectionModel, otherTarget, slave, _i, _len, _ref;
        if (!this.needSyncMasterConn(cnn)) {
          return;
        }
        otherTarget = cnn.getOtherTarget(this);
        connectionModel = Design.modelClassForType(cnn.type);
        _ref = this.slaves();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          slave = _ref[_i];
          new connectionModel(slave, otherTarget);
        }
      },
      disconnect: function(cnn) {
        var connectionModel, otherTarget, slave, _i, _len, _ref;
        if (!this.needSyncMasterConn(cnn)) {
          return;
        }
        if (cnn.oneToMany) {
          return;
        }
        otherTarget = cnn.getOtherTarget(this);
        connectionModel = Design.modelClassForType(cnn.type);
        _ref = this.slaves();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          slave = _ref[_i];
          new connectionModel(slave, otherTarget).remove();
        }
      },
      restoreMaster: function(master) {
        this.clone(master);
        this.set("snapshotId", master.get("snapshotId"));
        return null;
      },
      constructor: function(attr, option) {
        var snapshotModel;
        if (option && !option.master && option.createByUser) {
          if (attr.snapshotId) {
            snapshotModel = this.getSnapshotModel(attr.snapshotId);
            _.extend(attr, {
              "engine": snapshotModel.get('Engine'),
              "engineVersion": snapshotModel.get('EngineVersion'),
              "snapshotId": snapshotModel.get('DBSnapshotIdentifier'),
              "allocatedStorage": snapshotModel.get('AllocatedStorage'),
              "port": snapshotModel.get('Port'),
              "iops": snapshotModel.get('Iops') || 0,
              "multiAz": snapshotModel.get('MultiAZ'),
              "ogName": snapshotModel.get('OptionGroupName'),
              "license": snapshotModel.get('LicenseModel'),
              "az": snapshotModel.get('AvailabilityZone'),
              "username": snapshotModel.get('MasterUsername')
            });
          }
        }
        return ComplexResModel.call(this, attr, option);
      },
      initialize: function(attr, option) {
        var SgAsso, defaultSg;
        option = option || {};
        if (option.cloneSource) {
          this.clone(option.cloneSource);
          return;
        }
        if (option.master) {
          if (!option.isRestore) {
            this.copyMaster(option.master);
            this.setMaster(option.master);
          } else {
            this.cloneForRestore(option.master);
            this.setSourceDBForRestore(option.master);
          }
        } else if (option.createByUser) {
          SgAsso = Design.modelClassForType("SgAsso");
          defaultSg = Design.modelClassForType(constant.RESTYPE.SG).getDefaultSg();
          new SgAsso(defaultSg, this);
          this.set(_.defaults(attr, {
            license: this.getDefaultLicense(),
            engineVersion: this.getDefaultVersion(),
            instanceClass: this.getDefaultInstanceClass(),
            port: this.getDefaultPort(),
            dbName: this.getDefaultDBName(),
            characterSetName: this.getDefaultCharSet(),
            allocatedStorage: this.getDefaultAllocatedStorage(),
            snapshotId: "",
            multiAz: !!attr.multiAz
          }));
          if (attr.iops && Number(attr.iops) > 0) {
            this.set('storageType', 'io1');
          }
          this.setDefaultOptionGroup();
          this.setDefaultParameterGroup();
        }
      },
      clone: function(srcTarget) {
        this.cloneAttributes(srcTarget, {
          reserve: "newInstanceId|instanceId|createdBy",
          copyConnection: ["SgAsso", "OgUsage"]
        });
        this.set('snapshotId', '');
        if (this.get('password') === '****') {
          this.set('password', '12345678');
        }
      },
      cloneForRestore: function(srcTarget) {
        this.cloneAttributes(srcTarget, {
          reserve: "newInstanceId|instanceId|createdBy|pgName",
          copyConnection: ["OgUsage"]
        });
        this.set('snapshotId', '');
        if (this.get('password') === '****') {
          this.set('password', '12345678');
        }
      },
      setDefaultOptionGroup: function(origEngineVersion) {
        var defaultInfo, defaultOG, engineCol, origDefaultInfo, regionName;
        regionName = Design.instance().region();
        engineCol = CloudResources(constant.RESTYPE.DBENGINE, regionName);
        defaultInfo = engineCol.getDefaultByNameVersion(regionName, this.get('engine'), this.get('engineVersion'));
        if (origEngineVersion) {
          origDefaultInfo = engineCol.getDefaultByNameVersion(regionName, this.get('engine'), origEngineVersion);
        }
        if (origDefaultInfo && origDefaultInfo.family && defaultInfo && defaultInfo.family) {
          if (origDefaultInfo.family === defaultInfo.family) {
            return null;
          }
        }
        if (defaultInfo && defaultInfo.defaultOGName) {
          defaultOG = defaultInfo.defaultOGName;
        } else {
          defaultOG = "default:" + this.get('engine') + "-" + this.getMajorVersion().replace(".", "-");
          console.warn("can not get default optiongroup for " + (this.get('engine')) + " " + (this.getMajorVersion()));
        }
        new OgUsage(this, this.getDefaultOgInstance(defaultOG));
        return null;
      },
      getDefaultOgInstance: function(name) {
        return DBOgModel.findWhere({
          name: name,
          "default": true
        }) || new DBOgModel({
          name: name,
          "default": true
        });
      },
      setDefaultParameterGroup: function(origEngineVersion) {
        var defaultInfo, defaultPG, engineCol, regionName;
        regionName = Design.instance().region();
        engineCol = CloudResources(constant.RESTYPE.DBENGINE, regionName);
        defaultInfo = engineCol.getDefaultByNameVersion(regionName, this.get('engine'), this.get('engineVersion'));
        if (defaultInfo && defaultInfo.defaultPGName) {
          defaultPG = defaultInfo.defaultPGName;
        } else {
          defaultPG = "default." + this.get('engine') + this.getMajorVersion();
          console.warn("can not get default parametergroup for " + (this.get('engine')) + " " + (this.getMajorVersion()));
        }
        this.set('pgName', defaultPG || "");
        return defaultPG;
      },
      getAllocatedRange: function() {
        var engine, obj;
        engine = this.get('engine');
        if (this.isMysql()) {
          obj = {
            min: 5,
            max: 3072
          };
        }
        if (this.isPostgresql()) {
          obj = {
            min: 5,
            max: 3072
          };
        }
        if (this.isOracle()) {
          obj = {
            min: 10,
            max: 3072
          };
        }
        if (this.isSqlserver()) {
          engine = this.get('engine');
          if (engine === 'sqlserver-ee' || engine === 'sqlserver-se') {
            obj = {
              min: 200,
              max: 1024
            };
          }
          if (engine === 'sqlserver-ex' || engine === 'sqlserver-web') {
            obj = {
              min: 30,
              max: 1024
            };
          }
        }
        return obj;
      },
      getLicenseObj: function(getDefault) {
        var currentLicense, obj;
        currentLicense = this.get('license');
        if (currentLicense) {
          obj = _.findWhere(this.getSpecifications(), {
            license: currentLicense
          });
        }
        if (!obj && getDefault) {
          obj = this.getSpecifications()[0];
        }
        return obj;
      },
      getVersionObj: function(getDefault) {
        var currentVersion, obj, versions;
        versions = this.getLicenseObj(true).versions;
        currentVersion = this.get('engineVersion');
        if (currentVersion) {
          obj = _.findWhere(versions, {
            version: currentVersion
          });
        }
        if (!obj && getDefault) {
          obj = versions[0];
        }
        return obj;
      },
      getInstanceClassObj: function(getDefault) {
        var consoleDefault, currentClass, instanceClasses, obj;
        instanceClasses = this.getVersionObj(true).instanceClasses;
        currentClass = this.get('instanceClass');
        if (currentClass) {
          obj = _.findWhere(instanceClasses, {
            instanceClass: currentClass
          });
        }
        if (!obj && getDefault) {
          consoleDefault = 'db.t1.micro';
          obj = _.find(instanceClasses, function(i) {
            return i.instanceClass === consoleDefault;
          });
          if (!obj) {
            obj = instanceClasses[0];
          }
        }
        return obj;
      },
      setIops: function(iops) {
        return this.set('iops', iops);
      },
      getIops: function() {
        return this.get('iops');
      },
      getDefaultLicense: function() {
        return this.getLicenseObj(true).license;
      },
      getDefaultVersion: function() {
        return this.getVersionObj(true).version;
      },
      getDefaultInstanceClass: function() {
        return this.getInstanceClassObj(true).instanceClass;
      },
      getMajorVersion: function() {
        var _ref;
        return (_ref = this.get('engineVersion')) != null ? _ref.split('.').slice(0, 2).join('.') : void 0;
      },
      getMinorVersion: function() {
        var _ref;
        return (_ref = this.get('engineVersion')) != null ? _ref.split('.').slice(2).join('.') : void 0;
      },
      getRdsInstances: function() {
        var _ref;
        return (_ref = App.model.getRdsData(this.design().region())) != null ? _ref.instance[this.get('engine')] : void 0;
      },
      getDefaultPort: function() {
        return constant.DB_DEFAULTSETTING[this.get('engine')].port;
      },
      getDefaultDBName: function() {
        return constant.DB_DEFAULTSETTING[this.get('engine')].dbname;
      },
      getDefaultCharSet: function() {
        return constant.DB_DEFAULTSETTING[this.get('engine')].charset;
      },
      getInstanceClassDict: function() {
        return _.find(constant.DB_INSTANCECLASS, (function(_this) {
          return function(claDict) {
            return claDict.instanceClass === _this.get('instanceClass');
          };
        })(this));
      },
      getDefaultAllocatedStorage: function() {
        var defaultStorage;
        defaultStorage = constant.DB_DEFAULTSETTING[this.get('engine')].allocatedStorage;
        return defaultStorage;
      },
      getOptionGroup: function() {
        return this.connectionTargets('OgUsage')[0];
      },
      getOptionGroupName: function() {
        var _ref;
        return (_ref = this.getOptionGroup()) != null ? _ref.get('name') : void 0;
      },
      setOptionGroup: function(name) {
        var ogComp;
        ogComp = DBOgModel.findWhere({
          name: name
        }) || new DBOgModel({
          name: name,
          "default": true
        });
        return new OgUsage(this, ogComp);
      },
      isMysql: function() {
        return this.engineType() === 'mysql';
      },
      isOracle: function() {
        return this.engineType() === 'oracle';
      },
      isSqlserver: function() {
        return this.engineType() === 'sqlserver';
      },
      isPostgresql: function() {
        return this.engineType() === 'postgresql';
      },
      engineType: function() {
        var engine;
        engine = this.get('engine');
        return constant.DB_ENGINTYPE[engine] || engine;
      },
      getSpecifications: function() {
        var az, cla, claDict, classes, i, instanceClassDict, instances, lObj, license, spec, specArr, that, vObj, version, versions, _i, _j, _len, _len1, _ref;
        if (this.__cachedSpecifications) {
          return this.__cachedSpecifications;
        }
        that = this;
        instances = this.getRdsInstances();
        if (!instances) {
          return null;
        }
        spec = {};
        specArr = [];
        for (_i = 0, _len = instances.length; _i < _len; _i++) {
          i = instances[_i];
          if (!spec[i.LicenseModel]) {
            spec[i.LicenseModel] = {};
          }
          if (!spec[i.LicenseModel][i.EngineVersion]) {
            spec[i.LicenseModel][i.EngineVersion] = {};
          }
          spec[i.LicenseModel][i.EngineVersion][i.DBInstanceClass] = {
            multiAZCapable: i.MultiAZCapable,
            availabilityZones: i.AvailabilityZones
          };
        }
        for (license in spec) {
          versions = spec[license];
          lObj = {
            license: license,
            versions: []
          };
          for (version in versions) {
            classes = versions[version];
            vObj = {
              version: version,
              instanceClasses: []
            };
            instanceClassDict = {};
            for (cla in classes) {
              az = classes[cla];
              instanceClassDict[cla] = {
                multiAZCapable: az.multiAZCapable,
                availabilityZones: az.availabilityZones
              };
            }
            _ref = constant.DB_INSTANCECLASS;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              claDict = _ref[_j];
              if (_.has(instanceClassDict, claDict.instanceClass)) {
                vObj.instanceClasses.push(_.extend(instanceClassDict[claDict.instanceClass], claDict));
              }
            }
            lObj.versions.push(vObj);
          }
          lObj.versions.sort(function(a, b) {
            return MC.versionCompare(b.version, a.version);
          });
          specArr.push(lObj);
        }
        this.__cachedSpecifications = specArr;
        return specArr;
      },
      getLVIA: function(spec) {
        var currentClass, currentLicense, currentVersion, engine, instanceClass, license, multiAZCapable, version, _ref, _ref1;
        if (!spec) {
          return [];
        }
        currentLicense = this.get('license');
        currentVersion = this.get('engineVersion');
        currentClass = this.get('instanceClass');
        license = _.first(_.filter(spec, function(s) {
          if (s.license === currentLicense) {
            s.selected = true;
            return true;
          } else {
            delete s.selected;
            return false;
          }
        }));
        version = _.first(_.filter(license.versions, function(v) {
          if (v.version === currentVersion) {
            v.selected = true;
            return true;
          } else {
            delete v.selected;
            return false;
          }
        }));
        if (!version) {
          version = this.getVersionObj(true);
          this.set('engineVersion', version.version);
          if ((_ref = _.findWhere(license.versions, {
            version: version.version
          })) != null) {
            _ref.selected = true;
          }
        }
        instanceClass = _.first(_.filter(version.instanceClasses, function(i) {
          if (i.instanceClass === currentClass) {
            i.selected = true;
            return true;
          } else {
            delete i.selected;
            return false;
          }
        }));
        if (!instanceClass) {
          instanceClass = this.getInstanceClassObj(true);
          this.set('instanceClass', instanceClass.instanceClass);
          if ((_ref1 = _.where(version.instanceClasses, {
            instanceClass: instanceClass.instanceClass
          })) != null) {
            _ref1.selected = true;
          }
        }
        multiAZCapable = instanceClass.multiAZCapable;
        if (!multiAZCapable) {
          this.set('multiAz', '');
        }
        engine = this.get('engine');
        if ((engine === 'sqlserver-ee' || engine === 'sqlserver-se')) {
          multiAZCapable = true;
        }
        return [spec, license.versions, version.instanceClasses, multiAZCapable, instanceClass.availabilityZones];
      },
      getCost: function(priceMap, currency) {
        var dbInstanceType, deploy, engine, err, fee, formatedFee, license, p, priceObj, sufix, unit, _i, _len;
        if (!priceMap.database) {
          return null;
        }
        engine = this.engineType();
        if (engine === 'sqlserver') {
          sufix = this.get('engine').split('-')[1];
        }
        dbInstanceType = this.attributes.instanceClass.split('.');
        deploy = this.attributes.multiAz ? 'multiAZ' : 'standard';
        if (!engine || !deploy) {
          return null;
        }
        unit = priceMap.database.rds.unit;
        try {
          fee = priceMap.database.rds[engine][dbInstanceType[0]][dbInstanceType[1]][dbInstanceType[2]];
          license = null;
          if (this.attributes.license === 'license-included') {
            license = 'li';
          } else if (this.attributes.license === 'bring-your-own-license') {
            license = 'byol';
          }
          if (license === 'li' && engine === 'sqlserver') {
            license = license + '-' + sufix;
          }
          for (_i = 0, _len = fee.length; _i < _len; _i++) {
            p = fee[_i];
            if (p.deploy !== deploy) {
              continue;
            }
            if (license && license !== p.license) {
              continue;
            }
            fee = p[currency];
            break;
          }
          if (!fee || typeof fee !== 'number') {
            return null;
          }
          if (unit === "pricePerHour") {
            formatedFee = fee + "/hr";
            fee *= 24 * 30;
          } else {
            formatedFee = fee + "/mo";
          }
          priceObj = {
            resource: this.attributes.name,
            type: this.attributes.instanceClass,
            fee: fee,
            formatedFee: formatedFee
          };
          return priceObj;
        } catch (_error) {
          err = _error;
        } finally {

        }
      },
      category: function(type) {
        switch (type) {
          case 'instance':
            return !(this.get('snapshotId') || this.master());
          case 'replica':
            return !!this.master();
          case 'snapshot':
            return !!this.get('snapshotId');
        }
        if (this.get('snapshotId')) {
          return 'snapshot';
        }
        if (this.master()) {
          return 'replica';
        } else {
          return 'instance';
        }
      },
      getSnapshotModel: function(snapshotId) {
        return CloudResources(constant.RESTYPE.DBSNAP, Design.instance().region()).findWhere({
          id: snapshotId || this.get('snapshotId')
        });
      },
      autobackup: function(value) {
        if (value !== void 0) {
          this.set('backupRetentionPeriod', value);
          return;
        }
        return this.get('backupRetentionPeriod') || 0;
      },
      getNewName: function() {
        var args;
        args = [].slice.call(arguments, 0);
        args[0] = Model.getInstances().length;
        return ComplexResModel.prototype.getNewName.apply(this, args);
      },
      isRemovable: function() {
        var allRestoreDB, dbNameAry, result;
        if (this.slaves(true).length > 0) {
          if (!this.get("appId")) {
            result = sprintf(lang.CANVAS.CVS_CFM_DEL_NONEXISTENT_DBINSTANCE, this.get("name"));
            result = "<div class='modal-text-major'>" + result + "</div>";
          } else {
            result = sprintf(lang.CANVAS.CVS_CFM_DEL_EXISTENT_DBINSTANCE, this.get("name"));
            result = "<div class='modal-text-major'>" + result + "</div>";
          }
          return result;
        }
        allRestoreDB = this.getAllRestoreDB();
        if (allRestoreDB.length > 0) {
          dbNameAry = [];
          _.each(allRestoreDB, function(dbModel) {
            return dbNameAry.push("<span class='resource-tag'>" + (dbModel.get('name')) + "</span>");
          });
          result = sprintf(lang.CANVAS.CVS_CFM_DEL_RELATED_RESTORE_DBINSTANCE, this.get("name"), dbNameAry.join(', '));
          result = "<div class='modal-text-major'>" + result + "</div>";
          return result;
        }
        return true;
      },
      remove: function() {
        var restore, slave, _i, _j, _len, _len1, _ref, _ref1;
        _ref = this.slaves();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          slave = _ref[_i];
          if (!slave.get("appId")) {
            if (slave !== this) {
              slave.remove();
            }
          }
        }
        _ref1 = this.getAllRestoreDB();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          restore = _ref1[_j];
          restore.remove();
        }
        ComplexResModel.prototype.remove.call(this);
        return null;
      },
      isReparentable: function(newParent) {
        if (this.master() && newParent.get("id") !== this.get("id")) {
          notification("error", "Cannot move read replica to another DBSubnetGroup.");
          return false;
        }
        return true;
      },
      serialize: function() {
        var component, master, restoreTime, useLatestRestorableTime, _ref, _ref1;
        master = this.master();
        useLatestRestorableTime = '';
        if (this.getSourceDBForRestore()) {
          useLatestRestorableTime = this.get('dbRestoreTime') ? false : true;
        }
        restoreTime = '';
        if (this.get('dbRestoreTime')) {
          restoreTime = this.get('dbRestoreTime');
        }
        component = {
          name: this.get("name"),
          description: this.get("description") || "",
          type: this.type,
          uid: this.id,
          resource: {
            CreatedBy: this.get('createdBy'),
            DBInstanceIdentifier: this.get('instanceId'),
            NewDBInstanceIdentifier: this.get('newInstanceId'),
            DBSnapshotIdentifier: this.get('snapshotId'),
            AllocatedStorage: this.get('allocatedStorage'),
            AutoMinorVersionUpgrade: this.get('autoMinorVersionUpgrade'),
            AllowMajorVersionUpgrade: this.get('allowMajorVersionUpgrade'),
            AvailabilityZone: this.get('az'),
            MultiAZ: this.get('multiAz'),
            Iops: this.getIops() || 0,
            BackupRetentionPeriod: this.get('backupRetentionPeriod'),
            CharacterSetName: this.get('characterSetName'),
            DBInstanceClass: this.get('instanceClass'),
            DBName: this.isMysql() && this.get('snapshotId') ? '' : this.get('dbName'),
            Endpoint: {
              Port: this.get('port')
            },
            Engine: this.get('engine'),
            EngineVersion: this.get('engineVersion'),
            LicenseModel: this.get('license'),
            MasterUsername: this.get('username'),
            MasterUserPassword: this.get('password'),
            OptionGroupMembership: {
              OptionGroupName: (_ref = this.connectionTargets('OgUsage')[0]) != null ? _ref.createRef('OptionGroupName' || "") : void 0
            },
            DBParameterGroups: {
              DBParameterGroupName: this.get('pgName')
            },
            ApplyImmediately: this.get('applyImmediately'),
            PendingModifiedValues: this.get('pending'),
            PreferredBackupWindow: this.get('backupWindow'),
            PreferredMaintenanceWindow: this.get('maintenanceWindow'),
            PubliclyAccessible: this.get('accessible'),
            DBSubnetGroup: {
              DBSubnetGroupName: this.parent().createRef('DBSubnetGroupName')
            },
            VpcSecurityGroupIds: _.map(this.connectionTargets("SgAsso"), function(sg) {
              return sg.createRef('GroupId');
            }),
            ReadReplicaSourceDBInstanceIdentifier: (master != null ? master.createRef('DBInstanceIdentifier') : void 0) || '',
            SourceDBInstanceIdentifierForPoint: ((_ref1 = this.getSourceDBForRestore()) != null ? _ref1.createRef('DBInstanceIdentifier') : void 0) || '',
            UseLatestRestorableTime: useLatestRestorableTime,
            RestoreTime: restoreTime,
            StorageType: this.get('storageType')
          }
        };
        return {
          component: component,
          layout: this.generateLayout()
        };
      }
    }, {
      handleTypes: constant.RESTYPE.DBINSTANCE,
      oracleCharset: ["AL32UTF8", "JA16EUC", "JA16EUCTILDE", "JA16SJIS", "JA16SJISTILDE", "KO16MSWIN949", "TH8TISASCII", "VN8MSWIN1258", "ZHS16GBK", "ZHT16HKSCS", "ZHT16MSWIN950", "ZHT32EUC", "BLT8ISO8859P13", "BLT8MSWIN1257", "CL8ISO8859P5", "CL8MSWIN1251", "EE8ISO8859P2", "EL8ISO8859P7", "EL8MSWIN1253", "EE8MSWIN1250", "NE8ISO8859P10", "NEE8ISO8859P4", "WE8ISO8859P15", "WE8MSWIN1252", "AR8ISO8859P6", "AR8MSWIN1256", "IW8ISO8859P8", "IW8MSWIN1255", "TR8MSWIN1254", "WE8ISO8859P9", "US7ASCII", "UTF8", "WE8ISO8859P1"],
      getInstances: function() {
        return this.reject(function(obj) {
          return obj.master() || obj.get('snapshotId');
        });
      },
      getReplicas: function() {
        return this.filter(function(obj) {
          return !!obj.master();
        });
      },
      getSnapShots: function() {
        return this.filter(function(obj) {
          return !!obj.get('snapshotId');
        });
      },
      getDefaultOgInstance: function(name) {
        return DBOgModel.findWhere({
          name: name,
          "default": true
        }) || new DBOgModel({
          name: name,
          "default": true
        });
      },
      deserialize: function(data, layout_data, resolve) {
        var SgAsso, model, ogComp, ogName, ogUid, resource, sg, storageType, that, _i, _len, _ref, _ref1, _ref2, _ref3;
        that = this;
        resource = data.resource;
        storageType = resource.StorageType;
        if (!storageType) {
          if (resource.Iops && Number(resource.Iops) > 0) {
            storageType = 'io1';
          } else {
            storageType = 'standard';
          }
        }
        model = new Model({
          id: data.uid,
          name: data.name,
          description: data.description || "",
          createdBy: resource.CreatedBy,
          appId: resource.DBInstanceIdentifier,
          instanceId: resource.DBInstanceIdentifier,
          newInstanceId: resource.NewDBInstanceIdentifier,
          snapshotId: resource.DBSnapshotIdentifier,
          allocatedStorage: resource.AllocatedStorage,
          autoMinorVersionUpgrade: resource.AutoMinorVersionUpgrade,
          allowMajorVersionUpgrade: resource.AllowMajorVersionUpgrade,
          az: resource.AvailabilityZone,
          multiAz: resource.MultiAZ,
          iops: resource.Iops,
          backupRetentionPeriod: resource.BackupRetentionPeriod,
          characterSetName: resource.CharacterSetName,
          dbName: resource.DBName,
          port: (_ref = resource.Endpoint) != null ? _ref.Port : void 0,
          engine: resource.Engine,
          license: resource.LicenseModel,
          engineVersion: resource.EngineVersion,
          instanceClass: resource.DBInstanceClass,
          username: resource.MasterUsername,
          password: resource.MasterUserPassword,
          pending: resource.PendingModifiedValues,
          backupWindow: resource.PreferredBackupWindow,
          maintenanceWindow: resource.PreferredMaintenanceWindow,
          accessible: resource.PubliclyAccessible,
          pgName: (_ref1 = resource.DBParameterGroups) != null ? _ref1.DBParameterGroupName : void 0,
          applyImmediately: resource.ApplyImmediately,
          storageType: storageType,
          x: layout_data.coordinate[0],
          y: layout_data.coordinate[1],
          parent: resolve(layout_data.groupUId)
        });
        if (data.resource.ReadReplicaSourceDBInstanceIdentifier) {
          model.setMaster(resolve(MC.extractID(data.resource.ReadReplicaSourceDBInstanceIdentifier)));
        }
        SgAsso = Design.modelClassForType("SgAsso");
        _ref2 = data.resource.VpcSecurityGroupIds || [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          sg = _ref2[_i];
          new SgAsso(model, resolve(MC.extractID(sg)));
        }
        ogName = (_ref3 = data.resource.OptionGroupMembership) != null ? _ref3.OptionGroupName : void 0;
        if (ogName) {
          ogUid = MC.extractID(ogName);
          if (ogUid && ogUid !== ogName) {
            ogComp = resolve(ogUid);
          }
          return new OgUsage(model, ogComp || model.getDefaultOgInstance(ogName));
        }
      }
    });
    return Model;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/deserializeVisitor/JsonFixer',["../DesignAws"], function(Design) {
    Design.registerDeserializeVisitor(function(data, layout_data, version) {
      var az, azArr, azMap, checkObj, comp, uid, _i, _len;
      if (version >= "2014-01-25") {
        return;
      }
      azMap = {};
      azArr = [];
      for (uid in layout_data) {
        comp = layout_data[uid];
        if (comp.type === "AWS.EC2.AvailabilityZone") {
          if (comp.groupUId === "Canvas") {
            delete comp.groupUId;
          }
          azArr.push({
            uid: uid,
            type: "AWS.EC2.AvailabilityZone",
            name: comp.name
          });
          azMap[comp.name] = MC.genResRef(uid, 'name');
        } else if (comp.type === "AWS.AutoScaling.Group") {
          if (comp.originalId) {
            data[uid] = {
              type: "ExpandedAsg",
              uid: uid
            };
          }
        }
      }
      checkObj = function(obj) {
        var attr, d, dd, idx, _i, _len;
        for (attr in obj) {
          d = obj[attr];
          if (_.isString(d)) {
            if (d === "true") {
              obj[attr] = true;
            } else if (d === "false") {
              obj[attr] = false;
            } else if (azMap[d]) {
              obj[attr] = azMap[d];
            }
          } else if (_.isArray(d)) {
            for (idx = _i = 0, _len = d.length; _i < _len; idx = ++_i) {
              dd = d[idx];
              if (_.isObject(dd)) {
                checkObj(dd);
              }
              if (_.isString(dd)) {
                if (d === "true") {
                  d[idx] = true;
                } else if (d === "false") {
                  d[idx] = false;
                } else if (azMap[d]) {
                  d[idx] = azMap[d];
                }
              }
            }
          } else if (_.isObject(d)) {
            checkObj(d);
          }
        }
        return null;
      };
      for (uid in data) {
        comp = data[uid];
        checkObj(comp);
      }
      for (_i = 0, _len = azArr.length; _i < _len; _i++) {
        az = azArr[_i];
        data[az.uid] = az;
      }
      return null;
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/deserializeVisitor/EipMerge',["../DesignAws"], function(Design) {
    Design.registerDeserializeVisitor(function(data, layout_data) {
      var comp, eni_comp, instance_comp, ipObj, refArray, uid;
      for (uid in data) {
        comp = data[uid];
        if (comp.type === "AWS.EC2.EIP") {
          if (comp.resource.NetworkInterfaceId) {
            refArray = comp.resource.PrivateIpAddress.split(".");
            eni_comp = data[MC.extractID(refArray[0])];
            if (!eni_comp) {
              continue;
            }
            ipObj = eni_comp.resource.PrivateIpAddressSet[refArray[3] * 1];
            if (!ipObj) {
              continue;
            }
            ipObj.EipResource = comp;
          } else {
            instance_comp = data[MC.extractID(comp.resource.InstanceId)];
            if (instance_comp) {
              instance_comp.resource.EipResource = comp;
            }
          }
        }
      }
      return null;
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/deserializeVisitor/FixOldStack',["../DesignAws", "constant", "i18n!/nls/lang.js"], function(Design, constant, lang) {
    Design.registerDeserializeVisitor(function(data, layout_data, version) {
      var comp, foundKP, foundSG, uid;
      if (version >= "2014-01-15") {
        return;
      }
      if (!Design.instance().modeIsStack()) {
        return;
      }
      for (uid in data) {
        comp = data[uid];
        if (comp.type === constant.RESTYPE.KP) {
          if (comp.name === "DefaultKP") {
            foundKP = true;
            if (foundSG) {
              break;
            }
          }
        } else if (comp.type === constant.RESTYPE.SG) {
          if (comp.name === "DefaultSG") {
            foundSG = true;
            if (foundKP) {
              break;
            }
          }
        }
      }
      if (!foundKP) {
        uid = MC.guid();
        data[uid] = {
          uid: uid,
          type: constant.RESTYPE.KP,
          name: "DefaultKP",
          resource: {
            KeyName: "DefaultKP"
          }
        };
      }
      if (!foundSG) {
        uid = MC.guid();
        data[uid] = {
          uid: uid,
          type: constant.RESTYPE.SG,
          name: "DefaultSG",
          resource: {
            IpPermissions: [
              {
                IpProtocol: "tcp",
                IpRanges: "0.0.0.0/0",
                FromPort: "22",
                ToPort: "22",
                Groups: [
                  {
                    "GroupId": "",
                    "UserId": "",
                    "GroupName": ""
                  }
                ]
              }
            ],
            IpPermissionsEgress: [],
            Default: "true",
            GroupName: "DefaultSG",
            GroupDescription: lang.IDE.DESERIALIZE_VISITOR_GROUP_DESCRIPTION
          }
        };
      }
      return null;
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/deserializeVisitor/AsgExpandor',["../DesignAws"], function(Design) {
    Design.registerDeserializeVisitor(function(data, layout_data, version) {
      var comp, uid, _results;
      if (version < "2014-01-25") {
        return;
      }
      _results = [];
      for (uid in layout_data) {
        comp = layout_data[uid];
        if (comp.type === "ExpandedAsg") {
          _results.push(data[uid] = {
            type: "ExpandedAsg",
            uid: uid
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/deserializeVisitor/ElbSgNamePatch',["../DesignAws", "constant"], function(Design, constant) {
    Design.registerDeserializeVisitor(function(data, layout_data, version) {
      var TYPE, comp, elb, elbs, sg, sgName, sgs, uid, _i, _j, _len, _len1;
      if (version >= "2014-02-11") {
        return;
      }
      TYPE = constant.RESTYPE;
      elbs = [];
      sgs = [];
      for (uid in data) {
        comp = data[uid];
        if (comp.type === TYPE.ELB) {
          elbs.push(comp);
        } else if (comp.type === TYPE.SG) {
          sgs.push(comp);
        }
      }
      for (_i = 0, _len = elbs.length; _i < _len; _i++) {
        elb = elbs[_i];
        sgName = elb.name + "-sg";
        for (_j = 0, _len1 = sgs.length; _j < _len1; _j++) {
          sg = sgs[_j];
          if (sg.name === sgName) {
            sg.name = "elbsg-" + elb.name;
            if (sg.resource.GroupName === sgName) {
              sg.resource.GroupName = sg.name;
            }
            break;
          }
        }
      }
      return null;
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/serializeVisitor/EniIpAssigner',["../DesignAws", "constant"], function(Design, constant) {
    var generateIpForEnis, prepareEniData;
    prepareEniData = function(uid, eniArray) {
      var AzModel, eni, ip, ipSet, reserveIpSet, subnet, subnetCid, _i, _j, _len, _len1, _ref;
      subnet = Design.instance().component(uid);
      AzModel = Design.modelClassForType(constant.RESTYPE.AZ);
      console.assert(subnet, "Cannot find eni's subnet when assigning Eni's ip.");
      subnetCid = subnet.get("cidr");
      if (!subnetCid) {
        console.error("Cannot found cidr when assigning Eni Ip");
        return;
      }
      ipSet = [];
      reserveIpSet = [];
      for (_i = 0, _len = eniArray.length; _i < _len; _i++) {
        eni = eniArray[_i];
        _ref = eni.resource.PrivateIpAddressSet;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          ip = _ref[_j];
          if (ip.AutoAssign === true) {
            ipSet.push(ip);
          } else {
            reserveIpSet.push(ip.PrivateIpAddress);
          }
        }
      }
      return {
        subnetCid: subnetCid,
        ipSet: ipSet,
        reserveIpSet: reserveIpSet
      };
    };
    generateIpForEnis = function(data) {
      var idx, ip, validIpSet, _i, _len, _ref;
      validIpSet = Design.modelClassForType(constant.RESTYPE.ENI).getAvailableIPInCIDR(data.subnetCid, data.reserveIpSet, data.ipSet.length);
      validIpSet = _.filter(validIpSet, function(ip) {
        return ip.available;
      });
      _ref = data.ipSet;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        ip = _ref[idx];
        if (validIpSet[idx]) {
          ip.PrivateIpAddress = validIpSet[idx].ip;
        } else {
          ip.PrivateIpAddress = "";
        }
      }
      return null;
    };
    Design.registerSerializeVisitor(function(components) {
      var array, comp, data, eniArray, key, subnetEnisMap, uid;
      if (Design.instance().modeIsApp()) {
        return;
      }
      subnetEnisMap = {};
      for (uid in components) {
        comp = components[uid];
        if (comp.type === constant.RESTYPE.ENI) {
          if (comp.resource.SubnetId && comp.resource.SubnetId[0] === "@") {
            key = comp.resource.SubnetId;
          } else {
            key = comp.resource.AvailabilityZone;
          }
          array = subnetEnisMap[key];
          if (!array) {
            array = subnetEnisMap[key] = [];
          }
          array.splice(_.sortedIndex(array, comp, "name"), 0, comp);
        }
      }
      for (uid in subnetEnisMap) {
        eniArray = subnetEnisMap[uid];
        uid = MC.extractID(uid);
        data = prepareEniData(uid, eniArray);
        if (data) {
          generateIpForEnis(data);
        }
      }
      return null;
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/model/serializeVisitor/AppToStack',["../DesignAws"], function(Design) {
    Design.registerSerializeVisitor(function(components, layouts, options) {
      var comp, compo, level2DBComp, level2DBId, sourceDBId, _results;
      if (!options || !options.toStack) {
        return;
      }
      _results = [];
      for (comp in components) {
        compo = components[comp];
        switch (compo.type) {
          case 'AWS.VPC.VPC':
            _results.push(compo.resource.VpcId = "");
            break;
          case 'AWS.VPC.NetworkInterface':
            compo.resource.NetworkInterfaceId = "";
            _results.push(compo.resource.Attachment.AttachmentId = "");
            break;
          case 'AWS.EC2.Instance':
            compo.resource.InstanceId = "";
            _results.push(_.each(compo.resource.BlockDeviceMapping, function(e) {
              var _ref;
              if (((_ref = e.Ebs) != null ? _ref.VolumeType : void 0) && e.Ebs.VolumeType !== "io1" && e.Ebs.Iops) {
                return compo.Ebs.Iops = "";
              }
            }));
            break;
          case 'AWS.VPC.Subnet':
            _results.push(compo.resource.SubnetId = "");
            break;
          case 'AWS.EC2.EIP':
            compo.resource.AllocationId = "";
            _results.push(compo.resource.PublicIp = "");
            break;
          case 'AWS.VPC.RouteTable':
            compo.resource.RouteTableId = "";
            _results.push(compo.resource.AssociationSet.forEach(function(e) {
              e.RouteTableAssociationId = "";
            }));
            break;
          case 'AWS.EC2.SecurityGroup':
            compo.resource.GroupId = "";
            _results.push(compo.resource.GroupName = compo.name);
            break;
          case 'AWS.VPC.InternetGateway':
            _results.push(compo.resource.InternetGatewayId = "");
            break;
          case 'AWS.VPC.NetworkAcl':
            compo.resource.NetworkAclId = "";
            _results.push(compo.resource.AssociationSet.forEach(function(e) {
              e.NetworkAclAssociationId = "";
            }));
            break;
          case 'AWS.VPC.VPNGateway':
            _results.push(compo.resource.VpnGatewayId = "");
            break;
          case 'AWS.VPC.VPNConnection':
            _results.push(compo.resource.VpnConnectionId = "");
            break;
          case 'AWS.VPC.CustomerGateway':
            _results.push(compo.resource.CustomerGatewayId = "");
            break;
          case "AWS.EC2.EBS.Volume":
            compo.resource.VolumeId = "";
            if (compo.resource.VolumeType && compo.resource.VolumeType !== "io1" && compo.resource.Iops) {
              compo.resource.Iops = "";
              _results.push(null);
            } else {
              _results.push(void 0);
            }
            break;
          case 'AWS.EC2.Tag':
            _results.push(delete components[comp]);
            break;
          case 'AWS.AutoScaling.Tag':
            _results.push(delete components[comp]);
            break;
          case 'AWS.ELB':
            compo.resource.DNSName = "";
            _results.push(compo.resource.LoadBalancerName = compo.name);
            break;
          case 'AWS.AutoScaling.LaunchConfiguration':
            compo.resource.LaunchConfigurationARN = "";
            compo.resource.LaunchConfigurationName = compo.name;
            _results.push(_.each(compo.resource.BlockDeviceMapping, function(e) {
              var _ref;
              if (((_ref = e.Ebs) != null ? _ref.VolumeType : void 0) && e.Ebs.VolumeType !== 'io1' && e.Ebs.Iops) {
                e.Ebs.Iops = "";
                return null;
              }
            }));
            break;
          case 'AWS.AutoScaling.Group':
            compo.resource.AutoScalingGroupARN = "";
            _results.push(compo.resource.AutoScalingGroupName = compo.name);
            break;
          case 'AWS.AutoScaling.NotificationConfiguration':
            _results.push(console.log("Do Nothing Here"));
            break;
          case 'AWS.SNS.Subscription':
            _results.push(console.log("Do Nothing Here"));
            break;
          case 'AWS.AutoScaling.ScalingPolicy':
            _results.push(compo.resource.PolicyARN = "");
            break;
          case 'AWS.CloudWatch.CloudWatch':
            compo.resource.AlarmArn = "";
            _results.push(compo.resource.AlarmName = compo.name);
            break;
          case 'AWS.RDS.DBInstance':
            sourceDBId = '';
            level2DBId = MC.extractID(compo.resource.ReadReplicaSourceDBInstanceIdentifier);
            if (level2DBId) {
              level2DBComp = components[level2DBId];
              if (level2DBComp) {
                sourceDBId = level2DBComp.resource.ReadReplicaSourceDBInstanceIdentifier;
              }
            }
            if (!sourceDBId) {
              compo.resource.CreatedBy = "";
              compo.resource.DBInstanceIdentifier = "";
              compo.resource.Endpoint.Address = "";
              compo.resource.PreferredBackupWindow = "";
              compo.resource.PreferredMaintenanceWindow = "";
              if (compo.resource.ReadReplicaSourceDBInstanceIdentifier) {
                _results.push(compo.resource.MasterUserPassword = "****");
              } else {
                _results.push(compo.resource.MasterUserPassword = "12345678");
              }
            } else {
              level2DBComp.resource.BackupRetentionPeriod = 0;
              _results.push(delete components[compo.uid]);
            }
            break;
          case "AWS.RDS.DBSubnetGroup":
            compo.resource.CreatedBy = '';
            _results.push(compo.resource.DBSubnetGroupName = "");
            break;
          case 'AWS.RDS.OptionGroup':
            _results.push(compo.resource.OptionGroupName = "");
            break;
        }
      }
      return _results;
    });
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CanvasViewAwsLayout',["./CanvasViewAws", "CanvasViewLayout", "constant"], function(AwsCanvasView, CanvasViewLayoutHelpers, constant) {
    var ArrangeForAzs, ArrangeForSvg, ArrangeForVpc, AutoLayoutConfig, GroupMForDbSubnet, GroupMForSubnet, SortForVpc, __sortInstance;
    __sortInstance = function(instances) {
      return instances.sort(function(a, b) {
        return b.component.connections("ElbAmiAsso").length - a.component.connections("ElbAmiAsso");
      });
    };
    GroupMForSubnet = function(children) {
      var asgGroup, ch, eni, eniGroup, eniInstanceG, enis, existingEnis, expandedGroup, group, instance, instanceGroup, linkedEnis, linkedInstances, lonelyEnis, lonelyInstances, pairGroup, subnetChildren, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2;
      group = CanvasViewLayoutHelpers.DefaultGroupMethod.call(this, children);
      instanceGroup = null;
      eniGroup = null;
      asgGroup = null;
      expandedGroup = null;
      subnetChildren = [];
      for (_i = 0, _len = group.length; _i < _len; _i++) {
        ch = group[_i];
        if (ch.type === "AWS.VPC.NetworkInterface_group") {
          eniGroup = ch;
        } else if (ch.type === "AWS.EC2.Instance_group") {
          instanceGroup = ch;
        } else if (ch.type === "ExpandedAsg_group") {
          expandedGroup = ch;
        } else if (ch.type === "AWS.AutoScaling.Group_group") {
          asgGroup = ch;
        } else {
          subnetChildren.push(ch);
        }
      }
      if (expandedGroup) {
        if (asgGroup) {
          asgGroup.children = asgGroup.children.concat(expandedGroup.children);
        } else {
          expandedGroup.type = "AWS.AutoScaling.Group_group";
          asgGroup = expandedGroup;
        }
      }
      if (asgGroup) {
        subnetChildren.unshift(asgGroup);
      }
      if (instanceGroup && eniGroup) {
        linkedInstances = {};
        linkedEnis = {};
        pairGroup = [];
        existingEnis = {};
        _ref = eniGroup.children;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          eni = _ref[_j];
          existingEnis[eni.component.id] = eni;
        }
        lonelyInstances = [];
        lonelyEnis = [];
        _ref1 = instanceGroup.children;
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          instance = _ref1[_k];
          enis = instance.component.connectionTargets("EniAttachment");
          if (!enis.length) {
            lonelyInstances.push(instance);
          } else {
            eniInstanceG = [instance];
            linkedInstances[instance.component.id] = true;
            for (_l = 0, _len3 = enis.length; _l < _len3; _l++) {
              eni = enis[_l];
              linkedEnis[eni.id] = true;
              eniInstanceG.push(existingEnis[eni.id]);
            }
            pairGroup.push({
              type: "AmiEniPair",
              children: eniInstanceG
            });
          }
        }
        _ref2 = eniGroup.children;
        for (_m = 0, _len4 = _ref2.length; _m < _len4; _m++) {
          eni = _ref2[_m];
          if (!linkedEnis[eni.component.id]) {
            lonelyEnis.push(eni);
          }
        }
        __sortInstance(lonelyInstances);
        subnetChildren.push({
          type: "AWS.EC2.Instance_group",
          children: lonelyInstances
        });
        subnetChildren.push({
          type: "AmiEniPari_group",
          children: pairGroup
        });
        subnetChildren.push({
          type: "AWS.VPC.NetworkInterface_group",
          children: lonelyEnis
        });
        return subnetChildren;
      } else {
        if (instanceGroup) {
          __sortInstance(instanceGroup.children);
          subnetChildren.push(instanceGroup);
        }
        if (eniGroup) {
          subnetChildren.push(eniGroup);
        }
        return subnetChildren;
      }
    };
    GroupMForDbSubnet = function(children) {
      var ch, id, lonelyMasters, lonelySlaves, master, masterSlave, masters, msGroup, normalGroup, _i, _j, _len, _len1;
      msGroup = [];
      normalGroup = [];
      masters = {};
      lonelySlaves = [];
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        ch = children[_i];
        if (ch.component.slaves().length) {
          masters[ch.component.id] = [ch];
        }
      }
      for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
        ch = children[_j];
        master = ch.component.master();
        if (master) {
          if (masters[master.id]) {
            masters[master.id].push(ch);
          } else {
            lonelySlaves.push(ch);
          }
        } else if (!masters[ch.component.id]) {
          normalGroup.push(ch);
        }
      }
      lonelyMasters = [];
      for (id in masters) {
        masterSlave = masters[id];
        if (masterSlave.length === 1) {
          lonelyMasters.push(masterSlave[0]);
        } else {
          msGroup.push({
            type: "MasterSlave",
            children: masterSlave
          });
        }
      }
      if (lonelyMasters.length) {
        msGroup.push({
          type: "MasterSlave",
          children: lonelyMasters
        });
      }
      ch = [];
      if (msGroup.length) {
        ch.push({
          type: "MasterSlave_group",
          children: msGroup
        });
      }
      if (lonelySlaves.length) {
        ch.push({
          type: "AWS.RDS.DBInstance_group",
          children: lonelySlaves
        });
      }
      if (normalGroup.length) {
        ch.push({
          type: "AWS.RDS.DBInstance_group",
          children: normalGroup
        });
      }
      return ch;
    };
    ArrangeForAzs = function(children) {
      var ch1, ch2, i, x1, x2, y2;
      if (!children.length) {
        return {
          width: 0,
          height: 0
        };
      }
      if (children.length === 1) {
        return {
          width: children[0].width,
          height: children[0].height
        };
      }
      children.sort(function(a, b) {
        return b.height - a.height;
      });
      i = 0;
      while (i < children.length) {
        ch1 = children[i];
        ch2 = children[i + 1];
        if (ch2 && ch2.width * ch2.height > ch1.width * ch1.height) {
          children[i] = ch2;
          children[i + 1] = ch1;
        }
        i += 2;
      }
      y2 = children[0].height + 15;
      x1 = 0;
      x2 = 0;
      i = 0;
      while (i < children.length) {
        ch1 = children[i];
        ch2 = children[i + 1];
        ch1.y = 0;
        if (ch2) {
          ch1.x = x1;
          x1 += ch1.width + 4;
          ch2.x = x2;
          ch2.y = y2;
          x2 += ch2.width + 4;
        } else {
          if (x1 > x2) {
            ch1.x = x2;
            ch1.y = y2;
            x2 += ch1.width + 4;
          } else {
            ch1.x = x1;
            ch1.y = 0;
            x1 += ch1.width + 4;
          }
        }
        i += 2;
      }
      return {
        width: Math.max(x1, x2) - 4,
        height: children[1].height + y2
      };
    };
    ArrangeForVpc = function(children) {
      var baseX, baseY, ch, childMap, def, elbBaseY, h, height, subnetGroupBaseX, w, width, _i, _j, _len, _len1;
      def = AutoLayoutConfig[constant.RESTYPE.VPC];
      childMap = {};
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        ch = children[_i];
        childMap[ch.type] = ch;
      }
      baseX = childMap["AWS.ELB_group"] ? 18 : 5;
      baseY = 4;
      subnetGroupBaseX = baseX;
      ch = childMap["AWS.VPC.RouteTable_group"];
      if (ch) {
        ch.x = baseX;
        ch.y = baseY;
        baseY += ch.height + 3;
      }
      elbBaseY = baseY;
      ch = childMap["AWS.EC2.AvailabilityZone_group"];
      if (ch) {
        ch.x = baseX;
        ch.y = baseY;
        subnetGroupBaseX = baseX + ch.width + 4;
        elbBaseY += ch.children[0].y + ch.children[0].height + 3;
      }
      ch = childMap["AWS.ELB_group"];
      if (ch) {
        ch.x = 5;
        ch.y = elbBaseY;
        if (ch.x + ch.width > subnetGroupBaseX) {
          subnetGroupBaseX = ch.x + ch.width + 4;
        }
      }
      ch = childMap["AWS.RDS.DBSubnetGroup_group"];
      if (ch) {
        ch.x = subnetGroupBaseX;
        ch.y = baseY;
      }
      width = 0;
      height = 0;
      for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
        ch = children[_j];
        w = ch.x + ch.width;
        if (w > width) {
          width = w;
        }
        h = ch.y + ch.height;
        if (h > height) {
          height = h;
        }
      }
      return {
        width: width + 5,
        height: height + 4
      };
    };
    ArrangeForSvg = function(children) {
      var ch, newChs, _i, _len;
      newChs = [];
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        ch = children[_i];
        if (ch.type === "AWS.VPC.VPC_group") {
          newChs.unshift(ch);
        } else {
          newChs.push(ch);
        }
      }
      return CanvasViewLayoutHelpers.DefaultArrangeMethod.call(this, newChs);
    };
    SortForVpc = function(children) {

      /*
       * 1. Main Rtb should be before other RTB.
       * 2. Internet Elb should be before internal Elb
       * 3. Connected Elb should be before none connected Elb
       */
      var ExternalElbs, InternalElbs, ch, col, otherChildren, _i, _len;
      ExternalElbs = [];
      InternalElbs = [];
      otherChildren = [];
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        ch = children[_i];
        if (ch.type === constant.RESTYPE.RT) {
          if (ch.get("main")) {
            otherChildren.unshift(ch);
            continue;
          }
        }
        if (ch.type === constant.RESTYPE.ELB) {
          col = ch.get("internal") ? InternalElbs : ExternalElbs;
          if (ch.connections("ElbAmiAsso").length) {
            col.unshift(ch);
          } else {
            col.push(ch);
          }
          continue;
        }
        otherChildren.push(ch);
      }
      return otherChildren.concat(ExternalElbs, InternalElbs);
    };
    AutoLayoutConfig = AwsCanvasView.prototype.autoLayoutConfig = {
      "SVG": {
        arrangeMethod: ArrangeForSvg,
        space: 6
      },
      "AWS.VPC.CustomerGateway_group": {
        arrangeMethod: "ArrangeVertical",
        space: 2
      },
      "AWS.VPC.VPC": {
        arrangeMethod: ArrangeForVpc,
        space: 4,
        sortMethod: SortForVpc,
        margin: 2,
        width: 60,
        height: 60
      },
      "AWS.VPC.VPNGateway": {
        sticky: true
      },
      "AWS.VPC.InternetGateway": {
        sticky: true
      },
      "AWS.ELB_group": {
        space: 11
      },
      "AWS.ELB": {
        width: 9,
        height: 9
      },
      "AWS.VPC.RouteTable_group": {
        space: 4
      },
      "AWS.VPC.RouteTable": {
        width: 9,
        height: 9
      },
      "AWS.EC2.AvailabilityZone_group": {
        arrangeMethod: ArrangeForAzs
      },
      "AWS.EC2.AvailabilityZone": {
        margin: 2,
        width: 15,
        height: 15
      },
      "AWS.RDS.DBSubnetGroup_group": {
        arrangeMethod: "ArrangeBinPack",
        space: 4
      },
      "AWS.RDS.DBSubnetGroup": {
        groupMethod: GroupMForDbSubnet,
        margin: 2,
        space: 3,
        width: 11,
        height: 11
      },
      "AWS.RDS.DBInstance": {
        width: 9,
        height: 9
      },
      "AWS.RDS.DBInstance_group": {
        arrangeMethod: "ArrangeBinPack",
        space: 2
      },
      "MasterSlave": {
        arrangeMethod: "ArrangeVertical",
        space: 2
      },
      "MasterSlave_group": {
        space: 1
      },
      "AWS.AutoScaling.LaunchConfiguration": {
        ignore: true
      },
      "AWS.VPC.NetworkInterface_group": {
        arrangeMethod: "ArrangeBinPack",
        space: 4
      },
      "AWS.VPC.NetworkInterface": {
        width: 9,
        height: 9
      },
      "AWS.EC2.Instance_group": {
        arrangeMethod: "ArrangeBinPack",
        space: 2
      },
      "AWS.EC2.Instance": {
        width: 9,
        height: 9
      },
      "AWS.AutoScaling.Group_group": {
        arrangeMethod: "ArrangeBinPack",
        space: 2
      },
      "AWS.AutoScaling.Group": {
        width: 13,
        height: 13
      },
      "ExpandedAsg": {
        width: 13,
        height: 13
      },
      "AWS.VPC.Subnet_group": {
        arrangeMethod: "ArrangeBinPack",
        space: 2
      },
      "AWS.VPC.Subnet": {
        groupMethod: GroupMForSubnet,
        margin: 2,
        space: 2,
        width: 13,
        height: 13
      },
      "AWS.VPC.CustomerGateway": {
        width: 17,
        height: 10
      },
      "AmiEniPair": {
        space: 1
      },
      "AmiEniPari_group": {
        arrangeMethod: "ArrangeVertical",
        space: 1
      }
    };
    return null;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeVpc',["CanvasElement", "constant", "CanvasManager", "CanvasView"], function(CanvasElement, constant, CanvasManager, CanvasView) {
    return CanvasElement.extend({

      /* env:dev                                     env:dev:end */
      type: constant.RESTYPE.VPC,
      parentType: ["SVG"],
      listenModelEvents: function() {
        this.listenTo(this.model, "change:cidr", this.render);
      },
      create: function() {
        return this.canvas.appendVpc(this.createGroup());
      },
      siblings: function() {
        var canvas;
        canvas = this.canvas;
        return canvas.design.componentsOfType(constant.RESTYPE.CGW).map(function(m) {
          return canvas.getItem(m.id);
        });
      },
      label: function() {
        return "" + (this.model.get('name')) + " (" + (this.model.get('cidr')) + ")";
      },
      render: function() {
        var m;
        m = this.model;
        CanvasManager.setLabel(this, this.$el.children("text"));
        return this.$el[0].instance.move(m.x() * CanvasView.GRID_WIDTH, m.y() * CanvasView.GRID_WIDTH);
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeAz',["CanvasElement", "constant", "CanvasManager", "CanvasView"], function(CanvasElement, constant, CanvasManager, CanvasView) {
    return CanvasElement.extend({

      /* env:dev                                    env:dev:end */
      type: constant.RESTYPE.AZ,
      parentType: [constant.RESTYPE.VPC],
      defaultSize: [23, 23],
      create: function() {
        return this.canvas.appendAz(this.createGroup());
      },
      render: function() {
        var m;
        m = this.model;
        CanvasManager.update(this.$el.children("text"), m.get("name"));
        return this.$el[0].instance.move(m.x() * CanvasView.GRID_WIDTH, m.y() * CanvasView.GRID_WIDTH);
      }
    }, {
      createResource: function(type, attr, option) {
        var azModel;
        attr.width = 21;
        attr.height = 21;
        azModel = CanvasElement.createResource(type, attr, option);
        return CanvasElement.createResource(constant.RESTYPE.SUBNET, {
          x: attr.x + 2,
          y: attr.y + 2,
          width: attr.width - 4,
          height: attr.height - 4,
          parent: azModel
        }, option);
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeSubnet',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js", "CanvasView"], function(CanvasElement, constant, CanvasManager, lang, CanvasView) {
    return CanvasElement.extend({

      /* env:dev                                        env:dev:end */
      type: constant.RESTYPE.SUBNET,
      parentType: [constant.RESTYPE.AZ],
      defaultSize: [19, 19],
      portPosition: function(portName, isAtomic) {
        var m, portY, x;
        m = this.model;
        portY = m.height() * CanvasView.GRID_HEIGHT / 2 - 5;
        if (portName === "subnet-assoc-in") {
          return [-12, portY, CanvasElement.constant.PORT_LEFT_ANGLE];
        } else {
          x = m.width() * CanvasView.GRID_WIDTH + 4;
          if (isAtomic) {
            x += 8;
          }
          return [x, portY, CanvasElement.constant.PORT_RIGHT_ANGLE];
        }
      },
      listenModelEvents: function() {
        this.listenTo(this.model, "change:cidr", this.render);
      },
      create: function() {
        var m, svg, svgEl;
        svg = this.canvas.svg;
        svgEl = this.canvas.appendSubnet(this.createGroup());
        svgEl.add([
          svg.use("port_right").attr({
            'class': 'port port-gray tooltip',
            'data-name': 'subnet-assoc-in',
            'data-tooltip': lang.IDE.PORT_TIP_L
          }), svg.use("port_right").attr({
            'class': 'port port-gray tooltip',
            'data-name': 'subnet-assoc-out',
            'data-tooltip': lang.IDE.PORT_TIP_M
          })
        ]);
        m = this.model;
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      },
      label: function() {
        return "" + (this.model.get('name')) + " (" + (this.model.get('cidr')) + ")";
      },
      render: function() {
        var m;
        m = this.model;
        CanvasManager.setLabel(this, this.$el.children("text"));
        return this.$el[0].instance.move(m.x() * CanvasView.GRID_WIDTH, m.y() * CanvasView.GRID_WIDTH);
      },
      containPoint: function(px, py) {
        var size, x, y;
        x = this.model.x() - 2;
        y = this.model.y();
        size = this.size();
        return x <= px && y <= py && x + size.width + 4 >= px && y + size.height >= py;
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeRtb',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js"], function(CanvasElement, constant, CanvasManager, lang) {
    return CanvasElement.extend({

      /* env:dev                                     env:dev:end */
      type: constant.RESTYPE.RT,
      parentType: [constant.RESTYPE.VPC],
      defaultSize: [8, 8],
      portPosMap: {
        "rtb-tgt-left": [10, 35, CanvasElement.constant.PORT_LEFT_ANGLE, 8, 35],
        "rtb-tgt-right": [70, 35, CanvasElement.constant.PORT_RIGHT_ANGLE, 72, 35],
        "rtb-src-top": [40, 3, CanvasElement.constant.PORT_UP_ANGLE],
        "rtb-src-bottom": [40, 77, CanvasElement.constant.PORT_DOWN_ANGLE]
      },
      portDirMap: {
        "rtb-tgt": "horizontal",
        "rtb-src": "vertical"
      },
      iconUrl: function() {
        if (this.model.get("main")) {
          return "ide/icon/cvs-rtb-main.png";
        } else {
          return "ide/icon/cvs-rtb.png";
        }
      },
      listenModelEvents: function() {
        this.listenTo(this.model, "change:main", this.render);
      },
      create: function() {
        var m, node, svg;
        m = this.model;
        svg = this.canvas.svg;
        node = this.createNode({
          image: this.iconUrl(),
          imageX: 10,
          imageY: 13,
          imageW: 60,
          imageH: 57
        }).add([
          svg.text("").move(41, 27).classes('node-label'), svg.use("port_left").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'rtb-tgt',
            'data-alias': 'rtb-tgt-left',
            'data-tooltip': lang.IDE.PORT_TIP_B
          }), svg.use("port_right").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'rtb-tgt',
            'data-alias': 'rtb-tgt-right',
            'data-tooltip': lang.IDE.PORT_TIP_B
          }), svg.use("port_bottom").attr({
            'class': 'port port-gray tooltip',
            'data-name': 'rtb-src',
            'data-alias': 'rtb-src-top',
            'data-tooltip': lang.IDE.PORT_TIP_A
          }), svg.use("port_top").attr({
            'class': 'port port-gray tooltip',
            'data-name': 'rtb-src',
            'data-alias': 'rtb-src-bottom',
            'data-tooltip': lang.IDE.PORT_TIP_A
          })
        ]);
        this.canvas.appendNode(node);
        this.initNode(node, m.x(), m.y());
        return node;
      },
      labelWidth: function(width) {
        return CanvasElement.prototype.labelWidth.call(this, width) - 20;
      },
      render: function() {
        CanvasManager.setLabel(this, this.$el.children(".node-label"));
        return CanvasManager.update(this.$el.children("image"), this.iconUrl(), "href");
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeIgw',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js", "Design", "CloudResources"], function(CanvasElement, constant, CanvasManager, lang, Design, CloudResources) {
    return CanvasElement.extend({

      /* env:dev                                     env:dev:end */
      type: constant.RESTYPE.IGW,
      parentType: [constant.RESTYPE.VPC],
      defaultSize: [8, 8],
      portPosMap: {
        "igw-tgt": [78, 35, CanvasElement.constant.PORT_RIGHT_ANGLE]
      },
      sticky: "left",
      create: function() {
        var m, svg, svgEl;
        m = this.model;
        svg = this.canvas.svg;
        svgEl = this.createNode({
          image: "ide/icon/cvs-igw.png",
          imageX: 10,
          imageY: 16,
          imageW: 60,
          imageH: 46,
          label: m.get("name")
        }).add(svg.use("port_left").attr({
          'class': 'port port-blue tooltip',
          'data-name': 'igw-tgt',
          'data-tooltip': lang.IDE.PORT_TIP_C
        }));
        this.canvas.appendNode(svgEl);
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeVgw',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js", "CloudResources"], function(CanvasElement, constant, CanvasManager, lang, CloudResources) {
    return CanvasElement.extend({

      /* env:dev                                     env:dev:end */
      type: constant.RESTYPE.VGW,
      parentType: [constant.RESTYPE.VPC],
      defaultSize: [8, 8],
      portPosMap: {
        "vgw-tgt": [3, 35, CanvasElement.constant.PORT_LEFT_ANGLE],
        "vgw-vpn": [70, 35, CanvasElement.constant.PORT_RIGHT_ANGLE, 72, 35]
      },
      sticky: "right",
      create: function() {
        var m, svg, svgEl;
        m = this.model;
        svg = this.canvas.svg;
        svgEl = this.createNode({
          image: "ide/icon/cvs-vgw.png",
          imageX: 10,
          imageY: 16,
          imageW: 60,
          imageH: 46,
          label: m.get("name")
        }).add([
          svg.use("port_right").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'vgw-tgt',
            'data-tooltip': lang.IDE.PORT_TIP_C
          }), svg.use("port_right").attr({
            'class': 'port port-purple tooltip',
            'data-name': 'vgw-vpn',
            'data-tooltip': lang.IDE.PORT_TIP_H
          })
        ]);
        this.canvas.appendNode(svgEl);
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      }
    }, {
      createResource: function(type, attr, option) {
        var vpc;
        vpc = Design.modelClassForType(constant.RESTYPE.VPC).theVPC();
        attr.x = vpc.x() + vpc.width() - 4;
        if (attr.y < vpc.y() || attr.y + 8 > vpc.y() + vpc.height()) {
          attr.y = vpc.y() + Math.round(vpc.height() / 2) - 4;
        }
        attr.parent = vpc;
        return CanvasElement.createResource(type, attr, option);
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeCgw',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js", "CloudResources"], function(CanvasElement, constant, CanvasManager, lang, CloudResources) {
    return CanvasElement.extend({

      /* env:dev                                     env:dev:end */
      type: constant.RESTYPE.CGW,
      parentType: ["SVG"],
      defaultSize: [17, 10],
      portPosMap: {
        "cgw-vpn": [6, 45, CanvasElement.constant.PORT_LEFT_ANGLE]
      },
      create: function() {
        var m, svg, svgEl;
        m = this.model;
        svg = this.canvas.svg;
        svgEl = this.createNode({
          image: "ide/icon/cvs-cgw.png",
          imageX: 13,
          imageY: 8,
          imageW: 151,
          imageH: 76
        }).add([
          svg.text("").move(90, 95).classes('node-label'), svg.use("port_right").attr({
            'class': 'port port-purple tooltip',
            'data-name': 'cgw-vpn',
            'data-tooltip': lang.IDE.PORT_TIP_I
          })
        ]);
        this.canvas.appendNode(svgEl);
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      },
      labelWidth: function(width) {
        return CanvasElement.prototype.labelWidth.call(this, width) - 4;
      },
      render: function() {
        return CanvasManager.setLabel(this, this.$el.children(".node-label"));
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeElb',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js"], function(CanvasElement, constant, CanvasManager, lang) {
    return CanvasElement.extend({

      /* env:dev                                     env:dev:end */
      type: constant.RESTYPE.ELB,
      parentType: [constant.RESTYPE.VPC],
      defaultSize: [9, 9],
      portPosMap: {
        "elb-sg-in": [2, 35, CanvasElement.constant.PORT_LEFT_ANGLE],
        "elb-assoc": [79, 50, CanvasElement.constant.PORT_RIGHT_ANGLE, 81, 50],
        "elb-sg-out": [79, 20, CanvasElement.constant.PORT_RIGHT_ANGLE, 81, 20]
      },
      iconUrl: function() {
        if (this.model.get("internal")) {
          return "ide/icon/cvs-elb-int.png";
        } else {
          return "ide/icon/cvs-elb-ext.png";
        }
      },
      listenModelEvents: function() {
        this.listenTo(this.model, "change:internal", this.render);
      },
      create: function() {
        var m, svg, svgEl;
        m = this.model;
        svg = this.canvas.svg;
        svgEl = this.createNode({
          image: this.iconUrl(),
          imageX: 9,
          imageY: 11,
          imageW: 70,
          imageH: 53,
          label: m.get("name"),
          sg: true
        }).add([
          svg.use("port_right").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'elb-sg-in',
            'data-tooltip': lang.IDE.PORT_TIP_D
          }), svg.use("port_right").attr({
            'class': 'port port-gray tooltip',
            'data-name': 'elb-assoc',
            'data-tooltip': lang.IDE.PORT_TIP_K
          }), svg.use("port_right").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'elb-sg-out',
            'data-tooltip': lang.IDE.PORT_TIP_J
          })
        ]);
        this.canvas.appendNode(svgEl);
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      },
      render: function() {
        var m;
        m = this.model;
        CanvasManager.setLabel(this, this.$el.children(".node-label"));
        CanvasManager.update(this.$el.children("image"), this.iconUrl(), "href");
        return CanvasManager.toggle(this.$el.children('[data-name="elb-sg-in"]'), m.get("internal"));
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CpInstance',["CanvasPopup", "./TplPopup", "./CpVolume", "event", "constant", "CloudResources"], function(CanvasPopup, TplPopup, VolumePopup, ide_event, constant, CloudResources) {
    return CanvasPopup.extend({
      type: "InstancePopup",
      attachType: "overlay",
      className: "canvas-pp instance",
      events: {
        "click .instance-pph-close": "remove",
        "click li": "selectItem",
        "click .vpp-ins-vol": "showVolume"
      },
      initialize: function() {
        CanvasPopup.prototype.initialize.apply(this, arguments);
        this.selectItem({
          currentTarget: this.$el.find("li")[0]
        });
      },
      content: function() {
        return TplPopup.instance({
          name: this.host.get("name"),
          items: this.models || []
        });
      },
      selectItem: function(evt) {
        this.canvas.deselectItem(true);
        this.$el.find(".selected").removeClass("selected");
        this.canvas.triggerSelected(constant.RESTYPE.INSTANCE, $(evt.currentTarget).addClass("selected").attr("data-id"));
        return false;
      },
      remove: function() {
        if (this.volPopup) {
          this.volPopup.remove();
        }
        return CanvasPopup.prototype.remove.apply(this, arguments);
      },
      showVolume: function(evt) {
        var $ins, bdm, ins, region, vol, volCln, vols, volumeId, _i, _len, _ref, _ref1;
        region = this.canvas.design.region();
        $ins = $(evt.currentTarget).closest(".vpp-instance");
        ins = CloudResources(constant.RESTYPE.INSTANCE, region).get($ins.attr("data-id"));
        if (!ins) {
          return;
        }
        ins = ins.attributes;
        volCln = CloudResources(constant.RESTYPE.VOL, region);
        vols = [];
        _ref = ins.blockDeviceMapping;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          bdm = _ref[_i];
          if (bdm.deviceName !== ins.rootDeviceName) {
            volumeId = (_ref1 = bdm.ebs) != null ? _ref1.volumeId : void 0;
            if (!volumeId) {
              continue;
            }
            vol = volCln.get(volumeId);
            if (!vol) {
              continue;
            }
            vols.push({
              id: vol.id,
              appId: vol.id,
              name: bdm.deviceName,
              snapshot: vol.get("snapshotId"),
              size: vol.get("size"),
              state: vol.get('state') || 'unknown'
            });
          }
        }
        this.volPopup = new VolumePopup({
          attachment: $ins[0],
          models: vols,
          canvas: this.canvas
        });
        return false;
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CpEni',["./CpInstance", "./TplPopup", "event", "constant", "CloudResources"], function(InstancePopup, TplPopup, ide_event, constant, CloudResources) {
    return InstancePopup.extend({
      content: function() {
        return TplPopup.eni({
          name: this.host.get("name"),
          items: this.models || []
        });
      },
      selectItem: function(evt) {
        this.canvas.deselectItem(true);
        this.$el.find(".selected").removeClass("selected");
        this.canvas.triggerSelected(constant.RESTYPE.ENI, $(evt.currentTarget).addClass("selected").attr("data-id"));
        return false;
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeEni',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js", "CloudResources", "./CpEni", "event"], function(CanvasElement, constant, CanvasManager, lang, CloudResources, EniPopup, ide_event) {
    return CanvasElement.extend({

      /* env:dev                                     env:dev:end */
      type: constant.RESTYPE.ENI,
      parentType: [constant.RESTYPE.SUBNET],
      defaultSize: [9, 9],
      portPosMap: {
        "eni-sg-left": [10, 20, CanvasElement.constant.PORT_LEFT_ANGLE],
        "eni-attach": [8, 50, CanvasElement.constant.PORT_LEFT_ANGLE],
        "eni-sg-right": [80, 20, CanvasElement.constant.PORT_RIGHT_ANGLE],
        "eni-rtb": [45, 2, CanvasElement.constant.PORT_UP_ANGLE]
      },
      portDirMap: {
        "eni-sg": "horizontal"
      },
      events: {
        "mousedown .eip-status": "toggleEip",
        "mousedown .server-number-group": "showGroup",
        "click .eip-status": function() {
          return false;
        }
      },
      iconUrl: function() {
        if (this.model.connections("EniAttachment").length) {
          return "ide/icon/cvs-eni-att.png";
        } else {
          return "ide/icon/cvs-eni-unatt.png";
        }
      },
      listenModelEvents: function() {
        this.listenTo(this.model, "change:connections", this.onConnectionChange);
        this.listenTo(this.model, "change:primaryEip", this.render);
        this.listenTo(this.canvas, "switchMode", this.render);
      },
      onConnectionChange: function(cn) {
        if (cn.type === "EniAttachment") {
          return this.render();
        }
      },
      toggleEip: function() {
        var toggle;
        if (this.canvas.design.modeIsApp()) {
          return false;
        }
        toggle = !this.model.hasPrimaryEip();
        this.model.setPrimaryEip(toggle);
        if (toggle) {
          Design.modelClassForType(constant.RESTYPE.IGW).tryCreateIgw();
        }
        CanvasManager.updateEip(this.$el.children(".eip-status"), this.model);
        ide_event.trigger(ide_event.PROPERTY_REFRESH_ENI_IP_LIST);
        return false;
      },
      create: function() {
        var m, svg, svgEl;
        m = this.model;
        svg = this.canvas.svg;
        svgEl = this.createNode({
          image: this.iconUrl(),
          imageX: 16,
          imageY: 15,
          imageW: 59,
          imageH: 49,
          label: true,
          labelBg: true,
          sg: true
        }).add([
          svg.image("", 12, 14).move(44, 37).classes('eip-status tooltip'), svg.use("port_diamond").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'eni-sg',
            'data-alias': 'eni-sg-left',
            'data-tooltip': lang.IDE.PORT_TIP_D
          }), svg.use("port_right").attr({
            'class': 'port port-green tooltip',
            'data-name': 'eni-attach',
            'data-tooltip': lang.IDE.PORT_TIP_G
          }), svg.use("port_diamond").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'eni-sg',
            'data-alias': 'eni-sg-right',
            'data-tooltip': lang.IDE.PORT_TIP_F
          }), svg.use("port_bottom").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'eni-rtb',
            'data-tooltip': lang.IDE.PORT_TIP_C
          }), svg.group().add([svg.rect(20, 14).move(36, 2).radius(3).classes("server-number-bg"), svg.plain("0").move(46, 13).classes("server-number")]).classes("server-number-group")
        ]);
        this.canvas.appendNode(svgEl);
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      },
      render: function() {
        var count, m, numberGroup;
        m = this.model;
        CanvasManager.setLabel(this, this.$el.children(".node-label"));
        CanvasManager.update(this.$el.children("image:not(.eip-status)"), this.iconUrl(), "href");
        count = m.serverGroupCount();
        numberGroup = this.$el.children(".server-number-group");
        CanvasManager.toggle(this.$el.children(".port-eni-rtb"), count <= 1);
        CanvasManager.toggle(numberGroup, count > 1);
        numberGroup.children("text").text(count);
        return CanvasManager.updateEip(this.$el.children(".eip-status"), m);
      },
      showGroup: function() {
        var eip, gm, idx, ins, insCln, m, members, name, _i, _len, _ref;
        if (!this.canvas.design.modeIsApp()) {
          return;
        }
        insCln = CloudResources(this.type, this.model.design().region());
        members = (this.model.groupMembers() || []).slice(0);
        members.unshift({
          appId: this.model.get("appId"),
          ips: this.model.get("ips")
        });
        name = this.model.get("name");
        gm = [];
        for (idx = _i = 0, _len = members.length; _i < _len; idx = ++_i) {
          m = members[idx];
          ins = insCln.get(m.appId);
          if (!ins) {
            console.warn("Cannot find eni of `" + m.appId + "`");
            continue;
          }
          ins = ins.attributes;
          eip = (m.ips || [])[0];
          gm.push({
            name: "" + name + "-" + idx,
            id: m.appId,
            eip: eip != null ? (_ref = eip.eipData) != null ? _ref.publicIp : void 0 : void 0
          });
        }
        new EniPopup({
          attachment: this.$el[0],
          host: this.model,
          models: gm,
          canvas: this.canvas
        });
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeInstance',["CanvasElement", "constant", "CanvasManager", "./CpVolume", "./CpInstance", "i18n!/nls/lang.js", "CloudResources", "event", "UI.notification"], function(CanvasElement, constant, CanvasManager, VolumePopup, InstancePopup, lang, CloudResources, ide_event) {
    return CanvasElement.extend({

      /* env:dev                                          env:dev:end */
      type: constant.RESTYPE.INSTANCE,
      parentType: [constant.RESTYPE.AZ, constant.RESTYPE.SUBNET, constant.RESTYPE.ASG, "ExpandedAsg"],
      defaultSize: [9, 9],
      portPosMap: {
        "instance-sg-left": [10, 20, CanvasElement.constant.PORT_LEFT_ANGLE],
        "instance-sg-right": [80, 20, CanvasElement.constant.PORT_RIGHT_ANGLE],
        "instance-attach": [78, 50, CanvasElement.constant.PORT_RIGHT_ANGLE, 80, 50],
        "instance-rtb": [45, 2, CanvasElement.constant.PORT_UP_ANGLE]
      },
      portDirMap: {
        "instance-sg": "horizontal"
      },
      events: {
        "mousedown .eip-status": "toggleEip",
        "mousedown .volume-image": "showVolume",
        "mousedown .server-number-group": "showGroup",
        "click .eip-status": "suppressEvent",
        "click .volume-image": "suppressEvent",
        "click .server-number-group": "suppressEvent"
      },
      suppressEvent: function() {
        return false;
      },
      iconUrl: function() {
        var ami, instance, m, url;
        ami = this.model.getAmi() || this.model.get("cachedAmi");
        if (!ami) {
          m = this.model;
          instance = CloudResources(m.type, m.design().region()).get(m.get("appId"));
          if (instance) {
            instance = instance.attributes;
            if (instance.platform && instance.platform === "windows") {
              url = "ide/ami/windows." + instance.architecture + "." + instance.rootDeviceType + ".png";
            } else {
              url = "ide/ami/linux-other." + instance.architecture + "." + instance.rootDeviceType + ".png";
            }
          } else {
            url = "ide/ami/ami-not-available.png";
          }
        } else {
          url = "ide/ami/" + ami.osType + "." + ami.architecture + "." + ami.rootDeviceType + ".png";
        }
        return url;
      },
      listenModelEvents: function() {
        this.listenTo(this.model, "change:primaryEip", this.render);
        this.listenTo(this.model, "change:imageId", this.render);
        this.listenTo(this.model, "change:volumeList", this.render);
        this.listenTo(this.model, "change:count", this.updateServerCount);
        this.listenTo(this.canvas, "switchMode", this.render);
        this.listenTo(this.canvas, "change:externalData", this.render);
      },
      updateServerCount: function() {
        var eni, _i, _len, _ref, _ref1;
        this.render();
        _ref = this.model.connectionTargets("EniAttachment");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eni = _ref[_i];
          if ((_ref1 = this.canvas.getItem(eni.id)) != null) {
            _ref1.render();
          }
        }
      },
      toggleEip: function() {
        var toggle;
        if (this.canvas.design.modeIsApp()) {
          return false;
        }
        toggle = !this.model.hasPrimaryEip();
        this.model.setPrimaryEip(toggle);
        if (toggle) {
          Design.modelClassForType(constant.RESTYPE.IGW).tryCreateIgw();
        }
        CanvasManager.updateEip(this.$el.children(".eip-status"), this.model);
        ide_event.trigger(ide_event.PROPERTY_REFRESH_ENI_IP_LIST);
        return false;
      },
      select: function(selectedDomElement) {
        var type;
        type = this.type;
        if (this.model.get("appId") && this.canvas.design.modeIsAppEdit()) {
          type = "component_server_group";
        }
        this.canvas.triggerSelected(type, this.model.id);
      },
      create: function() {
        var m, svg, svgEl;
        m = this.model;
        svg = this.canvas.svg;
        svgEl = this.createNode({
          image: "ide/icon/cvs-instance.png",
          imageX: 15,
          imageY: 11,
          imageW: 61,
          imageH: 62,
          label: true,
          labelBg: true,
          sg: true
        }).add([
          svg.image(MC.IMG_URL + this.iconUrl(), 39, 27).move(27, 15).classes("ami-image"), svg.image(MC.IMG_URL + "ide/icon/icn-vol.png", 29, 24).move(21, 46).classes('volume-image'), svg.text("").move(35, 58).classes('volume-number'), svg.image("", 12, 14).move(53, 49).classes('eip-status tooltip'), svg.use("port_diamond").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'instance-sg',
            'data-alias': 'instance-sg-left',
            'data-tooltip': lang.IDE.PORT_TIP_D
          }), svg.use("port_right").attr({
            'class': 'port port-green tooltip',
            'data-name': 'instance-attach',
            'data-tooltip': lang.IDE.PORT_TIP_E
          }), svg.use("port_diamond").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'instance-sg',
            'data-alias': 'instance-sg-right',
            'data-tooltip': lang.IDE.PORT_TIP_D
          }), svg.use("port_bottom").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'instance-rtb',
            'data-tooltip': lang.IDE.PORT_TIP_C
          }), svg.group().add([svg.rect(20, 14).move(36, 2).radius(3).classes("server-number-bg"), svg.plain("0").move(46, 13).classes("server-number")]).classes("server-number-group")
        ]);
        if (!this.model.design().modeIsStack() && m.get("appId")) {
          svgEl.add(svg.circle(8).move(63, 14).classes('res-state unknown'));
        }
        this.canvas.appendNode(svgEl);
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      },
      render: function() {
        var instance, m, numberGroup, state, statusIcon, volumeCount;
        m = this.model;
        CanvasManager.setLabel(this, this.$el.children(".node-label"));
        CanvasManager.update(this.$el.children(".ami-image"), this.iconUrl(), "href");
        numberGroup = this.$el.children(".server-number-group");
        statusIcon = this.$el.children(".res-state");
        if (m.get("count") > 1) {
          CanvasManager.toggle(statusIcon, false);
          CanvasManager.toggle(numberGroup, true);
          CanvasManager.update(numberGroup.children("text"), m.get("count"));
        } else {
          CanvasManager.toggle(statusIcon, true);
          CanvasManager.toggle(numberGroup, false);
          if (statusIcon.length) {
            instance = CloudResources(m.type, m.design().region()).get(m.get("appId"));
            state = (instance != null ? instance.get("instanceState").name : void 0) || "unknown";
            statusIcon.data("tooltip", state).attr("data-tooltip", state).attr("class", "res-state tooltip " + state);
          }
        }
        CanvasManager.updateEip(this.$el.children(".eip-status"), m);
        volumeCount = m.get("volumeList") ? m.get("volumeList").length : 0;
        return CanvasManager.update(this.$el.children(".volume-number"), volumeCount);
      },
      showVolume: function() {
        var self;
        if (this.canvas.design.modeIsApp() && this.model.get("count") > 1) {
          return false;
        }
        if (this.volPopup) {
          return false;
        }
        self = this;
        this.volPopup = new VolumePopup({
          attachment: this.$el[0],
          host: this.model,
          models: this.model.get("volumeList"),
          selectAtBegin: this.model.get("volumeList")[0],
          canvas: this.canvas,
          onRemove: function() {
            return _.defer(function() {
              self.volPopup = null;
            });
          }
        });
        return false;
      },
      showGroup: function() {
        var bdm, gm, icon, idx, ins, insCln, m, members, name, volume, _i, _j, _len, _len1, _ref, _ref1;
        if (!this.canvas.design.modeIsApp()) {
          return;
        }
        insCln = CloudResources(this.type, this.model.design().region());
        members = (this.model.groupMembers() || []).slice(0);
        members.unshift({
          appId: this.model.get("appId")
        });
        name = this.model.get("name");
        gm = [];
        icon = this.iconUrl();
        for (idx = _i = 0, _len = members.length; _i < _len; idx = ++_i) {
          m = members[idx];
          ins = insCln.get(m.appId);
          if (!ins) {
            console.warn("Cannot find instance of `" + m.appId + "`");
            continue;
          }
          ins = ins.attributes;
          volume = ins.blockDeviceMapping.length;
          _ref = ins.blockDeviceMapping;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            bdm = _ref[_j];
            if (bdm.deviceName === ins.rootDeviceName) {
              --volume;
              break;
            }
          }
          gm.push({
            name: "" + name + "-" + idx,
            id: m.appId,
            icon: icon,
            volume: volume,
            state: ((_ref1 = ins.instanceState) != null ? _ref1.name : void 0) || "unknown"
          });
        }
        new InstancePopup({
          attachment: this.$el[0],
          host: this.model,
          models: gm,
          canvas: this.canvas
        });
      }
    }, {
      isDirectParentType: function(t) {
        return t !== constant.RESTYPE.AZ;
      },
      createResource: function(type, attr, option) {
        var TYPE_LC;
        if (!attr.parent) {
          return;
        }
        switch (attr.parent.type) {
          case constant.RESTYPE.SUBNET:
            return CanvasElement.createResource(type, attr, option);
          case constant.RESTYPE.ASG:
          case "ExpandedAsg":
            if (option.cloneSource) {
              notification('error', lang.CANVAS.LAUNCH_CONFIGURATION_MUST_BE_CREATED_FROM_AMI_IN_RESOURCE_PANEL);
              return;
            }
            TYPE_LC = constant.RESTYPE.LC;
            return CanvasElement.getClassByType(TYPE_LC).createResource(TYPE_LC, attr, option);
          case constant.RESTYPE.AZ:
            attr.parent = CanvasElement.createResource(constant.RESTYPE.SUBNET, {
              x: attr.x + 1,
              y: attr.y + 1,
              width: 11,
              height: 11,
              parent: attr.parent
            }, option);
            attr.x += 2;
            attr.y += 2;
            return CanvasElement.createResource(constant.RESTYPE.INSTANCE, attr, option);
        }
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeAsg',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js", "CanvasView"], function(CanvasElement, constant, CanvasManager, lang, CanvasView) {
    var CeAsg;
    CeAsg = CanvasElement.extend({

      /* env:dev                                     env:dev:end */
      type: constant.RESTYPE.ASG,
      parentType: [constant.RESTYPE.SUBNET],
      defaultSize: [15, 15],
      events: {
        "mousedown .asg-dragger": "dragExpand"
      },
      isGroup: function() {
        return true;
      },
      size: function() {
        return {
          width: 13,
          height: 13
        };
      },
      dragExpand: function(evt) {
        if (!this.canvas.design.modeIsApp()) {
          this.canvas.dragItem(evt, {
            onDrop: this.onDropExpand
          });
        }
        return false;
      },
      onDropExpand: function(evt, dataTransfer) {
        var ExpandedAsgModel, item, originalAsg, res, target;
        item = dataTransfer.item;
        originalAsg = item.model;
        if (originalAsg.type === "ExpandedAsg") {
          originalAsg = originalAsg.get("originalAsg");
        }
        target = dataTransfer.parent.model;
        ExpandedAsgModel = Design.modelClassForType("ExpandedAsg");
        res = new ExpandedAsgModel({
          x: dataTransfer.x,
          y: dataTransfer.y,
          parent: target,
          originalAsg: originalAsg
        });
        if (res && res.id) {
          return;
        }
        notification('error', sprintf(lang.CANVAS.ERR_DROP_ASG, originalAsg.get("name"), target.parent().get("name")));
      },
      create: function() {
        var m, svg, svgEl;
        m = this.model;
        svg = this.canvas.svg;
        svgEl = svg.group().add([svg.rect(129, 129).move(1, 1).radius(5).classes("asg-group"), svg.use("asg_frame", true).classes("asg-frame"), svg.use("asg_prompt", true).classes("asg-prompt"), svg.use("asg_dragger").classes("asg-dragger tooltip").attr("data-tooltip", lang.CANVAS.CVS_TIP_ASG_DRAGGER), svg.plain("").move(4, 14).classes('group-label')]).attr({
          "data-id": this.cid
        }).classes('canvasel ' + this.type.split(".").join("-"));
        this.canvas.appendAsg(svgEl);
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      },
      getLc: function() {
        return this.model.getLc();
      },
      labelWidth: function(width) {
        return (width || this.size().width * CanvasView.GRID_WIDTH) - 22;
      },
      render: function() {
        return CanvasManager.setLabel(this, this.$el.children("text"));
      },
      updateConnections: function() {
        var cn, lc, _i, _len, _ref;
        lc = this.model.getLc();
        if (!lc) {
          return;
        }
        _ref = this.canvas.getItem(lc.id).connections();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cn = _ref[_i];
          cn.update();
        }
      },
      destroy: function(selectedDomElement) {
        var substitute, x, y;
        substitute = this.model.get("expandedList");
        if (substitute && substitute[0]) {
          substitute = substitute[0];
          substitute.parent().addChild(this.model);
          x = substitute.get("x");
          y = substitute.get("y");
          substitute.remove();
          this.moveBy(x - this.model.get("x"), y - this.model.get("y"));
          this.model.set({
            x: x,
            y: y
          });
          return;
        }
        return CanvasElement.prototype.destroy.apply(this, arguments);
      }
    }, {
      createResource: function(type, attr, option) {
        var asgModel, lcId;
        if (attr.lcId) {
          lcId = attr.lcId;
          delete attr.lcId;
        }
        attr.x += 1;
        attr.y += 1;
        asgModel = CanvasElement.createResource(type, attr, option);
        asgModel.setLc(lcId);
        return asgModel;
      }
    });
    CeAsg.extend({

      /* env:dev                                             env:dev:end */
      type: "ExpandedAsg",
      listenModelEvents: function() {
        this.listenTo(this.model.get("originalAsg"), "change:name", this.render);
      },
      label: function() {
        return (this.model.get("originalAsg") || this.model).get("name");
      },
      render: function() {
        return CanvasManager.setLabel(this, this.$el.children("text"));
      }
    });
    return CeAsg;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeLc',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js", "./CpVolume", "./CpInstance", "CloudResources"], function(CanvasElement, constant, CanvasManager, lang, VolumePopup, InstancePopup, CloudResources) {
    return CanvasElement.extend({

      /* env:dev                                    env:dev:end */
      type: constant.RESTYPE.LC,
      portPosMap: {
        "launchconfig-sg-left": [10, 20, CanvasElement.constant.PORT_LEFT_ANGLE],
        "launchconfig-sg-right": [80, 20, CanvasElement.constant.PORT_RIGHT_ANGLE]
      },
      portDirMap: {
        "launchconfig-sg": "horizontal"
      },
      defaultSize: [9, 9],
      events: {
        "mousedown .server-number-group": "showGroup",
        "mousedown .volume-image": "showVolume",
        "click .volume-image": "suppressEvent",
        "click .server-number-group": "suppressEvent"
      },
      suppressEvent: function() {
        return false;
      },
      listenModelEvents: function() {
        this.listenTo(this.model, "change:connections", this.render);
        this.listenTo(this.model, "change:volumeList", this.render);
        this.listenTo(this.model, "change:imageId", this.render);
        this.listenTo(this.canvas, "switchMode", this.render);
        this.listenTo(this.model, "change:expandedList", function() {
          var self;
          self = this;
          return setTimeout(function() {
            if (!self.model.isRemoved()) {
              return self.render();
            }
          }, 0);
        });
      },
      iconUrl: function() {
        var ami;
        ami = this.model.getAmi() || this.model.get("cachedAmi");
        if (!ami) {
          return "ide/ami/ami-not-available.png";
        } else {
          return "ide/ami/" + ami.osType + "." + ami.architecture + "." + ami.rootDeviceType + ".png";
        }
      },
      pos: function(el) {
        var p, parentItem;
        if (el) {
          parentItem = this.canvas.getItem(el.parentNode.getAttribute("data-id"));
        } else {
          console.warn("Accessing LC' position without svg element");
          parentItem = parentItem = this.canvas.getItem(this.model.connectionTargets("LcUsage")[0].id);
        }
        if (parentItem) {
          p = parentItem.pos();
          p.x += 2;
          p.y += 3;
          return p;
        } else {
          return {
            x: 0,
            y: 0
          };
        }
      },
      isTopLevel: function() {
        return false;
      },
      ensureLcView: function() {
        var asg, elementChanged, expanded, isOriginalAsg, lcParentMap, parentCid, parentItem, parentModel, subview, svg, svgEl, uid, views, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
        elementChanged = false;
        lcParentMap = {};
        _ref = this.model.connectionTargets("LcUsage");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          asg = _ref[_i];
          lcParentMap[asg.id] = asg;
          _ref1 = asg.get("expandedList");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            expanded = _ref1[_j];
            lcParentMap[expanded.id] = expanded;
          }
        }
        views = [];
        _ref2 = this.$el;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          subview = _ref2[_k];
          views.push(subview);
        }
        for (_l = 0, _len3 = views.length; _l < _len3; _l++) {
          subview = views[_l];
          parentCid = $(subview.parentNode).attr("data-id");
          parentItem = this.canvas.getItem(parentCid);
          if (!parentItem) {
            this.removeView(subview);
            elementChanged = true;
          } else {
            parentModel = parentItem.model;
            if (!lcParentMap[parentModel.id]) {
              this.removeView(subview);
              elementChanged = true;
            } else {
              delete lcParentMap[parentModel.id];
            }
          }
        }
        svg = this.canvas.svg;
        for (uid in lcParentMap) {
          parentModel = lcParentMap[uid];
          isOriginalAsg = parentModel.type !== "ExpandedAsg";
          svgEl = this.createNode({
            image: "ide/icon/cvs-instance.png",
            imageX: 15,
            imageY: 11,
            imageW: 61,
            imageH: 62,
            label: true,
            labelBg: true,
            sg: isOriginalAsg
          }).add([
            svg.image(MC.IMG_URL + this.iconUrl(), 39, 27).move(27, 15).classes("ami-image"), svg.use("port_diamond").move(10, 20).attr({
              'class': 'port port-blue tooltip',
              'data-name': 'launchconfig-sg',
              'data-alias': 'launchconfig-sg-left',
              'data-tooltip': lang.IDE.PORT_TIP_D
            }), svg.use("port_diamond").move(80, 20).attr({
              'class': 'port port-blue tooltip',
              'data-name': 'launchconfig-sg',
              'data-alias': 'launchconfig-sg-right',
              'data-tooltip': lang.IDE.PORT_TIP_D
            }), svg.image(MC.IMG_URL + "ide/icon/icn-vol.png", 29, 24).move(31, 46).classes('volume-image'), svg.plain("").move(45, 58).classes('volume-number'), svg.group().add([svg.rect(20, 14).move(36, 2).radius(3).classes("server-number-bg"), svg.plain("0").move(46, 13).classes("server-number")]).classes("server-number-group")
          ]).classes("canvasel fixed AWS-AutoScaling-LaunchConfiguration").move(20, 30);
          this.addView(svgEl);
          this.canvas.getItem(uid).$el.children().eq(0).after(svgEl.node);
          elementChanged = true;
        }
        if (elementChanged) {
          this.updateConnections();
        }
      },
      render: function(force) {
        var asg, asgCln, el, m, numberGroup, volumeCount, _i, _len, _ref, _ref1;
        if (this.canvas.initializing && !force) {
          return;
        }
        this.ensureLcView();
        m = this.model;
        CanvasManager.update(this.$el.children(".node-label"), m.get("name"));
        CanvasManager.update(this.$el.children(".ami-image"), this.iconUrl(), "href");
        volumeCount = m.get("volumeList") ? m.get("volumeList").length : 0;
        CanvasManager.update(this.$el.children(".volume-number"), volumeCount);
        this.$el.children(".server-number-group").hide();
        if (m.design().modeIsApp()) {
          this.$el.children(".server-number-group").show();
          asgCln = CloudResources(constant.RESTYPE.ASG, m.design().region());
          _ref = this.$el;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            asg = this.canvas.getItem(el.parentNode.getAttribute("data-id")).model;
            asg = asgCln.get((asg.get("originalAsg") || asg).get("appId"));
            if (!asg) {
              continue;
            }
            asg = asg.attributes;
            if ((_ref1 = asg.Instances) != null ? _ref1.length : void 0) {
              numberGroup = $(el).children(".server-number-group").show();
              CanvasManager.update(numberGroup.children("text"), asg.Instances.length);
            }
          }
        }
      },
      destroy: function(selectedDomElement) {
        var LcUsage, parentItem, parentModel;
        if (this.model.connections("LcUsage").length > 1) {
          parentItem = this.canvas.getItem(selectedDomElement.parentNode.getAttribute("data-id"));
          if (!parentItem) {
            return;
          }
          LcUsage = Design.modelClassForType("LcUsage");
          parentModel = parentItem.model;
          if (parentModel.type === "ExpandedAsg") {
            parentModel = parentModel.get("originalAsg");
          }
          (new LcUsage(parentModel, this.model)).remove();
          return;
        }
        return CanvasElement.prototype.destroy.apply(this, arguments);
      },
      doDestroyModel: function() {
        var _ref;
        return (_ref = this.model.connections("LcUsage")[0]) != null ? _ref.remove() : void 0;
      },
      showVolume: function(evt) {
        var self;
        if (this.volPopup) {
          return false;
        }
        self = this;
        if (this.canvas.design.modeIsApp()) {
          return false;
        }
        this.volPopup = new VolumePopup({
          attachment: $(evt.currentTarget).closest("g")[0],
          host: this.model,
          models: this.model.get("volumeList"),
          canvas: this.canvas,
          onRemove: function() {
            return _.defer(function() {
              self.volPopup = null;
            });
          }
        });
        return false;
      },
      showGroup: function(evt) {
        var bdm, gm, icon, idx, ins, insCln, m, name, volume, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        insCln = CloudResources(constant.RESTYPE.INSTANCE, this.model.design().region());
        name = this.model.get("name");
        gm = [];
        icon = this.iconUrl();
        _ref = this.model.groupMembers();
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          m = _ref[idx];
          ins = insCln.get(m.appId);
          if (!ins) {
            console.warn("Cannot find instance of `" + m.appId + "`");
            continue;
          }
          ins = ins.attributes;
          volume = ins.blockDeviceMapping.length;
          _ref1 = ins.blockDeviceMapping;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            bdm = _ref1[_j];
            if (bdm.deviceName === ins.rootDeviceName) {
              --volume;
              break;
            }
          }
          gm.push({
            name: "" + name + "-" + idx,
            id: m.appId,
            icon: icon,
            volume: volume,
            state: ((_ref2 = ins.instanceState) != null ? _ref2.name : void 0) || "unknown"
          });
        }
        new InstancePopup({
          attachment: $(evt.currentTarget).closest(".canvasel")[0],
          host: this.model,
          models: gm,
          canvas: this.canvas
        });
      }
    }, {
      render: function(canvas) {
        var lc, _i, _len, _ref, _results;
        _ref = canvas.design.componentsOfType(constant.RESTYPE.LC);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lc = _ref[_i];
          _results.push(canvas.getItem(lc.id).render(true));
        }
        return _results;
      },
      createResource: function(t, attr, option) {
        var asg, lcModel;
        if (!attr.parent) {
          return;
        }
        if (attr.parent.getLc()) {
          return;
        }
        asg = attr.parent.get("originalAsg") || attr.parent;
        delete attr.parent;
        lcModel = CanvasElement.createResource(this.type, attr, option);
        asg.setLc(lcModel);
        return lcModel;
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeSgAsso',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js"], function(CanvasElement, constant, CanvasManager, lang) {
    return CanvasElement.extend({

      /* env:dev                                        env:dev:end */
      type: "SgAsso",
      initialize: function(options) {
        var canvas, self, toRenderTargetId;
        this.listenTo(this.model.getTarget(constant.RESTYPE.SG), "change:name", this.render);
        this.canvas = canvas = options.canvas;
        this.$el = $();
        if (!canvas.__sgAssoToRender) {
          canvas.__sgAssoToRender = {};
        }
        toRenderTargetId = this.model.getOtherTarget(constant.RESTYPE.SG).id;
        canvas.__sgAssoToRender[toRenderTargetId] = this.cid;
        self = this;
        _.defer(function() {
          var item, tgtAssoId;
          tgtAssoId = canvas.__sgAssoToRender[toRenderTargetId];
          delete canvas.__sgAssoToRender[toRenderTargetId];
          item = canvas.getItem(tgtAssoId);
          if (item) {
            item.render();
          }
        });
        CanvasElement.prototype.initialize.call(this, options);
      },
      remove: function() {
        this.render();
        this.stopListening();
      },
      update: function() {},
      render: function() {
        var childrens, i, m, res_node, resource, sg, sgs;
        if (this.canvas.initializing) {
          return;
        }
        m = this.model;
        resource = m.getOtherTarget(constant.RESTYPE.SG);
        res_node = this.canvas.getItem(resource.id);
        if (!res_node) {
          return;
        }
        sgs = m.sortedSgList();
        if (sgs.length > 5) {
          sgs.length = 5;
        }
        childrens = res_node.$el.children(".node-sg-color-group").children(":first-child");
        i = 0;
        while (i < 5) {
          sg = sgs[i];
          if (sg) {
            CanvasManager.update(childrens, sg.color, "color");
            CanvasManager.update(childrens, sg.get("name"), "tooltip");
          } else {
            CanvasManager.update(childrens, "none", "color");
            CanvasManager.update(childrens, "", "tooltip");
          }
          ++i;
          childrens = childrens.next();
        }
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeLine',["CanvasLine", "constant", "CanvasManager", "i18n!/nls/lang.js", "SGRulePopup"], function(CeLine, constant, CanvasManager, lang, SGRulePopup) {
    CeLine.extend({

      /* env:dev                                               env:dev:end */
      type: "EniAttachment"
    });
    CeLine.extend({

      /* env:dev                                         env:dev:end */
      type: "RTB_Asso"
    });
    CeLine.extend({

      /* env:dev                                          env:dev:end */
      type: "RTB_Route",
      lineStyle: function() {
        return 1;
      },
      createLine: function(pd) {
        var svg, svgEl;
        svg = this.canvas.svg;
        svgEl = CeLine.prototype.createLine.call(this, pd);
        svgEl.add(svg.path(pd).classes("dash-line"));
        return svgEl;
      }
    });
    CeLine.extend({

      /* env:dev                                     env:dev:end */
      type: constant.RESTYPE.VPN
    });
    CeLine.extend({

      /* env:dev                                               env:dev:end */
      type: "ElbSubnetAsso"
    });
    CeLine.extend({

      /* env:dev                                            env:dev:end */
      type: "ElbAmiAsso"
    }, {
      connect: function(LineClass, p1Comp, p2Comp) {
        new SGRulePopup(p1Comp, p2Comp);
        return new LineClass(p1Comp, p2Comp, void 0, {
          createByUser: true
        });
      }
    });
    CeLine.extend({

      /* env:dev                                               env:dev:end */
      type: "DbReplication",
      select: function() {},
      createLine: function(pd) {
        var svg, svgEl;
        svg = this.canvas.svg;
        svgEl = CeLine.prototype.createLine.call(this, pd);
        svgEl.add(svg.path(pd).classes("dash-line"));
        return svgEl;
      }
    });
    return CeLine;
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeSgLine',["CanvasLine", "constant", "CanvasManager", "i18n!/nls/lang.js", "SGRulePopup"], function(CeLine, constant, CanvasManager, lang, SGRulePopup) {
    return CeLine.extend({

      /* env:dev                                        env:dev:end */
      type: "SgRuleLine",
      createLine: function(pd) {
        var svg, svgEl;
        svg = this.canvas.svg;
        svgEl = svg.group().add([svg.path(pd), svg.path(pd).classes("fill-line")]).attr({
          "data-id": this.cid
        }).classes("line " + this.type.replace(/\./g, "-"));
        this.canvas.appendSgline(svgEl);
        return svgEl;
      },
      renderConnection: function(item_from, item_to, element1, element2) {
        return CeLine.prototype.renderConnection.call(this, item_from, item_to, element1, element2);
      },
      lineStyle: function() {
        return this.canvas.lineStyle();
      }
    }, {
      connect: function(LineClass, p1Comp, p2Comp) {
        new SGRulePopup(p1Comp, p2Comp);
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeDbInstance',["CanvasElement", "constant", "CanvasManager", "./CpVolume", "./CpInstance", "i18n!/nls/lang.js", "CloudResources", "DbSubnetGPopup"], function(CanvasElement, constant, CanvasManager, VolumePopup, InstancePopup, lang, CloudResources, DbSubnetGPopup) {
    return CanvasElement.extend({

      /* env:dev                                            env:dev:end */
      type: constant.RESTYPE.DBINSTANCE,
      parentType: [constant.RESTYPE.DBSBG, constant.RESTYPE.VPC],
      defaultSize: [9, 9],
      portPosMap: {
        "db-sg-left": [10, 35, CanvasElement.constant.PORT_LEFT_ANGLE],
        "db-sg-right": [79, 35, CanvasElement.constant.PORT_RIGHT_ANGLE],
        "replica": [45, 45, CanvasElement.constant.PORT_DOWN_ANGLE]
      },
      portDirMap: {
        "db-sg": "horizontal"
      },
      portPosition: function(portName, isAtomic) {
        var p;
        p = this.portPosMap[portName];
        if (portName === "replica") {
          p = p.slice(0);
          if (this.model.master()) {
            p[1] = 45;
            p[2] = CanvasElement.constant.PORT_2D_V_ANGLE;
          } else {
            p[1] = 61;
            p[2] = CanvasElement.constant.PORT_DOWN_ANGLE;
          }
        }
        return p;
      },
      typeIcon: function() {
        return "ide/icon/icn-" + (this.model.category()) + ".png";
      },
      engineIcon: function() {
        return "ide/icon/rds-" + (this.model.get("engine") || "").split("-")[0] + ".png";
      },
      events: {
        "mousedown .dbreplicate": "replicate",
        "mousedown .dbrestore": "restore"
      },
      listenModelEvents: function() {
        this.listenTo(this.model, "change:backupRetentionPeriod", this.render);
        this.listenTo(this.model, "change:connections", this.updateReplicaTip);
        this.listenTo(this.canvas, "change:externalData", this.updateState);
      },
      updateState: function() {
        var appData, m, state, stateIcon;
        m = this.model;
        stateIcon = this.$el.children(".res-state");
        if (stateIcon) {
          appData = CloudResources(m.type, m.design().region()).get(m.get("appId"));
          state = (appData != null ? appData.get("DBInstanceStatus") : void 0) || "unknown";
          return stateIcon.data("tooltip", state).attr("data-tooltip", state).attr("class", "res-state tooltip " + state);
        }
      },
      updateReplicaTip: function(cnn) {
        if (cnn.type === "DbReplication") {
          this.render();
        }
      },
      replicate: function(evt) {
        var appData, backup, _ref;
        if (!this.canvas.design.modeIsApp() && this.model.slaves().length < 5) {
          appData = CloudResources(this.model.type, this.model.design().region()).get(this.model.get("appId"));
          if (appData) {
            backup = ((_ref = appData.get('BackupRetentionPeriod')) !== 0 && _ref !== '0');
          }
          if (this.model.autobackup() && this.model.get('appId') && !backup) {
            return false;
          }
          this.canvas.dragItem(evt, {
            onDrop: this.onDropReplicate
          });
        }
        return false;
      },
      restore: function(evt) {
        if (!this.canvas.design.modeIsApp()) {
          this.canvas.dragItem(evt, {
            onDrop: this.onDropRestore
          });
        }
        return false;
      },
      onDropReplicate: function(evt, dataTransfer) {
        var DbInstance, name, nameMatch, replica, targetSubnetGroup;
        targetSubnetGroup = dataTransfer.parent.model;
        if (targetSubnetGroup !== dataTransfer.item.model.parent()) {
          notification("error", lang.NOTIFY.READ_REPLICA_MUST_BE_DROPPED_IN_THE_SAME_SBG);
          return;
        }
        name = dataTransfer.item.model.get("name");
        nameMatch = name.match(/(.+-replica)(\d*)$/);
        if (nameMatch) {
          name = nameMatch[1] + ((parseInt(nameMatch[2], 10) || 0) + 1);
        } else {
          name += "-replica";
        }
        DbInstance = Design.modelClassForType(constant.RESTYPE.DBINSTANCE);
        replica = new DbInstance({
          x: dataTransfer.x,
          y: dataTransfer.y,
          name: name,
          parent: targetSubnetGroup,
          sourceId: dataTransfer.item.model.id
        }, {
          master: dataTransfer.item.model
        });
        if (replica.id) {
          dataTransfer.item.canvas.selectItem(replica.id);
        }
      },
      onDropRestore: function(evt, dataTransfer) {
        var DbInstance, name, newDbIns, targetSubnetGroup;
        targetSubnetGroup = dataTransfer.parent.model;
        name = dataTransfer.item.model.get("name");
        DbInstance = Design.modelClassForType(constant.RESTYPE.DBINSTANCE);
        newDbIns = new DbInstance({
          x: dataTransfer.x,
          y: dataTransfer.y,
          name: "from-" + name,
          parent: targetSubnetGroup
        }, {
          master: dataTransfer.item.model,
          isRestore: true
        });
        if (newDbIns.id) {
          dataTransfer.item.canvas.selectItem(newDbIns.id);
        }
      },
      create: function() {
        var m, svg, svgEl;
        m = this.model;
        svg = this.canvas.svg;
        svgEl = this.createNode({
          image: "ide/icon/cvs-rds.png",
          imageX: 14,
          imageY: 8,
          imageW: 62,
          imageH: 66,
          label: true,
          labelBg: true,
          sg: true
        }).add([
          svg.image(MC.IMG_URL + this.engineIcon(), 46, 33).move(22, 18).classes('engine-image'), svg.use("port_diamond").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'db-sg',
            'data-alias': 'db-sg-left',
            'data-tooltip': lang.IDE.PORT_TIP_D
          }), svg.use("port_diamond").attr({
            'class': 'port port-blue tooltip',
            'data-name': 'db-sg',
            'data-alias': 'db-sg-right',
            'data-tooltip': lang.IDE.PORT_TIP_D
          })
        ]);
        if (this.model.get('engine') === constant.DB_ENGINE.MYSQL) {
          svgEl.add(svg.use("port_diamond").attr({
            "class": "port",
            'data-name': 'replica'
          }), 0);
          if (this.model.master()) {
            svgEl.add(svg.plain("REPLICA").move(45, 60).classes("replica-text"));
            svgEl.add(svg.use("replica_dragger").attr({
              "class": "dbreplicate tooltip"
            }));
          } else {
            svgEl.add(svg.plain("MASTER").move(45, 60).classes("master-text"));
            svgEl.add(svg.use("replica_dragger").attr({
              "class": "dbreplicate tooltip"
            }));
          }
        }
        if (!m.design().modeIsStack() && m.get("appId")) {
          svgEl.add(svg.circle(8).move(63, 15).classes('res-state unknown'));
        }
        svgEl.add(svg.use("restore_dragger").attr({
          "class": "dbrestore tooltip"
        }));
        this.canvas.appendNode(svgEl);
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      },
      render: function() {
        var $r, appData, backup, m, penddingObj, tip, _ref, _ref1;
        m = this.model;
        CanvasManager.setLabel(this, this.$el.children(".node-label"));
        CanvasManager.update(this.$el.children(".type-image"), this.typeIcon(), "href");
        CanvasManager.update(this.$el.children(".engine-image"), this.engineIcon(), "href");
        CanvasManager.toggle(this.$el.children(".master-text"), m.design().modeIsApp() && m.slaves().length);
        if (m.get('engine') === constant.DB_ENGINE.MYSQL) {
          $r = this.$el.children(".dbreplicate");
          appData = CloudResources(m.type, m.design().region()).get(m.get("appId"));
          if (appData) {
            backup = "" + appData.get('BackupRetentionPeriod') !== "0";
          }
          if (m.slaves().length < 5) {
            CanvasManager.removeClass($r, "disabled");
            if (m.autobackup()) {
              tip = lang.IDE.RES_TIP_DRAG_TO_DUPLICATE;
              if (m.category() === 'replica' && m.master() && m.master().master()) {
                CanvasManager.toggle($r, false);
              } else {
                CanvasManager.toggle($r, true);
                if (m.get('appId') && !backup) {
                  tip = lang.IDE.RES_TIP_PLEASE_WAIT_AUTOBACKUP_ENABLE_TO_CREATE_REPLICA;
                  CanvasManager.addClass($r, "disabled");
                }
              }
            } else {
              tip = lang.IDE.RES_TIP_DRAG_TO_DUPLICATE;
              CanvasManager.toggle($r, false);
            }
          } else {
            tip = lang.IDE.RES_TIP_CANT_CREATE_MORE_REPLICA;
            CanvasManager.toggle($r, true);
            CanvasManager.addClass($r, "disabled");
          }
          CanvasManager.update($r, tip, "tooltip");
          if (m.getSourceDBForRestore()) {
            CanvasManager.toggle($r, false);
          }
        }
        $r = this.$el.children(".dbrestore");
        CanvasManager.toggle($r, !!m.get("appId"));
        CanvasManager.update($r, lang.IDE.RES_TIP_DRAG_TO_RESTORE, "tooltip");
        appData = CloudResources(m.type, m.design().region()).get(m.get("appId"));
        if (appData) {
          penddingObj = appData.get('PendingModifiedValues');
          if (((_ref = appData.get('BackupRetentionPeriod')) === 0 || _ref === '0') || (penddingObj && ((_ref1 = penddingObj.BackupRetentionPeriod) === 0 || _ref1 === '0'))) {
            CanvasManager.toggle($r, false);
          }
        }
        this.updateState();
      }
    }, {
      isDirectParentType: function(t) {
        return t !== constant.RESTYPE.VPC;
      },
      createResource: function(type, attr, option) {
        var _ref;
        if (!attr.parent) {
          return;
        }
        if (option && ((_ref = option.cloneSource) != null ? _ref.master() : void 0)) {
          if (option.cloneSource.master().slaves().length > 5) {
            notification("error", lang.NOTIFY.CANNOT_CREATE_MORE_READ_REPLICA);
            return;
          } else {
            option.master = option.cloneSource.master();
            delete option.cloneSource;
          }
        }
        switch (attr.parent.type) {
          case constant.RESTYPE.DBSBG:
            return CanvasElement.createResource(type, attr, option);
          case constant.RESTYPE.VPC:
            attr.parent = CanvasElement.createResource(constant.RESTYPE.DBSBG, {
              x: attr.x + 1,
              y: attr.y + 1,
              width: 11,
              height: 11,
              parent: attr.parent
            }, option);
            if (!attr.parent.id) {
              notification("error", lang.NOTIFY.CANNOT_CREATE_SBG_DUE_TO_INSUFFICIENT_SUBNETS);
              return;
            }
            attr.x += 2;
            attr.y += 2;
            new DbSubnetGPopup({
              model: attr.parent
            });
            return CanvasElement.createResource(constant.RESTYPE.DBINSTANCE, attr, option);
        }
      }
    });
  });

}).call(this);

(function() {
  define('workspaces/awseditor/canvas/CeDbSubnetGroup',["CanvasElement", "constant", "CanvasManager", "i18n!/nls/lang.js", "CanvasView", "DbSubnetGPopup"], function(CanvasElement, constant, CanvasManager, lang, CanvasView, DbSubnetGPopup) {
    return CanvasElement.extend({

      /* env:dev                                             env:dev:end */
      type: constant.RESTYPE.DBSBG,
      parentType: [constant.RESTYPE.VPC],
      defaultSize: [19, 19],
      events: {
        "mouseenter .tooltip": "hoverLabel",
        "mouseleave .tooltip": "hoverOutLabel"
      },
      hoverLabel: function(evt) {
        var item, subnet, _i, _len, _ref;
        _ref = this.model.connectionTargets("SubnetgAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subnet = _ref[_i];
          item = this.canvas.getItem(subnet.id);
          if (item) {
            CanvasManager.addClass(item.$el, "highlight");
          }
        }
      },
      hoverOutLabel: function(evt) {
        var item, subnet, _i, _len, _ref;
        _ref = this.model.connectionTargets("SubnetgAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subnet = _ref[_i];
          item = this.canvas.getItem(subnet.id);
          if (item) {
            CanvasManager.removeClass(item.$el, "highlight");
          }
        }
      },
      listenModelEvents: function() {
        this.listenTo(this.model, "change:connections", this.render);
      },
      labelWidth: function(width) {
        return (width || this.model.width() * CanvasView.GRID_WIDTH) - 20;
      },
      create: function() {
        var m, svg, svgEl;
        svg = this.canvas.svg;
        svgEl = this.canvas.appendSubnet(this.createGroup());
        svgEl.add([svg.use("sbg_info"), svg.rect(16, 14).move(4, 4).classes("tooltip")]);
        $(svgEl.node).children(".group-label").attr({
          "class": "tooltip group-label",
          x: "17",
          y: "14"
        });
        m = this.model;
        this.initNode(svgEl, m.x(), m.y());
        return svgEl;
      },
      render: function() {
        var m, sb, tt, _i, _len, _ref;
        m = this.model;
        CanvasManager.setLabel(this, this.$el.children("text"));
        this.$el[0].instance.move(m.x() * CanvasView.GRID_WIDTH, m.y() * CanvasView.GRID_WIDTH);
        tt = [];
        _ref = m.connectionTargets("SubnetgAsso");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sb = _ref[_i];
          tt.push(sb.get("name"));
        }
        CanvasManager.update(this.$el.children(".tooltip"), tt.join(", ") || lang.CANVAS.CVS_NO_SUBNET_ASSIGNED_TO_SG, "tooltip");
      },
      doDestroyModel: function() {
        this.hoverOut();
        return CanvasElement.prototype.doDestroyModel.apply(this, arguments);
      }
    }, {
      createResource: function(type, attr, option) {
        var model;
        if (!attr.parent) {
          return;
        }
        model = CanvasElement.createResource(constant.RESTYPE.DBSBG, attr, option);
        new DbSubnetGPopup({
          model: model
        });
      }
    });
  });

}).call(this);


/*
  OpsEditor is a workspace for working on an OpsModel
  This class is implemented as a class cluster. Actually implementation is seperated in
  other concrete class :

  ProgressViewer  : For starting app.
 */

(function() {
  define('workspaces/awseditor/EditorAws',["OpsEditor", "./AwsEditorStack", "./AwsEditorApp", './model/connection/EniAttachment', './model/connection/VPNConnection', './model/connection/DbReplication', './model/InstanceModel', './model/EniModel', './model/VolumeModel', './model/AclModel', './model/AsgModel', './model/AzModel', './model/AzModel', './model/CgwModel', './model/ElbModel', './model/LcModel', './model/KeypairModel', './model/SslCertModel', './model/RtbModel', './model/SgModel', './model/SubnetModel', './model/VpcModel', './model/IgwModel', './model/VgwModel', './model/SnsModel', './model/StorageModel', './model/ScalingPolicyModel', './model/DBSbgModel', './model/DBInstanceModel', './model/DBOgModel', "./model/deserializeVisitor/JsonFixer", "./model/deserializeVisitor/EipMerge", "./model/deserializeVisitor/FixOldStack", "./model/deserializeVisitor/AsgExpandor", "./model/deserializeVisitor/ElbSgNamePatch", "./model/serializeVisitor/EniIpAssigner", "./model/serializeVisitor/AppToStack", "./canvas/CanvasViewAws", "./canvas/CanvasViewAwsLayout", "./canvas/CeVpc", "./canvas/CeAz", "./canvas/CeSubnet", "./canvas/CeRtb", "./canvas/CeIgw", "./canvas/CeVgw", "./canvas/CeCgw", "./canvas/CeElb", "./canvas/CeEni", "./canvas/CeInstance", "./canvas/CeAsg", "./canvas/CeLc", "./canvas/CeSgAsso", "./canvas/CeLine", "./canvas/CeSgLine", "./canvas/CeDbInstance", "./canvas/CeDbSubnetGroup"], function(OpsEditor, StackEditor, AppEditor) {
    var AwsEditor;
    AwsEditor = function(opsModel) {
      if (opsModel.isStack()) {
        return new StackEditor(opsModel);
      } else {
        return new AppEditor(opsModel);
      }
    };
    OpsEditor.registerEditors(AwsEditor, function(model) {
      return model.type === "AwsOps";
    });
    return AwsEditor;
  });

}).call(this);

